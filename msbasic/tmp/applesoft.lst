ca65 V2.18 - Git c05a750f
Main file   : msbasic/msbasic.s
Current file: msbasic/msbasic.s

000000r 1               ; Microsoft BASIC for 6502
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ; This is a single integrated assembly source tree that can generate seven different versions of
000000r 1               ; Microsoft BASIC for 6502.
000000r 1               ;
000000r 1               ; By running ./make.sh, this will generate all versions and compare them to the original files
000000r 1               ; byte by byte. The CC65 compiler suite is need to build this project.
000000r 1               ;
000000r 1               ; These are the first eight (known) versions of Microsoft BASIC for 6502:
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions   .define
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; Commodore BASIC 1     1977                    Y      Y          ZP          CBM
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -        CONFIG_10A
000000r 1               ; AppleSoft I           1977     1.1            N      Y        $0200         Apple      CONFIG_11
000000r 1               ; KIM BASIC             1977     1.1            N      Y          ZP            -        CONFIG_11A
000000r 1               ; AppleSoft II          1978                    Y      Y        $0200         Apple      CONFIG_2
000000r 1               ; Commodore BASIC 2     1979                    Y      Y        $0200          CBM       CONFIG_2A
000000r 1               ; KBD BASIC             1982                    Y      N        $0700          KBD       CONFIG_2B
000000r 1               ; MicroTAN              1980                    Y      Y          ZP            -        CONFIG_2C
000000r 1               ;
000000r 1               ; (Note that this assembly source cannot (yet) build AppleSoft II.)
000000r 1               ;
000000r 1               ; This lists the versions in the order in which they were forked from the Microsoft source base.
000000r 1               ; Commodore BASIC 1, as used on the original PET is the oldest known version of Microsoft BASIC
000000r 1               ; for 6502. It contains some additions to Microsoft's version, like Commodore-style file I/O.
000000r 1               ;
000000r 1               ; The CONFIG_n defines specify what Microsoft-version the OEM version is based on. If CONFIG_2B
000000r 1               ; is defined, for example, CONFIG_2A, CONFIG_2, CONFIG_11A, CONFIG_11 and CONFIG_10A will be
000000r 1               ; defined as well, and all bugfixes up to version 2B will be enabled.
000000r 1               ;
000000r 1               ; The following symbols can be defined in addition:
000000r 1               ;
000000r 1               ; CONFIG_CBM1_PATCHES				jump out into CBM1's binary patches instead of doing the right thing inline
000000r 1               ; CONFIG_CBM_ALL					add all Commodore-specific additions except file I/O
000000r 1               ; CONFIG_DATAFLG					?
000000r 1               ; CONFIG_EASTER_EGG					include the CBM2 "WAIT 6502" easter egg
000000r 1               ; CONFIG_FILE						support Commodore PRINT#, INPUT#, GET#, CMD
000000r 1               ; CONFIG_IO_MSB						all I/O has bit #7 set
000000r 1               ; CONFIG_MONCOUT_DESTROYS_Y			Y needs to be preserved when calling MONCOUT
000000r 1               ; CONFIG_NO_CR						terminal doesn't need explicit CRs on line ends
000000r 1               ; CONFIG_NO_LINE_EDITING			disable support for Microsoft-style "@", "_", BEL etc.
000000r 1               ; CONFIG_NO_POKE					don't support PEEK, POKE and WAIT
000000r 1               ; CONFIG_NO_READ_Y_IS_ZERO_HACK		don't do a very volatile trick that saves one byte
000000r 1               ; CONFIG_NULL						support for the NULL statement
000000r 1               ; CONFIG_PEEK_SAVE_LINNUM			preserve LINNUM on a PEEK
000000r 1               ; CONFIG_PRINTNULLS					whether PRINTNULLS does anything
000000r 1               ; CONFIG_PRINT_CR					print CR when line end reached
000000r 1               ; CONFIG_RAM						optimizations for RAM version of BASIC, only use on 1.x
000000r 1               ; CONFIG_ROR_WORKAROUND				use workaround for buggy 6502s from 1975/1976; not safe for CONFIG_SMALL!
000000r 1               ; CONFIG_SAFE_NAMENOTFOUND			check both bytes of the caller's address in NAMENOTFOUND
000000r 1               ; CONFIG_SCRTCH_ORDER				where in the init code to call SCRTCH
000000r 1               ; CONFIG_SMALL						use 6 digit FP instead of 9 digit, use 2 character error messages, don't have GET
000000r 1               ;
000000r 1               ; Changing symbol definitions can alter an existing base configuration, but it not guaranteed to assemble
000000r 1               ; or work correctly.
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 3               ; configuration
000000r 3               CONFIG_2 := 1
000000r 3               CONFIG_APPLE := 1
000000r 3               ;CONFIG_SMALL := 1
000000r 3               
000000r 3               
000000r 3               ;APPLE_BAD_BYTE := 1
000000r 3               CONFIG_IO_MSB := 1 ; all I/O has bit #7 set
000000r 3               ;CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_NO_CR := 1
000000r 3               
000000r 3               CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               
000000r 3               BYTES_PER_ELEMENT := 6 ; XXX override
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $4F
000000r 3               ZP_START3 = $0D
000000r 3               ZP_START4 = $55
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR				:= $000A
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0200
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $F8
000000r 3               SPACE_FOR_GOSUB := $36
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := $80
000000r 3               WIDTH			:= 0
000000r 3               WIDTH2			:= 0
000000r 3               
000000r 3               ; memory layout  $2600 - $CFFF  is for your programs and heap
000000r 3               RAMSTART2	:= $2600
000000r 3               APPLE1 := 1
000000r 3               
000000r 3               .ifdef APPLE1
000000r 3               ; monitor functions
000000r 3               ;MONRDKEY        := $FD0C
000000r 3               MONCOUT         := $FFEF
000000r 3               
000000r 3               
000000r 3               KBin := $D010
000000r 3               KBcr := $D011
000000r 3               DSPout  := $D012
000000r 3               DSPcr := $D013
000000r 3               
000000r 3               .else
000000r 3               MONRDKEY := $FD0C
000000r 3               MONCOUT  := $FDED
000000r 3               LF689			:= $F689
000000r 3               LF800			:= $F800
000000r 3               LF819			:= $F819
000000r 3               LF828			:= $F828
000000r 3               LF864			:= $F864
000000r 3               TEX				:= $FB2F
000000r 3               LFB40			:= $FB40
000000r 3               LFD0C			:= $FD0C
000000r 3               LFD6A			:= $FD6A
000000r 3               LFECD			:= $FECD
000000r 3               LFEFD			:= $FEFD
000000r 3               
000000r 3               .endif
000000r 3               
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00004F  2               Z15:
00004F  2  xx           	.res 1
000050  2               .ifndef POSX; allow override
000050  2               POSX:
000050  2               .endif
000050  2  xx           	.res 1
000051  2               .ifndef Z17; allow override
000051  2               Z17:
000051  2               .endif
000051  2  xx           	.res 1
000052  2               .ifndef Z18; allow override
000052  2               Z18:
000052  2               .endif
000052  2  xx           	.res 1
000053  2               LINNUM:
000053  2               .ifndef TXPSV; allow override
000053  2               TXPSV:
000053  2               .endif
000053  2  xx xx        	.res 2
000055  2               .ifndef INPUTBUFFER; allow override
000055  2               INPUTBUFFER:
000055  2               .endif
000055  2               
000055  2               .org ZP_START3
00000D  2               
00000D  2               CHARAC:
00000D  2  xx           	.res 1
00000E  2               ENDCHR:
00000E  2  xx           	.res 1
00000F  2               EOLPNTR:
00000F  2  xx           	.res 1
000010  2               DIMFLG:
000010  2  xx           	.res 1
000011  2               VALTYP:
000011  2               .ifdef CONFIG_SMALL
000011  2               	.res 1
000011  2               .else
000011  2  xx xx        	.res 2
000013  2               .endif
000013  2               DATAFLG:
000013  2  xx           	.res 1
000014  2               SUBFLG:
000014  2  xx           	.res 1
000015  2               INPUTFLG:
000015  2  xx           	.res 1
000016  2               CPRMASK:
000016  2  xx           	.res 1
000017  2               Z14:
000017  2  xx           	.res 1
000018  2               
000018  2               .org ZP_START4
000055  2               
000055  2               TEMPPT:
000055  2  xx           	.res 1
000056  2               LASTPT:
000056  2  xx xx        	.res 2
000058  2               TEMPST:
000058  2  xx xx xx xx  	.res 9
00005C  2  xx xx xx xx  
000060  2  xx           
000061  2               INDEX:
000061  2  xx xx        	.res 2
000063  2               DEST:
000063  2  xx xx        	.res 2
000065  2               RESULT:
000065  2  xx xx xx xx  	.res BYTES_FP
000069  2  xx           
00006A  2               RESULT_LAST = RESULT + BYTES_FP-1
00006A  2               TXTTAB:
00006A  2  xx xx        	.res 2
00006C  2               VARTAB:
00006C  2  xx xx        	.res 2
00006E  2               ARYTAB:
00006E  2  xx xx        	.res 2
000070  2               STREND:
000070  2  xx xx        	.res 2
000072  2               FRETOP:
000072  2  xx xx        	.res 2
000074  2               FRESPC:
000074  2  xx xx        	.res 2
000076  2               MEMSIZ:
000076  2  xx xx        	.res 2
000078  2               CURLIN:
000078  2  xx xx        	.res 2
00007A  2               OLDLIN:
00007A  2  xx xx        	.res 2
00007C  2               OLDTEXT:
00007C  2  xx xx        	.res 2
00007E  2               Z8C:
00007E  2  xx xx        	.res 2
000080  2               DATPTR:
000080  2  xx xx        	.res 2
000082  2               INPTR:
000082  2  xx xx        	.res 2
000084  2               VARNAM:
000084  2  xx xx        	.res 2
000086  2               VARPNT:
000086  2  xx xx        	.res 2
000088  2               FORPNT:
000088  2  xx xx        	.res 2
00008A  2               LASTOP:
00008A  2  xx xx        	.res 2
00008C  2               CPRTYP:
00008C  2  xx           	.res 1
00008D  2               FNCNAM:
00008D  2               TEMP3:
00008D  2  xx xx        	.res 2
00008F  2               DSCPTR:
00008F  2               .ifdef CONFIG_SMALL
00008F  2               		.res 2
00008F  2               .else
00008F  2  xx xx xx     		.res 3
000092  2               .endif
000092  2               DSCLEN:
000092  2  xx xx        	.res 2
000094  2               .ifndef JMPADRS ; allow override
000094  2               JMPADRS			:= DSCLEN + 1
000094  2               .endif
000094  2               Z52:
000094  2  xx           	.res 1
000095  2               ARGEXTENSION:
000095  2               .ifndef CONFIG_SMALL
000095  2  xx           	.res 1
000096  2               .endif
000096  2               TEMP1:
000096  2  xx           	.res 1
000097  2               HIGHDS:
000097  2  xx xx        	.res 2
000099  2               HIGHTR:
000099  2  xx xx        	.res 2
00009B  2               .ifndef CONFIG_SMALL
00009B  2               TEMP2:
00009B  2  xx           	.res 1
00009C  2               .endif
00009C  2               INDX:
00009C  2               TMPEXP:
00009C  2               .ifdef CONFIG_SMALL
00009C  2               TEMP2:
00009C  2               .endif
00009C  2  xx           	.res 1
00009D  2               EXPON:
00009D  2  xx           	.res 1
00009E  2               LOWTR:
00009E  2               .ifndef LOWTRX ; allow override
00009E  2               LOWTRX:
00009E  2               .endif
00009E  2  xx           	.res 1
00009F  2               EXPSGN:
00009F  2  xx           	.res 1
0000A0  2               FAC:
0000A0  2  xx xx xx xx  	.res BYTES_FP
0000A4  2  xx           
0000A5  2               FAC_LAST = FAC + BYTES_FP-1
0000A5  2               FACSIGN:
0000A5  2  xx           	.res 1
0000A6  2               SERLEN:
0000A6  2  xx           	.res 1
0000A7  2               SHIFTSIGNEXT:
0000A7  2  xx           	.res 1
0000A8  2               ARG:
0000A8  2  xx xx xx xx  	.res BYTES_FP
0000AC  2  xx           
0000AD  2               ARG_LAST = ARG + BYTES_FP-1
0000AD  2               ARGSIGN:
0000AD  2  xx           	.res 1
0000AE  2               STRNG1:
0000AE  2  xx xx        	.res 2
0000B0  2               SGNCPR = STRNG1
0000B0  2               FACEXTENSION = STRNG1+1
0000B0  2               STRNG2:
0000B0  2  xx xx        	.res 2
0000B2  2               CHRGET:
0000B2  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000B2  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000B2  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000B2  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000B2  2               
0000B2  2               
0000B2  2               
0000B2  1               
0000B2  1               .include "header.s"
0000B2  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef APPLE
000000r 2  4C rr rr             jmp COLD_START
000003r 2               WARM_START:
000003r 2  4C rr rr     		jmp RESTART
000006r 2               .endif
000006r 2               
000006r 1               .include "token.s"
000006r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               ;.ifdef APPLE
000007r 2               		;keyword_rts "PLT", PLT
000007r 2               ;.else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               ;.endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               ;.ifdef APPLE
00000Er 2               		;keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               ;.else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               ;.endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2               		keyword_rts "NULL", NULL
000011r 2               .endif
000011r 2               .ifdef KBD
000011r 2               		keyword_rts "PLOD", PLOD
000011r 2               		keyword_rts "PSAV", PSAV
000011r 2               		keyword_rts "VLOD", VLOD
000011r 2               		keyword_rts "VSAV", VSAV
000011r 2               .endif
000011r 2               .ifndef CONFIG_NO_POKE
000011r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000015r 2  49 D4 xx     
000012r 2               .endif
000012r 2               .ifndef KBD
000012r 2               		;keyword_rts "LOAD", LOAD
000012r 2               		;keyword_rts "SAVE", SAVE
000012r 2               .endif
000012r 2               .ifdef CONFIG_CBM_ALL
000012r 2               		keyword_rts "VERIFY", VERIFY
000012r 2               .endif
000012r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000016r 2  C6 xx        
000013r 2               .ifdef KBD
000013r 2               		keyword_rts "SLOD", SLOD
000013r 2               .endif
000013r 2               .ifndef CONFIG_NO_POKE
000013r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
000017r 2  4B C5 xx     
000014r 2               .endif
000014r 2               .ifdef CONFIG_FILE
000014r 2               		keyword_rts "PRINT#", PRINTH
000014r 2               .endif
000014r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
000018r 2  49 4E D4 xx  
000015r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
000019r 2  4E D4 xx     
000016r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Ar 2  53 D4 xx     
000017r 2               .ifdef CONFIG_CBM_ALL
000017r 2               		keyword_rts "CLR", CLEAR
000017r 2               .else
000017r 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Br 2  45 41 D2 xx  
000018r 2               .endif
000018r 2               .ifdef CONFIG_FILE
000018r 2               		keyword_rts "CMD", CMD
000018r 2               		keyword_rts "SYS", SYS
000018r 2               		keyword_rts "OPEN", OPEN
000018r 2               		keyword_rts "CLOSE", CLOSE
000018r 2               .endif
000018r 2               .ifndef CONFIG_SMALL
000018r 2  rr rr 47 45  		keyword_rts "GET", GET
00001Cr 2  D4 xx        
000019r 2               .endif
000019r 2               .ifdef KBD
000019r 2               		keyword_rts "PRT", PRT
000019r 2               .endif
000019r 2  rr rr 4E 45  		keyword_rts "NEW", NEW
00001Dr 2  D7 xx        
00001Ar 2               
00001Ar 2               		count_tokens
00001Ar 2               
00001Ar 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
00001Er 2  xx           
00001Br 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Cr 2  46 CE xx     		keyword	"FN", TOKEN_FN
00001Dr 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000021r 2  xx           
00001Er 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000022r 2  xx           
00001Fr 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000020r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000024r 2  xx           
000021r 2  AB xx        		keyword	"+", TOKEN_PLUS
000022r 2  AD xx        		keyword	"-", TOKEN_MINUS
000023r 2  AA xx        		keyword	"*"
000024r 2  AF xx        		keyword	"/"
000025r 2               .ifdef KBD
000025r 2               		keyword	"#"
000025r 2               .else
000025r 2  DE xx        		keyword	"^"
000026r 2               .endif
000026r 2  41 4E C4 xx  		keyword	"AND"
000027r 2  4F D2 xx     		keyword	"OR"
000028r 2  BE xx        		keyword	">", TOKEN_GREATER
000029r 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Ar 2  BC xx        		keyword	"<"
00002Br 2               
00002Br 2                       .segment "VECTORS"
000034r 2               UNFNC:
000034r 2               
000034r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
000038r 2  CE xx        
00002Cr 2  rr rr 49 4E  		keyword_addr "INT", INT
000030r 2  D4 xx        
00002Dr 2  rr rr 41 42  		keyword_addr "ABS", ABS
000031r 2  D3 xx        
00002Er 2               .ifdef KBD
00002Er 2               		keyword_addr "VER", VER
00002Er 2               .endif
00002Er 2               .ifndef CONFIG_NO_POKE
00002Er 2                 .ifdef CONFIG_RAM
00002Er 2               		keyword_addr "USR", IQERR
00002Er 2                 .else
00002Er 2  0A 00 55 53  		keyword_addr "USR", USR
000032r 2  D2 xx        
00002Fr 2                 .endif
00002Fr 2               .endif
00002Fr 2  rr rr 46 52  		keyword_addr "FRE", FRE
000033r 2  C5 xx        
000030r 2  rr rr 50 4F  		keyword_addr "POS", POS
000034r 2  D3 xx        
000031r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000035r 2  D2 xx        
000032r 2  rr rr 52 4E  		keyword_addr "RND", RND
000036r 2  C4 xx        
000033r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000037r 2  C7 xx        
000034r 2  rr rr 45 58  		keyword_addr "EXP", EXP
000038r 2  D0 xx        
000035r 2               .segment "VECTORS"
000048r 2               UNFNC_COS:
000048r 2  rr rr 43 4F  		keyword_addr "COS", COS
00004Cr 2  D3 xx        
000036r 2               .segment "VECTORS"
00004Ar 2               UNFNC_SIN:
00004Ar 2  rr rr 53 49  		keyword_addr "SIN", SIN
00004Er 2  CE xx        
000037r 2               .segment "VECTORS"
00004Cr 2               UNFNC_TAN:
00004Cr 2  rr rr 54 41  		keyword_addr "TAN", TAN
000050r 2  CE xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_ATN:
00004Er 2  rr rr 41 54  		keyword_addr "ATN", ATN
000052r 2  CE xx        
000039r 2               .ifdef KBD
000039r 2               		keyword_addr "GETC", GETC
000039r 2               .endif
000039r 2               .ifndef CONFIG_NO_POKE
000039r 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
00003Dr 2  45 CB xx     
00003Ar 2               .endif
00003Ar 2  rr rr 4C 45  		keyword_addr "LEN", LEN
00003Er 2  CE xx        
00003Br 2  rr rr 53 54  		keyword_addr "STR$", STR
00003Fr 2  52 A4 xx     
00003Cr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000040r 2  CC xx        
00003Dr 2  rr rr 41 53  		keyword_addr "ASC", ASC
000041r 2  C3 xx        
00003Er 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000043r 2  46 54 A4 xx  
000040r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000044r 2  47 48 54 A4  
000048r 2  xx           
000041r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000045r 2  44 A4 xx     
000042r 2               .ifdef CONFIG_2
000042r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000043r 2               .endif
000043r 2                       .segment "KEYWORDS"
0000D8r 2  00           		.byte   0
0000D9r 2               
0000D9r 2                       .segment "VECTORS"
000062r 2               MATHTBL:
000062r 2  79                   .byte   $79
000063r 2  rr rr                .word   FADDT-1
000065r 2  79                   .byte   $79
000066r 2  rr rr                .word   FSUBT-1
000068r 2  7B                   .byte   $7B
000069r 2  rr rr                .word   FMULTT-1
00006Br 2  7B                   .byte   $7B
00006Cr 2  rr rr                .word   FDIVT-1
00006Er 2  7F                   .byte   $7F
00006Fr 2  rr rr                .word   FPWRT-1
000071r 2  50                   .byte   $50
000072r 2  rr rr                .word   TAND-1
000074r 2  46                   .byte   $46
000075r 2  rr rr                .word   OR-1
000077r 2  7D                   .byte   $7D
000078r 2  rr rr                .word   NEGOP-1
00007Ar 2  5A                   .byte   $5A
00007Br 2  rr rr                .word   EQUOP-1
00007Dr 2  64                   .byte   $64
00007Er 2  rr rr                .word   RELOPS-1
000080r 2               
000080r 1               .include "error.s"
000080r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2               define_error ERR_BADDATA, "FILE DATA"
0000BFr 2                 .endif
0000BFr 2               .endif
0000BFr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000C3r 2  55 4C 41 20  
0000C7r 2  54 4F 4F 20  
0000D2r 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000D6r 2  54 20 43 4F  
0000DAr 2  4E 54 49 4E  
0000E0r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000E4r 2  46 27 44 20  
0000E8r 2  46 55 4E 43  
0000F0r 2               .endif
0000F0r 2               
0000F0r 1               .include "message.s"
0000F0r 2               ; global messages: "error", "in", "ready", "break"
0000F0r 2               
0000F0r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2  20 45 52 52          .byte   " ERR"
000004r 2  07 07        		.byte	$07,$07
000006r 2                 .else
000006r 2                       .byte   " ERROR"
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2  0D 00 00 4B          .byte   CR,0,0,"K",CR,LF
000010r 2  0D 0A        
000012r 2                   .else
000012r 2               		.byte   CR,LF,"OK",CR,LF
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2               .endif
000013r 2               
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 89                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 88                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 89                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 88                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 12                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 70                sta     STREND
00004Er 2  84 71                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 99                lda     HIGHTR
000053r 2  E5 9E                sbc     LOWTR
000055r 2  85 61                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 9A                lda     HIGHTR+1
00005Ar 2  E5 9F                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 99                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 61                sbc     INDEX
000066r 2  85 99                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 9A                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 97                lda     HIGHDS
00006Fr 2  E5 61                sbc     INDEX
000071r 2  85 97                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 98                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 99                lda     (HIGHTR),y
00007Br 2  91 97                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 99                lda     (HIGHTR),y
000082r 2  91 97                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 9A                dec     HIGHTR+1
000086r 2  C6 98                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 36                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 61                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 61                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 73                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 72                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 09                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 96                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F7                ldx     #<(TEMP1-FAC+1)
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 A0                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 73                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 72                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 4D                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 17                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL
0000D3r 2  48                   pha
0000D4r 2  29 7F                and     #$7F
0000D6r 2               .endif
0000D6r 2  20 rr rr             jsr     OUTDO
0000D9r 2               .ifdef CONFIG_SMALL
0000D9r 2                       lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2                       jsr     OUTDO
0000D9r 2               .else
0000D9r 2  E8                   inx
0000DAr 2  68                   pla
0000DBr 2  10 F3                bpl     L2329
0000DDr 2               .endif
0000DDr 2  20 rr rr             jsr     STKINI
0000E0r 2  A9 rr                lda     #<QT_ERROR
0000E2r 2  A0 rr                ldy     #>QT_ERROR
0000E4r 2               
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               ; PRINT STRING AT (Y,A)
0000E4r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E4r 2               ; FALL INTO WARM RESTART
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               PRINT_ERROR_LINNUM:
0000E4r 2  20 rr rr             jsr     STROUT
0000E7r 2  A4 79                ldy     CURLIN+1
0000E9r 2  C8                   iny
0000EAr 2  F0 03                beq     RESTART
0000ECr 2  20 rr rr             jsr     INPRT
0000EFr 2               
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               ; WARM RESTART ENTRY
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               RESTART:
0000EFr 2               .ifdef KBD
0000EFr 2                       jsr     CRDO
0000EFr 2                       nop
0000EFr 2               L2351X:
0000EFr 2                       jsr     OKPRT
0000EFr 2               L2351:
0000EFr 2                       jsr     INLIN
0000EFr 2               LE28E:
0000EFr 2                       bpl     RESTART
0000EFr 2               .else
0000EFr 2  46 17                lsr     Z14
0000F1r 2  A9 rr                lda     #<QT_OK
0000F3r 2  A0 rr                ldy     #>QT_OK
0000F5r 2                 .ifdef CONFIG_CBM_ALL
0000F5r 2                       jsr     STROUT
0000F5r 2                 .else
0000F5r 2  20 03 00             jsr     GOSTROUT
0000F8r 2                 .endif
0000F8r 2               L2351:
0000F8r 2  20 rr rr             jsr     INLIN
0000FBr 2               .endif
0000FBr 2  86 B9                stx     TXTPTR
0000FDr 2  84 BA                sty     TXTPTR+1
0000FFr 2  20 B2 00             jsr     CHRGET
000102r 2               .ifdef CONFIG_11
000102r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000102r 2               ; and ':' - a line starting with ':' in
000102r 2               ; direct mode gets ignored
000102r 2  AA                   tax
000103r 2               .endif
000103r 2               .ifdef KBD
000103r 2                       beq     L2351X
000103r 2               .else
000103r 2  F0 F3                beq     L2351
000105r 2               .endif
000105r 2  A2 FF                ldx     #$FF
000107r 2  86 79                stx     CURLIN+1
000109r 2  90 06                bcc     NUMBERED_LINE
00010Br 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Er 2  4C rr rr             jmp     NEWSTT2
000111r 2               
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               ; HANDLE NUMBERED LINE
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               NUMBERED_LINE:
000111r 2  20 rr rr             jsr     LINGET
000114r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000117r 2  84 0F                sty     EOLPNTR
000119r 2               .ifdef KBD
000119r 2                       jsr     FNDLIN2
000119r 2                       lda     JMPADRS+1
000119r 2                       sta     LOWTR
000119r 2                       sta     Z96
000119r 2                       lda     JMPADRS+2
000119r 2                       sta     LOWTR+1
000119r 2                       sta     Z96+1
000119r 2                       lda     LINNUM
000119r 2                       sta     L06FE
000119r 2                       lda     LINNUM+1
000119r 2                       sta     L06FE+1
000119r 2                       inc     LINNUM
000119r 2                       bne     LE2D2
000119r 2                       inc     LINNUM+1
000119r 2                       bne     LE2D2
000119r 2                       jmp     SYNERR
000119r 2               LE2D2:
000119r 2                       jsr     LF457
000119r 2                       ldx     #Z96
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bcs     LE2FD
000119r 2               LE2DC:
000119r 2                       ldx     #$00
000119r 2                       lda     (JMPADRS+1,x)
000119r 2                       sta     (Z96,x)
000119r 2                       inc     JMPADRS+1
000119r 2                       bne     LE2E8
000119r 2                       inc     JMPADRS+2
000119r 2               LE2E8:
000119r 2                       inc     Z96
000119r 2                       bne     LE2EE
000119r 2                       inc     Z96+1
000119r 2               LE2EE:
000119r 2                       ldx     #VARTAB
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bne     LE2DC
000119r 2                       lda     Z96
000119r 2                       sta     VARTAB
000119r 2                       lda     Z96+1
000119r 2                       sta     VARTAB+1
000119r 2               LE2FD:
000119r 2                       jsr     SETPTRS
000119r 2                       jsr     LE33D
000119r 2                       lda     INPUTBUFFER
000119r 2               LE306:
000119r 2                       beq     LE28E
000119r 2                       cmp     #$A5
000119r 2                       beq     LE306
000119r 2                       clc
000119r 2               .else
000119r 2  20 rr rr             jsr     FNDLIN
00011Cr 2  90 44                bcc     PUT_NEW_LINE
00011Er 2  A0 01                ldy     #$01
000120r 2  B1 9E                lda     (LOWTR),y
000122r 2  85 62                sta     INDEX+1
000124r 2  A5 6C                lda     VARTAB
000126r 2  85 61                sta     INDEX
000128r 2  A5 9F                lda     LOWTR+1
00012Ar 2  85 64                sta     DEST+1
00012Cr 2  A5 9E                lda     LOWTR
00012Er 2  88                   dey
00012Fr 2  F1 9E                sbc     (LOWTR),y
000131r 2  18                   clc
000132r 2  65 6C                adc     VARTAB
000134r 2  85 6C                sta     VARTAB
000136r 2  85 63                sta     DEST
000138r 2  A5 6D                lda     VARTAB+1
00013Ar 2  69 FF                adc     #$FF
00013Cr 2  85 6D                sta     VARTAB+1
00013Er 2  E5 9F                sbc     LOWTR+1
000140r 2  AA                   tax
000141r 2  38                   sec
000142r 2  A5 9E                lda     LOWTR
000144r 2  E5 6C                sbc     VARTAB
000146r 2  A8                   tay
000147r 2  B0 03                bcs     L23A5
000149r 2  E8                   inx
00014Ar 2  C6 64                dec     DEST+1
00014Cr 2               L23A5:
00014Cr 2  18                   clc
00014Dr 2  65 61                adc     INDEX
00014Fr 2  90 03                bcc     L23AD
000151r 2  C6 62                dec     INDEX+1
000153r 2  18                   clc
000154r 2               L23AD:
000154r 2  B1 61                lda     (INDEX),y
000156r 2  91 63                sta     (DEST),y
000158r 2  C8                   iny
000159r 2  D0 F9                bne     L23AD
00015Br 2  E6 62                inc     INDEX+1
00015Dr 2  E6 64                inc     DEST+1
00015Fr 2  CA                   dex
000160r 2  D0 F2                bne     L23AD
000162r 2               .endif
000162r 2               ; ----------------------------------------------------------------------------
000162r 2               PUT_NEW_LINE:
000162r 2               .ifndef KBD
000162r 2                 .ifdef CONFIG_2
000162r 2  20 rr rr             jsr     SETPTRS
000165r 2  20 rr rr             jsr     LE33D
000168r 2  AD 00 02             lda     INPUTBUFFER
00016Br 2  F0 8B                beq     L2351
00016Dr 2  18                   clc
00016Er 2                 .else
00016Er 2                       lda     INPUTBUFFER
00016Er 2                       beq     FIX_LINKS
00016Er 2                       lda     MEMSIZ
00016Er 2                       ldy     MEMSIZ+1
00016Er 2                       sta     FRETOP
00016Er 2                       sty     FRETOP+1
00016Er 2                 .endif
00016Er 2               .endif
00016Er 2  A5 6C                lda     VARTAB
000170r 2  85 99                sta     HIGHTR
000172r 2  65 0F                adc     EOLPNTR
000174r 2  85 97                sta     HIGHDS
000176r 2  A4 6D                ldy     VARTAB+1
000178r 2  84 9A                sty     HIGHTR+1
00017Ar 2  90 01                bcc     L23D6
00017Cr 2  C8                   iny
00017Dr 2               L23D6:
00017Dr 2  84 98                sty     HIGHDS+1
00017Fr 2  20 rr rr             jsr     BLTU
000182r 2               .ifdef CONFIG_INPUTBUFFER_0200
000182r 2  A5 53                lda     LINNUM
000184r 2  A4 54                ldy     LINNUM+1
000186r 2  8D FE 01             sta     INPUTBUFFER-2
000189r 2  8C FF 01             sty     INPUTBUFFER-1
00018Cr 2               .endif
00018Cr 2  A5 70                lda     STREND
00018Er 2  A4 71                ldy     STREND+1
000190r 2  85 6C                sta     VARTAB
000192r 2  84 6D                sty     VARTAB+1
000194r 2  A4 0F                ldy     EOLPNTR
000196r 2  88                   dey
000197r 2               ; ---COPY LINE INTO PROGRAM-------
000197r 2               L23E6:
000197r 2  B9 FC 01             lda     INPUTBUFFER-4,y
00019Ar 2  91 9E                sta     (LOWTR),y
00019Cr 2  88                   dey
00019Dr 2  10 F8                bpl     L23E6
00019Fr 2               
00019Fr 2               ; ----------------------------------------------------------------------------
00019Fr 2               ; CLEAR ALL VARIABLES
00019Fr 2               ; RE-ESTABLISH ALL FORWARD LINKS
00019Fr 2               ; ----------------------------------------------------------------------------
00019Fr 2               FIX_LINKS:
00019Fr 2  20 rr rr             jsr     SETPTRS
0001A2r 2               .ifdef CONFIG_2
0001A2r 2  20 rr rr             jsr     LE33D
0001A5r 2  4C rr rr             jmp     L2351
0001A8r 2               LE33D:
0001A8r 2               .endif
0001A8r 2  A5 6A                lda     TXTTAB
0001AAr 2  A4 6B                ldy     TXTTAB+1
0001ACr 2  85 61                sta     INDEX
0001AEr 2  84 62                sty     INDEX+1
0001B0r 2  18                   clc
0001B1r 2               L23FA:
0001B1r 2  A0 01                ldy     #$01
0001B3r 2  B1 61                lda     (INDEX),y
0001B5r 2               .ifdef CONFIG_2
0001B5r 2  F0 1D                beq     RET3
0001B7r 2               .else
0001B7r 2                       jeq     L2351
0001B7r 2               .endif
0001B7r 2  A0 04                ldy     #$04
0001B9r 2               L2405:
0001B9r 2  C8                   iny
0001BAr 2  B1 61                lda     (INDEX),y
0001BCr 2  D0 FB                bne     L2405
0001BEr 2  C8                   iny
0001BFr 2  98                   tya
0001C0r 2  65 61                adc     INDEX
0001C2r 2  AA                   tax
0001C3r 2  A0 00                ldy     #$00
0001C5r 2  91 61                sta     (INDEX),y
0001C7r 2  A5 62                lda     INDEX+1
0001C9r 2  69 00                adc     #$00
0001CBr 2  C8                   iny
0001CCr 2  91 61                sta     (INDEX),y
0001CEr 2  86 61                stx     INDEX
0001D0r 2  85 62                sta     INDEX+1
0001D2r 2  90 DD                bcc     L23FA	; always
0001D4r 2               
0001D4r 2               ; ----------------------------------------------------------------------------
0001D4r 2               .ifdef KBD
0001D4r 2               .include "kbd_loadsave.s"
0001D4r 2               .endif
0001D4r 2               
0001D4r 2               .ifdef CONFIG_2
0001D4r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001D4r 2               RET3:
0001D4r 2  60           		rts
0001D5r 2               .endif
0001D5r 2               
0001D5r 2               .include "inline.s"
0001D5r 3               .segment "CODE"
0001D5r 3               
0001D5r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001D5r 3               L2420:
0001D5r 3                 .ifdef OSI
0001D5r 3                       jsr     OUTDO
0001D5r 3                 .endif
0001D5r 3                       dex
0001D5r 3                       bpl     INLIN2
0001D5r 3               L2423:
0001D5r 3                 .ifdef OSI
0001D5r 3                       jsr     OUTDO
0001D5r 3                 .endif
0001D5r 3                       jsr     CRDO
0001D5r 3               .endif
0001D5r 3               
0001D5r 3               ; ----------------------------------------------------------------------------
0001D5r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D5r 3               ; ----------------------------------------------------------------------------
0001D5r 3               .ifndef KBD
0001D5r 3               INLIN:
0001D5r 3                 .ifdef APPLE
0001D5r 3  A2 DD                ldx     #$DD
0001D7r 3               INLIN1:
0001D7r 3  86 33                stx     $33
0001D9r 3  20 rr rr             jsr     MONRDLINE
0001DCr 3  E0 EF                cpx     #$EF
0001DEr 3  B0 02                bcs     L0C32
0001E0r 3  A2 EF                ldx     #$EF
0001E2r 3               L0C32:
0001E2r 3  A9 00                lda     #$00
0001E4r 3  9D 00 02             sta     INPUTBUFFER,x
0001E7r 3  A2 FF                ldx     #<(INPUTBUFFER-1)
0001E9r 3  A0 01                ldy     #>(INPUTBUFFER-1)
0001EBr 3  60                   rts
0001ECr 3                 .endif
0001ECr 3               
0001ECr 3                 .ifndef APPLE
0001ECr 3                       ldx     #$00
0001ECr 3               INLIN2:
0001ECr 3                       jsr     GETLN
0001ECr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001ECr 3                       cmp     #$07
0001ECr 3                       beq     L2443
0001ECr 3                   .endif
0001ECr 3                       cmp     #$0D
0001ECr 3                       beq     L2453
0001ECr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001ECr 3                       cmp     #$20
0001ECr 3                       bcc     INLIN2
0001ECr 3                     .ifdef MICROTAN
0001ECr 3                       cmp     #$80
0001ECr 3                     .else
0001ECr 3                       cmp     #$7D
0001ECr 3                     .endif
0001ECr 3                       bcs     INLIN2
0001ECr 3                       cmp     #$40 ; @
0001ECr 3                       beq     L2423
0001ECr 3                     .ifdef MICROTAN
0001ECr 3                       cmp     #$7F ; DEL
0001ECr 3                     .else
0001ECr 3                       cmp     #$5F ; _
0001ECr 3                     .endif
0001ECr 3                       beq     L2420
0001ECr 3               L2443:
0001ECr 3                     .ifdef MICROTAN
0001ECr 3                       cpx     #$4F
0001ECr 3                     .else
0001ECr 3                       cpx     #$47
0001ECr 3                     .endif
0001ECr 3                       bcs     L244C
0001ECr 3                   .endif
0001ECr 3                       sta     INPUTBUFFER,x
0001ECr 3                       inx
0001ECr 3                   .ifdef OSI
0001ECr 3                       .byte   $2C
0001ECr 3                   .else
0001ECr 3                       bne     INLIN2
0001ECr 3                   .endif
0001ECr 3               L244C:
0001ECr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001ECr 3                       lda     #$07 ; BEL
0001ECr 3                       jsr     OUTDO
0001ECr 3                       bne     INLIN2
0001ECr 3                   .endif
0001ECr 3               L2453:
0001ECr 3                       jmp     L29B9
0001ECr 3                 .endif
0001ECr 3               .endif
0001ECr 3               
0001ECr 3               .ifndef KBD
0001ECr 3                 .ifndef APPLE
0001ECr 3               GETLN:
0001ECr 3                   .ifdef CONFIG_FILE
0001ECr 3                       jsr     CHRIN
0001ECr 3                       ldy     CURDVC
0001ECr 3                       bne     L2465
0001ECr 3                   .else
0001ECr 3                       jsr     MONRDKEY
0001ECr 3                   .endif
0001ECr 3                   .ifdef OSI
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       nop
0001ECr 3                       and     #$7F
0001ECr 3                   .endif
0001ECr 3                 .endif ;/* APPLE */
0001ECr 3                 .ifdef APPLE
0001ECr 3               RDKEY:
0001ECr 3  20 rr rr             jsr     MONRDKEY
0001EFr 3  29 7F                and     #$7F
0001F1r 3                 .endif
0001F1r 3  C9 0F                cmp     #$0F
0001F3r 3  D0 08                bne     L2465
0001F5r 3  48                   pha
0001F6r 3  A5 17                lda     Z14
0001F8r 3  49 FF                eor     #$FF
0001FAr 3  85 17                sta     Z14
0001FCr 3  68                   pla
0001FDr 3               L2465:
0001FDr 3  60                   rts
0001FEr 3               .endif ;/* KBD */
0001FEr 3               
0001FEr 2               
0001FEr 2               ; ----------------------------------------------------------------------------
0001FEr 2               ; TOKENIZE THE INPUT LINE
0001FEr 2               ; ----------------------------------------------------------------------------
0001FEr 2               PARSE_INPUT_LINE:
0001FEr 2  A6 B9                ldx     TXTPTR
000200r 2  A0 04                ldy     #$04
000202r 2  84 13                sty     DATAFLG
000204r 2               L246C:
000204r 2  BD 00 02             lda     INPUTBUFFERX,x
000207r 2               .ifdef CONFIG_CBM_ALL
000207r 2                       bpl     LC49E
000207r 2                       cmp     #$FF
000207r 2                       beq     L24AC
000207r 2                       inx
000207r 2                       bne     L246C
000207r 2               LC49E:
000207r 2               .endif
000207r 2  C9 20                cmp     #$20
000209r 2  F0 37                beq     L24AC
00020Br 2  85 0E                sta     ENDCHR
00020Dr 2  C9 22                cmp     #$22
00020Fr 2  F0 56                beq     L24D0
000211r 2  24 13                bit     DATAFLG
000213r 2  70 2D                bvs     L24AC
000215r 2  C9 3F                cmp     #$3F
000217r 2  D0 04                bne     L2484
000219r 2  A9 94                lda     #TOKEN_PRINT
00021Br 2  D0 25                bne     L24AC
00021Dr 2               L2484:
00021Dr 2  C9 30                cmp     #$30
00021Fr 2  90 04                bcc     L248C
000221r 2  C9 3C                cmp     #$3C
000223r 2  90 1D                bcc     L24AC
000225r 2               ; ----------------------------------------------------------------------------
000225r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000225r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000225r 2               ; ----------------------------------------------------------------------------
000225r 2               L248C:
000225r 2  84 B0                sty     STRNG2
000227r 2  A0 00                ldy     #$00
000229r 2  84 0F                sty     EOLPNTR
00022Br 2  88                   dey
00022Cr 2  86 B9                stx     TXTPTR
00022Er 2  CA                   dex
00022Fr 2               L2496:
00022Fr 2  C8                   iny
000230r 2               L2497:
000230r 2  E8                   inx
000231r 2               L2498:
000231r 2               .ifdef KBD
000231r 2                       jsr     GET_UPPER
000231r 2               .else
000231r 2  BD 00 02             lda     INPUTBUFFERX,x
000234r 2                 .ifndef CONFIG_2
000234r 2                       cmp     #$20
000234r 2                       beq     L2497
000234r 2                 .endif
000234r 2               .endif
000234r 2  38                   sec
000235r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000238r 2  F0 F5                beq     L2496
00023Ar 2  C9 80                cmp     #$80
00023Cr 2  D0 30                bne     L24D7
00023Er 2  05 0F                ora     EOLPNTR
000240r 2               ; ----------------------------------------------------------------------------
000240r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000240r 2               ; ----------------------------------------------------------------------------
000240r 2               L24AA:
000240r 2  A4 B0                ldy     STRNG2
000242r 2               L24AC:
000242r 2  E8                   inx
000243r 2  C8                   iny
000244r 2  99 FB 01             sta     INPUTBUFFER-5,y
000247r 2  B9 FB 01             lda     INPUTBUFFER-5,y
00024Ar 2  F0 36                beq     L24EA
00024Cr 2  38                   sec
00024Dr 2  E9 3A                sbc     #$3A
00024Fr 2  F0 04                beq     L24BF
000251r 2  C9 49                cmp     #$49
000253r 2  D0 02                bne     L24C1
000255r 2               L24BF:
000255r 2  85 13                sta     DATAFLG
000257r 2               L24C1:
000257r 2  38                   sec
000258r 2  E9 54                sbc     #TOKEN_REM-':'
00025Ar 2  D0 A8                bne     L246C
00025Cr 2  85 0E                sta     ENDCHR
00025Er 2               ; ----------------------------------------------------------------------------
00025Er 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00025Er 2               ; BY COPYING CHARS UP TO ENDCHR.
00025Er 2               ; ----------------------------------------------------------------------------
00025Er 2               L24C8:
00025Er 2  BD 00 02             lda     INPUTBUFFERX,x
000261r 2  F0 DF                beq     L24AC
000263r 2  C5 0E                cmp     ENDCHR
000265r 2  F0 DB                beq     L24AC
000267r 2               L24D0:
000267r 2  C8                   iny
000268r 2  99 FB 01             sta     INPUTBUFFER-5,y
00026Br 2  E8                   inx
00026Cr 2  D0 F0                bne     L24C8
00026Er 2               ; ----------------------------------------------------------------------------
00026Er 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00026Er 2               ; ----------------------------------------------------------------------------
00026Er 2               L24D7:
00026Er 2  A6 B9                ldx     TXTPTR
000270r 2  E6 0F                inc     EOLPNTR
000272r 2               L24DB:
000272r 2  C8                   iny
000273r 2  B9 rr rr             lda     MATHTBL+28+1,y
000276r 2  10 FA                bpl     L24DB
000278r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00027Br 2  D0 B4                bne     L2498
00027Dr 2  BD 00 02             lda     INPUTBUFFERX,x
000280r 2  10 BE                bpl     L24AA
000282r 2               ; ---END OF LINE------------------
000282r 2               L24EA:
000282r 2  99 FD 01             sta     INPUTBUFFER-3,y
000285r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000285r 2  C6 BA                dec     TXTPTR+1
000287r 2               .endif
000287r 2  A9 FF                lda     #<(INPUTBUFFER-1)
000289r 2  85 B9                sta     TXTPTR
00028Br 2  60                   rts
00028Cr 2               
00028Cr 2               ; ----------------------------------------------------------------------------
00028Cr 2               ; SEARCH FOR LINE
00028Cr 2               ;
00028Cr 2               ; (LINNUM) = LINE # TO FIND
00028Cr 2               ; IF NOT FOUND:  CARRY = 0
00028Cr 2               ;	LOWTR POINTS AT NEXT LINE
00028Cr 2               ; IF FOUND:      CARRY = 1
00028Cr 2               ;	LOWTR POINTS AT LINE
00028Cr 2               ; ----------------------------------------------------------------------------
00028Cr 2               FNDLIN:
00028Cr 2               .ifdef KBD
00028Cr 2                       jsr     CHRGET
00028Cr 2                       jmp     LE444
00028Cr 2               LE440:
00028Cr 2                       php
00028Cr 2                       jsr     LINGET
00028Cr 2               LE444:
00028Cr 2                       jsr     LF457
00028Cr 2                       ldx     #$FF
00028Cr 2                       plp
00028Cr 2                       beq     LE464
00028Cr 2                       jsr     CHRGOT
00028Cr 2                       beq     L2520
00028Cr 2                       cmp     #$A5
00028Cr 2                       bne     L2520
00028Cr 2                       jsr     CHRGET
00028Cr 2                       beq     LE464
00028Cr 2                       bcs     LE461
00028Cr 2                       jsr     LINGET
00028Cr 2                       beq     L2520
00028Cr 2               LE461:
00028Cr 2                       jmp     SYNERR
00028Cr 2               LE464:
00028Cr 2                       stx     LINNUM
00028Cr 2                       stx     LINNUM+1
00028Cr 2               .else
00028Cr 2  A5 6A                lda     TXTTAB
00028Er 2  A6 6B                ldx     TXTTAB+1
000290r 2               FL1:
000290r 2  A0 01                ldy     #$01
000292r 2  85 9E                sta     LOWTR
000294r 2  86 9F                stx     LOWTR+1
000296r 2  B1 9E                lda     (LOWTR),y
000298r 2  F0 1F                beq     L251F
00029Ar 2  C8                   iny
00029Br 2  C8                   iny
00029Cr 2  A5 54                lda     LINNUM+1
00029Er 2  D1 9E                cmp     (LOWTR),y
0002A0r 2  90 18                bcc     L2520
0002A2r 2  F0 03                beq     L250D
0002A4r 2  88                   dey
0002A5r 2  D0 09                bne     L2516
0002A7r 2               L250D:
0002A7r 2  A5 53                lda     LINNUM
0002A9r 2  88                   dey
0002AAr 2  D1 9E                cmp     (LOWTR),y
0002ACr 2  90 0C                bcc     L2520
0002AEr 2  F0 0A                beq     L2520
0002B0r 2               L2516:
0002B0r 2  88                   dey
0002B1r 2  B1 9E                lda     (LOWTR),y
0002B3r 2  AA                   tax
0002B4r 2  88                   dey
0002B5r 2  B1 9E                lda     (LOWTR),y
0002B7r 2  B0 D7                bcs     FL1
0002B9r 2               L251F:
0002B9r 2  18                   clc
0002BAr 2               .endif
0002BAr 2               L2520:
0002BAr 2  60                   rts
0002BBr 2               
0002BBr 2               ; ----------------------------------------------------------------------------
0002BBr 2               ; "NEW" STATEMENT
0002BBr 2               ; ----------------------------------------------------------------------------
0002BBr 2               NEW:
0002BBr 2  D0 FD                bne     L2520
0002BDr 2               SCRTCH:
0002BDr 2  A9 00                lda     #$00
0002BFr 2  A8                   tay
0002C0r 2  91 6A                sta     (TXTTAB),y
0002C2r 2  C8                   iny
0002C3r 2  91 6A                sta     (TXTTAB),y
0002C5r 2  A5 6A                lda     TXTTAB
0002C7r 2               .ifdef CONFIG_2
0002C7r 2  18           		clc
0002C8r 2               .endif
0002C8r 2  69 02                adc     #$02
0002CAr 2  85 6C                sta     VARTAB
0002CCr 2  A5 6B                lda     TXTTAB+1
0002CEr 2  69 00                adc     #$00
0002D0r 2  85 6D                sta     VARTAB+1
0002D2r 2               ; ----------------------------------------------------------------------------
0002D2r 2               SETPTRS:
0002D2r 2  20 rr rr             jsr     STXTPT
0002D5r 2               .ifdef CONFIG_11A
0002D5r 2  A9 00                lda     #$00
0002D7r 2               
0002D7r 2               ; ----------------------------------------------------------------------------
0002D7r 2               ; "CLEAR" STATEMENT
0002D7r 2               ; ----------------------------------------------------------------------------
0002D7r 2               CLEAR:
0002D7r 2  D0 2A                bne     L256A
0002D9r 2               .endif
0002D9r 2               CLEARC:
0002D9r 2               .ifdef KBD
0002D9r 2                       lda     #<CONST_MEMSIZ
0002D9r 2                       ldy     #>CONST_MEMSIZ
0002D9r 2               .else
0002D9r 2  A5 76                lda     MEMSIZ
0002DBr 2  A4 77                ldy     MEMSIZ+1
0002DDr 2               .endif
0002DDr 2  85 72                sta     FRETOP
0002DFr 2  84 73                sty     FRETOP+1
0002E1r 2               .ifdef CONFIG_CBM_ALL
0002E1r 2                       jsr     CLALL
0002E1r 2               .endif
0002E1r 2  A5 6C                lda     VARTAB
0002E3r 2  A4 6D                ldy     VARTAB+1
0002E5r 2  85 6E                sta     ARYTAB
0002E7r 2  84 6F                sty     ARYTAB+1
0002E9r 2  85 70                sta     STREND
0002EBr 2  84 71                sty     STREND+1
0002EDr 2  20 rr rr             jsr     RESTORE
0002F0r 2               ; ----------------------------------------------------------------------------
0002F0r 2               STKINI:
0002F0r 2  A2 58                ldx     #TEMPST
0002F2r 2  86 55                stx     TEMPPT
0002F4r 2  68                   pla
0002F5r 2               .ifdef CONFIG_2
0002F5r 2  A8           		tay
0002F6r 2               .else
0002F6r 2                       sta     STACK+STACK_TOP+1
0002F6r 2               .endif
0002F6r 2  68                   pla
0002F7r 2               .ifndef CONFIG_2
0002F7r 2                       sta     STACK+STACK_TOP+2
0002F7r 2               .endif
0002F7r 2  A2 F8                ldx     #STACK_TOP
0002F9r 2  9A                   txs
0002FAr 2               .ifdef CONFIG_2
0002FAr 2  48                   pha
0002FBr 2  98                   tya
0002FCr 2  48                   pha
0002FDr 2               .endif
0002FDr 2  A9 00                lda     #$00
0002FFr 2  85 7D                sta     OLDTEXT+1
000301r 2  85 14                sta     SUBFLG
000303r 2               L256A:
000303r 2  60                   rts
000304r 2               
000304r 2               ; ----------------------------------------------------------------------------
000304r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000304r 2               ; ----------------------------------------------------------------------------
000304r 2               STXTPT:
000304r 2  18                   clc
000305r 2  A5 6A                lda     TXTTAB
000307r 2  69 FF                adc     #$FF
000309r 2  85 B9                sta     TXTPTR
00030Br 2  A5 6B                lda     TXTTAB+1
00030Dr 2  69 FF                adc     #$FF
00030Fr 2  85 BA                sta     TXTPTR+1
000311r 2  60                   rts
000312r 2               
000312r 2               ; ----------------------------------------------------------------------------
000312r 2               .ifdef KBD
000312r 2               LE4C0:
000312r 2                       ldy     #<LE444
000312r 2                       ldx     #>LE444
000312r 2               LE4C4:
000312r 2                       jsr     LFFD6
000312r 2                       jsr     LFFED
000312r 2                       lda     $0504
000312r 2                       clc
000312r 2                       adc     #$08
000312r 2                       sta     $0504
000312r 2                       rts
000312r 2               
000312r 2               CMPJMPADRS:
000312r 2                       lda     1,x
000312r 2                       cmp     JMPADRS+2
000312r 2                       bne     LE4DE
000312r 2                       lda     0,x
000312r 2                       cmp     JMPADRS+1
000312r 2               LE4DE:
000312r 2                       rts
000312r 2               .endif
000312r 2               
000312r 2               ; ----------------------------------------------------------------------------
000312r 2               ; "LIST" STATEMENT
000312r 2               ; ----------------------------------------------------------------------------
000312r 2               LIST:
000312r 2               .ifdef KBD
000312r 2                       jsr     LE440
000312r 2                       bne     LE4DE
000312r 2                       pla
000312r 2                       pla
000312r 2               L25A6:
000312r 2                       jsr     CRDO
000312r 2               .else
000312r 2                 .ifdef MICROTAN
000312r 2                       php
000312r 2                       jmp     LE21C ; patch
000312r 2               LC57E:
000312r 2                 .else
000312r 2  90 06                bcc     L2581
000314r 2  F0 04                beq     L2581
000316r 2  C9 A2                cmp     #TOKEN_MINUS
000318r 2  D0 E9                bne     L256A
00031Ar 2               L2581:
00031Ar 2  20 rr rr             jsr     LINGET
00031Dr 2                 .endif
00031Dr 2  20 rr rr             jsr     FNDLIN
000320r 2                 .ifdef MICROTAN
000320r 2                       plp
000320r 2                       beq     L2598
000320r 2                 .endif
000320r 2  20 B8 00             jsr     CHRGOT
000323r 2                 .ifdef MICROTAN
000323r 2                       beq     L25A6
000323r 2                 .else
000323r 2  F0 0C                beq     L2598
000325r 2                 .endif
000325r 2  C9 A2                cmp     #TOKEN_MINUS
000327r 2  D0 91                bne     L2520
000329r 2  20 B2 00             jsr     CHRGET
00032Cr 2                 .ifdef MICROTAN
00032Cr 2                       beq     L2598
00032Cr 2                       jsr     LINGET
00032Cr 2                       beq     L25A6
00032Cr 2                       rts
00032Cr 2                 .else
00032Cr 2  20 rr rr             jsr     LINGET
00032Fr 2  D0 89                bne     L2520
000331r 2                 .endif
000331r 2               L2598:
000331r 2                 .ifndef MICROTAN
000331r 2  68                   pla
000332r 2  68                   pla
000333r 2  A5 53                lda     LINNUM
000335r 2  05 54                ora     LINNUM+1
000337r 2  D0 06                bne     L25A6
000339r 2                 .endif
000339r 2  A9 FF                lda     #$FF
00033Br 2  85 53                sta     LINNUM
00033Dr 2  85 54                sta     LINNUM+1
00033Fr 2               L25A6:
00033Fr 2                 .ifdef MICROTAN
00033Fr 2                       pla
00033Fr 2                       pla
00033Fr 2                 .endif
00033Fr 2               L25A6X:
00033Fr 2               .endif
00033Fr 2  A0 01                ldy     #$01
000341r 2               .ifdef CONFIG_DATAFLG
000341r 2                       sty     DATAFLG
000341r 2               .endif
000341r 2  B1 9E                lda     (LOWTRX),y
000343r 2  F0 39                beq     L25E5
000345r 2               .ifdef MICROTAN
000345r 2                       jmp     LE21F
000345r 2               LC5A9:
000345r 2               .else
000345r 2  20 rr rr             jsr     ISCNTC
000348r 2               .endif
000348r 2               .ifndef KBD
000348r 2  20 rr rr             jsr     CRDO
00034Br 2               .endif
00034Br 2  C8                   iny
00034Cr 2  B1 9E                lda     (LOWTRX),y
00034Er 2  AA                   tax
00034Fr 2  C8                   iny
000350r 2  B1 9E                lda     (LOWTRX),y
000352r 2  C5 54                cmp     LINNUM+1
000354r 2  D0 04                bne     L25C1
000356r 2  E4 53                cpx     LINNUM
000358r 2  F0 02                beq     L25C3
00035Ar 2               L25C1:
00035Ar 2  B0 22                bcs     L25E5
00035Cr 2               ; ---LIST ONE LINE----------------
00035Cr 2               L25C3:
00035Cr 2  84 88                sty     FORPNT
00035Er 2  20 rr rr             jsr     LINPRT
000361r 2  A9 20                lda     #$20
000363r 2               L25CA:
000363r 2  A4 88                ldy     FORPNT
000365r 2  29 7F                and     #$7F
000367r 2               L25CE:
000367r 2  20 rr rr             jsr     OUTDO
00036Ar 2               .ifdef CONFIG_DATAFLG
00036Ar 2                       cmp     #$22
00036Ar 2                       bne     LA519
00036Ar 2                       lda     DATAFLG
00036Ar 2                       eor     #$FF
00036Ar 2                       sta     DATAFLG
00036Ar 2               LA519:
00036Ar 2               .endif
00036Ar 2  C8                   iny
00036Br 2               .ifdef CONFIG_11
00036Br 2  F0 11                beq     L25E5
00036Dr 2               .endif
00036Dr 2  B1 9E                lda     (LOWTRX),y
00036Fr 2  D0 10                bne     L25E8
000371r 2  A8                   tay
000372r 2  B1 9E                lda     (LOWTRX),y
000374r 2  AA                   tax
000375r 2  C8                   iny
000376r 2  B1 9E                lda     (LOWTRX),y
000378r 2  86 9E                stx     LOWTRX
00037Ar 2  85 9F                sta     LOWTRX+1
00037Cr 2               .ifdef MICROTAN
00037Cr 2                       bne     L25A6X
00037Cr 2               .else
00037Cr 2  D0 C1                bne     L25A6
00037Er 2               .endif
00037Er 2               L25E5:
00037Er 2  4C rr rr             jmp     RESTART
000381r 2               L25E8:
000381r 2  10 E4                bpl     L25CE
000383r 2               .ifdef CONFIG_DATAFLG
000383r 2                       cmp     #$FF
000383r 2                       beq     L25CE
000383r 2                       bit     DATAFLG
000383r 2                       bmi     L25CE
000383r 2               .endif
000383r 2  38                   sec
000384r 2  E9 7F                sbc     #$7F
000386r 2  AA                   tax
000387r 2  84 88                sty     FORPNT
000389r 2  A0 FF                ldy     #$FF
00038Br 2               L25F2:
00038Br 2  CA                   dex
00038Cr 2  F0 08                beq     L25FD
00038Er 2               L25F5:
00038Er 2  C8                   iny
00038Fr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000392r 2  10 FA                bpl     L25F5
000394r 2  30 F5                bmi     L25F2
000396r 2               L25FD:
000396r 2  C8                   iny
000397r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00039Ar 2  30 C7                bmi     L25CA
00039Cr 2  20 rr rr             jsr     OUTDO
00039Fr 2  D0 F5                bne     L25FD	; always
0003A1r 2               
0003A1r 2               
0003A1r 1               .include "flow1.s"
0003A1r 2               .segment "CODE"
0003A1r 2               
0003A1r 2               ; ----------------------------------------------------------------------------
0003A1r 2               ; "FOR" STATEMENT
0003A1r 2               ;
0003A1r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003A1r 2               ; 2 -- TXTPTR
0003A1r 2               ; 2 -- LINE NUMBER
0003A1r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003A1r 2               ; 1 -- STEP SIGN
0003A1r 2               ; 5 -- STEP VALUE
0003A1r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003A1r 2               ; 1 -- FOR TOKEN ($81)
0003A1r 2               ; ----------------------------------------------------------------------------
0003A1r 2               FOR:
0003A1r 2  A9 80                lda     #$80
0003A3r 2  85 14                sta     SUBFLG
0003A5r 2  20 rr rr             jsr     LET
0003A8r 2  20 rr rr             jsr     GTFORPNT
0003ABr 2  D0 05                bne     L2619
0003ADr 2  8A                   txa
0003AEr 2  69 0F                adc     #FOR_STACK1
0003B0r 2  AA                   tax
0003B1r 2  9A                   txs
0003B2r 2               L2619:
0003B2r 2  68                   pla
0003B3r 2  68                   pla
0003B4r 2  A9 09                lda     #FOR_STACK2
0003B6r 2  20 rr rr             jsr     CHKMEM
0003B9r 2  20 rr rr             jsr     DATAN
0003BCr 2  18                   clc
0003BDr 2  98                   tya
0003BEr 2  65 B9                adc     TXTPTR
0003C0r 2  48                   pha
0003C1r 2  A5 BA                lda     TXTPTR+1
0003C3r 2  69 00                adc     #$00
0003C5r 2  48                   pha
0003C6r 2  A5 79                lda     CURLIN+1
0003C8r 2  48                   pha
0003C9r 2  A5 78                lda     CURLIN
0003CBr 2  48                   pha
0003CCr 2  A9 9B                lda     #TOKEN_TO
0003CEr 2  20 rr rr             jsr     SYNCHR
0003D1r 2  20 rr rr             jsr     CHKNUM
0003D4r 2  20 rr rr             jsr     FRMNUM
0003D7r 2  A5 A5                lda     FACSIGN
0003D9r 2  09 7F                ora     #$7F
0003DBr 2  25 A1                and     FAC+1
0003DDr 2  85 A1                sta     FAC+1
0003DFr 2  A9 rr                lda     #<STEP
0003E1r 2  A0 rr                ldy     #>STEP
0003E3r 2  85 61                sta     INDEX
0003E5r 2  84 62                sty     INDEX+1
0003E7r 2  4C rr rr             jmp     FRM_STACK3
0003EAr 2               
0003EAr 2               ; ----------------------------------------------------------------------------
0003EAr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003EAr 2               ; ----------------------------------------------------------------------------
0003EAr 2               STEP:
0003EAr 2  A9 rr                lda     #<CON_ONE
0003ECr 2  A0 rr                ldy     #>CON_ONE
0003EEr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003F1r 2  20 B8 00             jsr     CHRGOT
0003F4r 2  C9 A0                cmp     #TOKEN_STEP
0003F6r 2  D0 06                bne     L2665
0003F8r 2  20 B2 00             jsr     CHRGET
0003FBr 2  20 rr rr             jsr     FRMNUM
0003FEr 2               L2665:
0003FEr 2  20 rr rr             jsr     SIGN
000401r 2  20 rr rr             jsr     FRM_STACK2
000404r 2  A5 89                lda     FORPNT+1
000406r 2  48                   pha
000407r 2  A5 88                lda     FORPNT
000409r 2  48                   pha
00040Ar 2  A9 81                lda     #$81
00040Cr 2  48                   pha
00040Dr 2               
00040Dr 2               ; ----------------------------------------------------------------------------
00040Dr 2               ; PERFORM NEXT STATEMENT
00040Dr 2               ; ----------------------------------------------------------------------------
00040Dr 2               NEWSTT:
00040Dr 2  20 rr rr             jsr     ISCNTC
000410r 2  A5 B9                lda     TXTPTR
000412r 2  A4 BA                ldy     TXTPTR+1
000414r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000414r 2  C0 02                cpy     #>INPUTBUFFER
000416r 2                 .ifdef CBM2
000416r 2                       nop
000416r 2                 .endif
000416r 2  F0 04                beq     LC6D4
000418r 2               .else
000418r 2               ; BUG on AppleSoft I,
000418r 2               ; fixed differently on AppleSoft II (ldx/inx)
000418r 2                       beq     L2683
000418r 2               .endif
000418r 2  85 7C                sta     OLDTEXT
00041Ar 2  84 7D                sty     OLDTEXT+1
00041Cr 2               LC6D4:
00041Cr 2  A0 00                ldy     #$00
00041Er 2               L2683:
00041Er 2  B1 B9                lda     (TXTPTR),y
000420r 2               .ifndef CONFIG_11
000420r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000420r 2                       cmp     #$3A
000420r 2                       beq     NEWSTT2
000420r 2               SYNERR1:
000420r 2                       jmp     SYNERR
000420r 2               LA5DC:
000420r 2               .else
000420r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000422r 2               .endif
000422r 2  A0 02                ldy     #$02
000424r 2  B1 B9                lda     (TXTPTR),y
000426r 2  18                   clc
000427r 2               .ifdef CONFIG_2
000427r 2  D0 03 4C rr          jeq     L2701
00042Br 2  rr           
00042Cr 2               .else
00042Cr 2                       beq     L2701
00042Cr 2               .endif
00042Cr 2  C8                   iny
00042Dr 2  B1 B9                lda     (TXTPTR),y
00042Fr 2  85 78                sta     CURLIN
000431r 2  C8                   iny
000432r 2  B1 B9                lda     (TXTPTR),y
000434r 2  85 79                sta     CURLIN+1
000436r 2  98                   tya
000437r 2  65 B9                adc     TXTPTR
000439r 2  85 B9                sta     TXTPTR
00043Br 2  90 02                bcc     NEWSTT2
00043Dr 2  E6 BA                inc     TXTPTR+1
00043Fr 2               NEWSTT2:
00043Fr 2  20 B2 00             jsr     CHRGET
000442r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000445r 2  4C rr rr             jmp     NEWSTT
000448r 2               
000448r 2               ; ----------------------------------------------------------------------------
000448r 2               ; EXECUTE A STATEMENT
000448r 2               ;
000448r 2               ; (A) IS FIRST CHAR OF STATEMENT
000448r 2               ; CARRY IS SET
000448r 2               ; ----------------------------------------------------------------------------
000448r 2               EXECUTE_STATEMENT:
000448r 2               .ifndef CONFIG_11A
000448r 2                       beq     RET1
000448r 2               .else
000448r 2  F0 3C                beq     RET2
00044Ar 2               .endif
00044Ar 2               .ifndef CONFIG_11
00044Ar 2                       sec
00044Ar 2               .endif
00044Ar 2               EXECUTE_STATEMENT1:
00044Ar 2  E9 80                sbc     #$80
00044Cr 2               .ifndef CONFIG_11
00044Cr 2                       jcc     LET	; old: 1 cycle more on instr.
00044Cr 2               .else
00044Cr 2  90 11                bcc     LET1; new: 1 cycle more on assignment
00044Er 2               .endif
00044Er 2  C9 1A                cmp     #NUM_TOKENS
000450r 2               .ifdef CONFIG_2
000450r 2  B0 17                bcs     LC721
000452r 2               .else
000452r 2                       bcs     SYNERR1
000452r 2               .endif
000452r 2  0A                   asl     a
000453r 2  A8                   tay
000454r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000457r 2  48                   pha
000458r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
00045Br 2  48                   pha
00045Cr 2  4C B2 00             jmp     CHRGET
00045Fr 2               
00045Fr 2               .ifdef CONFIG_11
00045Fr 2               LET1:
00045Fr 2  4C rr rr             jmp     LET
000462r 2               
000462r 2               COLON:
000462r 2  C9 3A                cmp     #$3A
000464r 2  F0 D9                beq     NEWSTT2
000466r 2               SYNERR1:
000466r 2  4C rr rr             jmp     SYNERR
000469r 2               .endif
000469r 2               
000469r 2               .ifdef CONFIG_2; GO TO
000469r 2               LC721:
000469r 2  C9 42                cmp     #TOKEN_GO-$80
00046Br 2  D0 F9                bne     SYNERR1
00046Dr 2  20 B2 00             jsr     CHRGET
000470r 2  A9 9B                lda     #TOKEN_TO
000472r 2  20 rr rr             jsr     SYNCHR
000475r 2  4C rr rr             jmp     GOTO
000478r 2               .endif
000478r 2               
000478r 2               ; ----------------------------------------------------------------------------
000478r 2               ; "RESTORE" STATEMENT
000478r 2               ; ----------------------------------------------------------------------------
000478r 2               RESTORE:
000478r 2  38                   sec
000479r 2  A5 6A                lda     TXTTAB
00047Br 2  E9 01                sbc     #$01
00047Dr 2  A4 6B                ldy     TXTTAB+1
00047Fr 2  B0 01                bcs     SETDA
000481r 2  88                   dey
000482r 2               SETDA:
000482r 2  85 80                sta     DATPTR
000484r 2  84 81                sty     DATPTR+1
000486r 2               RET2:
000486r 2  60                   rts
000487r 2               
000487r 2               .include "iscntc.s"
000487r 3               .segment "CODE"
000487r 3               ; ----------------------------------------------------------------------------
000487r 3               ; SEE IF CONTROL-C TYPED
000487r 3               ; ----------------------------------------------------------------------------
000487r 3               .ifndef CONFIG_CBM_ALL
000487r 3               .include "cbm_iscntc.s"
000487r 4               ; nothing - ISCNTC is a KERNAL function
000487r 4               
000487r 3               .endif
000487r 3               .ifdef KBD
000487r 3               .include "kbd_iscntc.s"
000487r 3               .endif
000487r 3               .ifdef OSI
000487r 3               .include "osi_iscntc.s"
000487r 3               .endif
000487r 3               .ifdef APPLE
000487r 3               .include "apple_iscntc.s"
000487r 4               .segment "CODE"
000487r 4               ISCNTC:
000487r 4  AD 00 C0             lda     $C000
00048Ar 4  C9 83                cmp     #$83
00048Cr 4  F0 01                beq     L0ECC
00048Er 4  60                   rts
00048Fr 4               L0ECC:
00048Fr 4  20 rr rr             jsr     RDKEY
000492r 4  C9 03                cmp     #$03
000494r 4               ;!!! runs into "STOP"
000494r 4               
000494r 3               .endif
000494r 3               .ifdef KIM
000494r 3               .include "kim_iscntc.s"
000494r 3               .endif
000494r 3               .ifdef MICROTAN
000494r 3               .include "microtan_iscntc.s"
000494r 3               .endif
000494r 3               ;!!! runs into "STOP"
000494r 3               
000494r 2               ;!!! runs into "STOP"
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               ; "STOP" STATEMENT
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               STOP:
000494r 2  B0 01                bcs     END2
000496r 2               
000496r 2               ; ----------------------------------------------------------------------------
000496r 2               ; "END" STATEMENT
000496r 2               ; ----------------------------------------------------------------------------
000496r 2               END:
000496r 2  18                   clc
000497r 2               END2:
000497r 2  D0 40                bne     RET1
000499r 2  A5 B9                lda     TXTPTR
00049Br 2  A4 BA                ldy     TXTPTR+1
00049Dr 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
00049Dr 2               ; BUG on AppleSoft I
00049Dr 2               ; fix exists on AppleSoft II
00049Dr 2               ; TXTPTR+1 will always be > 0
00049Dr 2  A6 79                ldx     CURLIN+1
00049Fr 2  E8                   inx
0004A0r 2               .endif
0004A0r 2  F0 0C                beq     END4
0004A2r 2  85 7C                sta     OLDTEXT
0004A4r 2  84 7D                sty     OLDTEXT+1
0004A6r 2               CONTROL_C_TYPED:
0004A6r 2  A5 78                lda     CURLIN
0004A8r 2  A4 79                ldy     CURLIN+1
0004AAr 2  85 7A                sta     OLDLIN
0004ACr 2  84 7B                sty     OLDLIN+1
0004AEr 2               END4:
0004AEr 2  68                   pla
0004AFr 2  68                   pla
0004B0r 2               L2701:
0004B0r 2  A9 rr                lda     #<QT_BREAK
0004B2r 2  A0 rr                ldy     #>QT_BREAK
0004B4r 2               .ifndef KBD
0004B4r 2  A2 00                ldx     #$00
0004B6r 2  86 17                stx     Z14
0004B8r 2               .endif
0004B8r 2  90 03                bcc     L270E
0004BAr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004BDr 2               L270E:
0004BDr 2  4C rr rr             jmp     RESTART
0004C0r 2               .ifdef KBD
0004C0r 2               LE664:
0004C0r 2                       tay
0004C0r 2                       jmp     SNGFLT
0004C0r 2               .endif
0004C0r 2               
0004C0r 2               ; ----------------------------------------------------------------------------
0004C0r 2               ; "CONT" COMMAND
0004C0r 2               ; ----------------------------------------------------------------------------
0004C0r 2               CONT:
0004C0r 2  D0 17                bne     RET1
0004C2r 2  A2 D2                ldx     #ERR_CANTCONT
0004C4r 2  A4 7D                ldy     OLDTEXT+1
0004C6r 2  D0 03                bne     L271C
0004C8r 2  4C rr rr             jmp     ERROR
0004CBr 2               L271C:
0004CBr 2  A5 7C                lda     OLDTEXT
0004CDr 2  85 B9                sta     TXTPTR
0004CFr 2  84 BA                sty     TXTPTR+1
0004D1r 2  A5 7A                lda     OLDLIN
0004D3r 2  A4 7B                ldy     OLDLIN+1
0004D5r 2  85 78                sta     CURLIN
0004D7r 2  84 79                sty     CURLIN+1
0004D9r 2               RET1:
0004D9r 2  60                   rts
0004DAr 2               
0004DAr 2               .ifdef KBD
0004DAr 2               PRT:
0004DAr 2                       jsr     GETBYT
0004DAr 2                       txa
0004DAr 2               ; not ROR bug safe
0004DAr 2                       ror     a
0004DAr 2                       ror     a
0004DAr 2                       ror     a
0004DAr 2                       sta     $8F
0004DAr 2                       rts
0004DAr 2               
0004DAr 2               LE68C:
0004DAr 2                       ldy     #$12
0004DAr 2               LE68E:
0004DAr 2                       lda     LEA30,y
0004DAr 2                       sta     $03A2,y
0004DAr 2                       dey
0004DAr 2                       bpl     LE68E
0004DAr 2                       rts
0004DAr 2               .endif
0004DAr 2               
0004DAr 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004DAr 2               ; CBM1 has the keyword removed,
0004DAr 2               ; but the code is still here
0004DAr 2               NULL:
0004DAr 2                       jsr     GETBYT
0004DAr 2                       bne     RET1
0004DAr 2                       inx
0004DAr 2                       cpx     #NULL_MAX
0004DAr 2                       bcs     L2739
0004DAr 2                       dex
0004DAr 2                       stx     Z15
0004DAr 2                       rts
0004DAr 2               L2739:
0004DAr 2                       jmp     IQERR
0004DAr 2               .endif
0004DAr 2               .ifndef CONFIG_11A
0004DAr 2               CLEAR:
0004DAr 2                       bne     RET1
0004DAr 2                       jmp     CLEARC
0004DAr 2               .endif
0004DAr 2               
0004DAr 1               .include "loadsave.s"
0004DAr 2               .segment "CODE"
0004DAr 2               
0004DAr 2               .ifdef APPLE
0004DAr 2               ;.include "apple_loadsave.s"
0004DAr 2               .endif
0004DAr 2               .ifdef KIM
0004DAr 2               .include "kim_loadsave.s"
0004DAr 2               .endif
0004DAr 2               .ifdef MICROTAN
0004DAr 2               .include "microtan_loadsave.s"
0004DAr 2               .endif
0004DAr 2               
0004DAr 1               .include "flow2.s"
0004DAr 2               .segment "CODE"
0004DAr 2               ; ----------------------------------------------------------------------------
0004DAr 2               ; "RUN" COMMAND
0004DAr 2               ; ----------------------------------------------------------------------------
0004DAr 2               RUN:
0004DAr 2  D0 03                bne     L27CF
0004DCr 2  4C rr rr             jmp     SETPTRS
0004DFr 2               L27CF:
0004DFr 2  20 rr rr             jsr     CLEARC
0004E2r 2  4C rr rr             jmp     L27E9
0004E5r 2               
0004E5r 2               ; ----------------------------------------------------------------------------
0004E5r 2               ; "GOSUB" STATEMENT
0004E5r 2               ;
0004E5r 2               ; LEAVES 7 BYTES ON STACK:
0004E5r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
0004E5r 2               ; 2 -- TXTPTR
0004E5r 2               ; 2 -- LINE #
0004E5r 2               ; 1 -- GOSUB TOKEN
0004E5r 2               ; ----------------------------------------------------------------------------
0004E5r 2               GOSUB:
0004E5r 2  A9 03                lda     #$03
0004E7r 2  20 rr rr             jsr     CHKMEM
0004EAr 2  A5 BA                lda     TXTPTR+1
0004ECr 2  48                   pha
0004EDr 2  A5 B9                lda     TXTPTR
0004EFr 2  48                   pha
0004F0r 2  A5 79                lda     CURLIN+1
0004F2r 2  48                   pha
0004F3r 2  A5 78                lda     CURLIN
0004F5r 2  48                   pha
0004F6r 2  A9 8C                lda     #TOKEN_GOSUB
0004F8r 2  48                   pha
0004F9r 2               L27E9:
0004F9r 2  20 B8 00             jsr     CHRGOT
0004FCr 2  20 rr rr             jsr     GOTO
0004FFr 2  4C rr rr             jmp     NEWSTT
000502r 2               
000502r 2               ; ----------------------------------------------------------------------------
000502r 2               ; "GOTO" STATEMENT
000502r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000502r 2               ; ----------------------------------------------------------------------------
000502r 2               GOTO:
000502r 2  20 rr rr             jsr     LINGET
000505r 2  20 rr rr             jsr     REMN
000508r 2  A5 79                lda     CURLIN+1
00050Ar 2  C5 54                cmp     LINNUM+1
00050Cr 2  B0 0B                bcs     L2809
00050Er 2  98                   tya
00050Fr 2  38                   sec
000510r 2  65 B9                adc     TXTPTR
000512r 2  A6 BA                ldx     TXTPTR+1
000514r 2  90 07                bcc     L280D
000516r 2  E8                   inx
000517r 2  B0 04                bcs     L280D
000519r 2               L2809:
000519r 2  A5 6A                lda     TXTTAB
00051Br 2  A6 6B                ldx     TXTTAB+1
00051Dr 2               L280D:
00051Dr 2               .ifdef KBD
00051Dr 2                       jsr     LF457
00051Dr 2                       bne     UNDERR
00051Dr 2               .else
00051Dr 2  20 rr rr             jsr     FL1
000520r 2  90 1E                bcc     UNDERR
000522r 2               .endif
000522r 2  A5 9E                lda     LOWTRX
000524r 2  E9 01                sbc     #$01
000526r 2  85 B9                sta     TXTPTR
000528r 2  A5 9F                lda     LOWTRX+1
00052Ar 2  E9 00                sbc     #$00
00052Cr 2  85 BA                sta     TXTPTR+1
00052Er 2               L281E:
00052Er 2  60                   rts
00052Fr 2               
00052Fr 2               ; ----------------------------------------------------------------------------
00052Fr 2               ; "POP" AND "RETURN" STATEMENTS
00052Fr 2               ; ----------------------------------------------------------------------------
00052Fr 2               POP:
00052Fr 2  D0 FD                bne     L281E
000531r 2  A9 FF                lda     #$FF
000533r 2               .ifdef CONFIG_2A
000533r 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000533r 2               .else
000533r 2  85 88                sta     FORPNT
000535r 2               .endif
000535r 2  20 rr rr             jsr     GTFORPNT
000538r 2  9A                   txs
000539r 2  C9 8C                cmp     #TOKEN_GOSUB
00053Br 2  F0 0B                beq     RETURN
00053Dr 2  A2 16                ldx     #ERR_NOGOSUB
00053Fr 2  2C                   .byte   $2C
000540r 2               UNDERR:
000540r 2  A2 5A                ldx     #ERR_UNDEFSTAT
000542r 2  4C rr rr             jmp     ERROR
000545r 2               ; ----------------------------------------------------------------------------
000545r 2               SYNERR2:
000545r 2  4C rr rr             jmp     SYNERR
000548r 2               ; ----------------------------------------------------------------------------
000548r 2               RETURN:
000548r 2  68                   pla
000549r 2  68                   pla
00054Ar 2  85 78                sta     CURLIN
00054Cr 2  68                   pla
00054Dr 2  85 79                sta     CURLIN+1
00054Fr 2  68                   pla
000550r 2  85 B9                sta     TXTPTR
000552r 2  68                   pla
000553r 2  85 BA                sta     TXTPTR+1
000555r 2               
000555r 2               ; ----------------------------------------------------------------------------
000555r 2               ; "DATA" STATEMENT
000555r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000555r 2               ; ----------------------------------------------------------------------------
000555r 2               DATA:
000555r 2  20 rr rr             jsr     DATAN
000558r 2               
000558r 2               ; ----------------------------------------------------------------------------
000558r 2               ; ADD (Y) TO TXTPTR
000558r 2               ; ----------------------------------------------------------------------------
000558r 2               ADDON:
000558r 2  98                   tya
000559r 2  18                   clc
00055Ar 2  65 B9                adc     TXTPTR
00055Cr 2  85 B9                sta     TXTPTR
00055Er 2  90 02                bcc     L2852
000560r 2  E6 BA                inc     TXTPTR+1
000562r 2               L2852:
000562r 2  60                   rts
000563r 2               
000563r 2               ; ----------------------------------------------------------------------------
000563r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000563r 2               ; ----------------------------------------------------------------------------
000563r 2               DATAN:
000563r 2  A2 3A                ldx     #$3A
000565r 2  2C                   .byte   $2C
000566r 2               REMN:
000566r 2  A2 00                ldx     #$00
000568r 2  86 0D                stx     CHARAC
00056Ar 2  A0 00                ldy     #$00
00056Cr 2  84 0E                sty     ENDCHR
00056Er 2               L285E:
00056Er 2  A5 0E                lda     ENDCHR
000570r 2  A6 0D                ldx     CHARAC
000572r 2  85 0D                sta     CHARAC
000574r 2  86 0E                stx     ENDCHR
000576r 2               L2866:
000576r 2  B1 B9                lda     (TXTPTR),y
000578r 2  F0 E8                beq     L2852
00057Ar 2  C5 0E                cmp     ENDCHR
00057Cr 2  F0 E4                beq     L2852
00057Er 2  C8                   iny
00057Fr 2  C9 22                cmp     #$22
000581r 2               .ifndef CONFIG_11
000581r 2                       beq     L285E; old: swap & cont is faster
000581r 2                       bne     L2866
000581r 2               .else
000581r 2  D0 F3                bne     L2866; new: cont is faster
000583r 2  F0 E9                beq     L285E
000585r 2               .endif
000585r 2               
000585r 2               ; ----------------------------------------------------------------------------
000585r 2               ; "IF" STATEMENT
000585r 2               ; ----------------------------------------------------------------------------
000585r 2               IF:
000585r 2  20 rr rr             jsr     FRMEVL
000588r 2  20 B8 00             jsr     CHRGOT
00058Br 2  C9 88                cmp     #TOKEN_GOTO
00058Dr 2  F0 05                beq     L2884
00058Fr 2  A9 9E                lda     #TOKEN_THEN
000591r 2  20 rr rr             jsr     SYNCHR
000594r 2               L2884:
000594r 2  A5 A0                lda     FAC
000596r 2  D0 05                bne     L288D
000598r 2               
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               REM:
000598r 2  20 rr rr             jsr     REMN
00059Br 2  F0 BB                beq     ADDON
00059Dr 2               L288D:
00059Dr 2  20 B8 00             jsr     CHRGOT
0005A0r 2  B0 03                bcs     L2895
0005A2r 2  4C rr rr             jmp     GOTO
0005A5r 2               L2895:
0005A5r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005A8r 2               
0005A8r 2               ; ----------------------------------------------------------------------------
0005A8r 2               ; "ON" STATEMENT
0005A8r 2               ;
0005A8r 2               ; ON <EXP> GOTO <LIST>
0005A8r 2               ; ON <EXP> GOSUB <LIST>
0005A8r 2               ; ----------------------------------------------------------------------------
0005A8r 2               ON:
0005A8r 2  20 rr rr             jsr     GETBYT
0005ABr 2  48                   pha
0005ACr 2  C9 8C                cmp     #TOKEN_GOSUB
0005AEr 2  F0 04                beq     L28A4
0005B0r 2               L28A0:
0005B0r 2  C9 88                cmp     #TOKEN_GOTO
0005B2r 2  D0 91                bne     SYNERR2
0005B4r 2               L28A4:
0005B4r 2  C6 A4                dec     FAC_LAST
0005B6r 2  D0 04                bne     L28AC
0005B8r 2  68                   pla
0005B9r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005BCr 2               L28AC:
0005BCr 2  20 B2 00             jsr     CHRGET
0005BFr 2  20 rr rr             jsr     LINGET
0005C2r 2  C9 2C                cmp     #$2C
0005C4r 2  F0 EE                beq     L28A4
0005C6r 2  68                   pla
0005C7r 2               L28B7:
0005C7r 2  60                   rts
0005C8r 2               
0005C8r 1               .include "misc1.s"
0005C8r 2               .segment "CODE"
0005C8r 2               
0005C8r 2               ; ----------------------------------------------------------------------------
0005C8r 2               ; CONVERT LINE NUMBER
0005C8r 2               ; ----------------------------------------------------------------------------
0005C8r 2               LINGET:
0005C8r 2  A2 00                ldx     #$00
0005CAr 2  86 53                stx     LINNUM
0005CCr 2  86 54                stx     LINNUM+1
0005CEr 2               L28BE:
0005CEr 2  B0 F7                bcs     L28B7
0005D0r 2  E9 2F                sbc     #$2F
0005D2r 2  85 0D                sta     CHARAC
0005D4r 2  A5 54                lda     LINNUM+1
0005D6r 2  85 61                sta     INDEX
0005D8r 2  C9 19                cmp     #$19
0005DAr 2  B0 D4                bcs     L28A0
0005DCr 2               ; <<<<<DANGEROUS CODE>>>>>
0005DCr 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005DCr 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005DCr 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005DCr 2               ; FOR OTHER CALLS TO LINGET.
0005DCr 2               ;
0005DCr 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005DCr 2               ; THEN TYPE "GO TO 437761".
0005DCr 2               ;
0005DCr 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005DCr 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005DCr 2               ; <<<<<DANGEROUS CODE>>>>>
0005DCr 2  A5 53                lda     LINNUM
0005DEr 2  0A                   asl     a
0005DFr 2  26 61                rol     INDEX
0005E1r 2  0A                   asl     a
0005E2r 2  26 61                rol     INDEX
0005E4r 2  65 53                adc     LINNUM
0005E6r 2  85 53                sta     LINNUM
0005E8r 2  A5 61                lda     INDEX
0005EAr 2  65 54                adc     LINNUM+1
0005ECr 2  85 54                sta     LINNUM+1
0005EEr 2  06 53                asl     LINNUM
0005F0r 2  26 54                rol     LINNUM+1
0005F2r 2  A5 53                lda     LINNUM
0005F4r 2  65 0D                adc     CHARAC
0005F6r 2  85 53                sta     LINNUM
0005F8r 2  90 02                bcc     L28EC
0005FAr 2  E6 54                inc     LINNUM+1
0005FCr 2               L28EC:
0005FCr 2  20 B2 00             jsr     CHRGET
0005FFr 2  4C rr rr             jmp     L28BE
000602r 2               
000602r 2               ; ----------------------------------------------------------------------------
000602r 2               ; "LET" STATEMENT
000602r 2               ;
000602r 2               ; LET <VAR> = <EXP>
000602r 2               ; <VAR> = <EXP>
000602r 2               ; ----------------------------------------------------------------------------
000602r 2               LET:
000602r 2  20 rr rr             jsr     PTRGET
000605r 2  85 88                sta     FORPNT
000607r 2  84 89                sty     FORPNT+1
000609r 2  A9 A9                lda     #TOKEN_EQUAL
00060Br 2  20 rr rr             jsr     SYNCHR
00060Er 2               .ifndef CONFIG_SMALL
00060Er 2  A5 12                lda     VALTYP+1
000610r 2  48                   pha
000611r 2               .endif
000611r 2  A5 11                lda     VALTYP
000613r 2  48                   pha
000614r 2  20 rr rr             jsr     FRMEVL
000617r 2  68                   pla
000618r 2  2A                   rol     a
000619r 2  20 rr rr             jsr     CHKVAL
00061Cr 2  D0 18                bne     LETSTRING
00061Er 2               .ifndef CONFIG_SMALL
00061Er 2  68                   pla
00061Fr 2               LET2:
00061Fr 2  10 12                bpl     L2923
000621r 2  20 rr rr             jsr     ROUND_FAC
000624r 2  20 rr rr             jsr     AYINT
000627r 2  A0 00                ldy     #$00
000629r 2  A5 A3                lda     FAC+3
00062Br 2  91 88                sta     (FORPNT),y
00062Dr 2  C8                   iny
00062Er 2  A5 A4                lda     FAC+4
000630r 2  91 88                sta     (FORPNT),y
000632r 2  60                   rts
000633r 2               L2923:
000633r 2               .endif
000633r 2               
000633r 2               ; ----------------------------------------------------------------------------
000633r 2               ; REAL VARIABLE = EXPRESSION
000633r 2               ; ----------------------------------------------------------------------------
000633r 2  4C rr rr             jmp     SETFOR
000636r 2               LETSTRING:
000636r 2               .ifndef CONFIG_SMALL
000636r 2  68                   pla
000637r 2               .endif
000637r 2               
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               PUTSTR:
000637r 2               .ifdef CONFIG_CBM_ALL
000637r 2                       ldy     FORPNT+1
000637r 2                 .ifdef CBM1
000637r 2                       cpy     #$D0	; TI$
000637r 2                 .else
000637r 2                       cpy     #$DE
000637r 2                 .endif
000637r 2                       bne     LC92B
000637r 2                       jsr     FREFAC
000637r 2                       cmp     #$06
000637r 2                 .ifdef CBM2
000637r 2                       bne     IQERR1
000637r 2                 .else
000637r 2                       jne     IQERR
000637r 2                 .endif
000637r 2                       ldy     #$00
000637r 2                       sty     FAC
000637r 2                       sty     FACSIGN
000637r 2               LC8E8:
000637r 2                       sty     STRNG2
000637r 2                       jsr     LC91C
000637r 2                       jsr     MUL10
000637r 2                       inc     STRNG2
000637r 2                       ldy     STRNG2
000637r 2                       jsr     LC91C
000637r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
000637r 2                       tax
000637r 2                       beq     LC902
000637r 2                       inx
000637r 2                       txa
000637r 2                       jsr     LD9BF
000637r 2               LC902:
000637r 2                       ldy     STRNG2
000637r 2                       iny
000637r 2                       cpy     #$06
000637r 2                       bne     LC8E8
000637r 2                       jsr     MUL10
000637r 2                       jsr     QINT
000637r 2                       ldx     #$02
000637r 2                       sei
000637r 2               LC912:
000637r 2                       lda     FAC+2,x
000637r 2                       sta     TISTR,x
000637r 2                       dex
000637r 2                       bpl     LC912
000637r 2                       cli
000637r 2                       rts
000637r 2               LC91C:
000637r 2                       lda     (INDEX),y
000637r 2                       jsr     CHRGOT2
000637r 2                       bcc     LC926
000637r 2               IQERR1:
000637r 2                       jmp     IQERR
000637r 2               LC926:
000637r 2                       sbc     #$2F
000637r 2                       jmp     ADDACC
000637r 2               LC92B:
000637r 2               .endif
000637r 2  A0 02                ldy     #$02
000639r 2  B1 A3                lda     (FAC_LAST-1),y
00063Br 2  C5 73                cmp     FRETOP+1
00063Dr 2  90 17                bcc     L2946
00063Fr 2  D0 07                bne     L2938
000641r 2  88                   dey
000642r 2  B1 A3                lda     (FAC_LAST-1),y
000644r 2  C5 72                cmp     FRETOP
000646r 2  90 0E                bcc     L2946
000648r 2               L2938:
000648r 2  A4 A4                ldy     FAC_LAST
00064Ar 2  C4 6D                cpy     VARTAB+1
00064Cr 2  90 08                bcc     L2946
00064Er 2  D0 0D                bne     L294D
000650r 2  A5 A3                lda     FAC_LAST-1
000652r 2  C5 6C                cmp     VARTAB
000654r 2  B0 07                bcs     L294D
000656r 2               L2946:
000656r 2  A5 A3                lda     FAC_LAST-1
000658r 2  A4 A4                ldy     FAC_LAST
00065Ar 2  4C rr rr             jmp     L2963
00065Dr 2               L294D:
00065Dr 2  A0 00                ldy     #$00
00065Fr 2  B1 A3                lda     (FAC_LAST-1),y
000661r 2  20 rr rr             jsr     STRINI
000664r 2  A5 8F                lda     DSCPTR
000666r 2  A4 90                ldy     DSCPTR+1
000668r 2  85 AE                sta     STRNG1
00066Ar 2  84 AF                sty     STRNG1+1
00066Cr 2  20 rr rr             jsr     MOVINS
00066Fr 2  A9 A0                lda     #FAC
000671r 2  A0 00                ldy     #$00
000673r 2               L2963:
000673r 2  85 8F                sta     DSCPTR
000675r 2  84 90                sty     DSCPTR+1
000677r 2  20 rr rr             jsr     FRETMS
00067Ar 2  A0 00                ldy     #$00
00067Cr 2  B1 8F                lda     (DSCPTR),y
00067Er 2  91 88                sta     (FORPNT),y
000680r 2  C8                   iny
000681r 2  B1 8F                lda     (DSCPTR),y
000683r 2  91 88                sta     (FORPNT),y
000685r 2  C8                   iny
000686r 2  B1 8F                lda     (DSCPTR),y
000688r 2  91 88                sta     (FORPNT),y
00068Ar 2  60                   rts
00068Br 2               .ifdef CONFIG_FILE
00068Br 2               PRINTH:
00068Br 2                       jsr     CMD
00068Br 2                       jmp     LCAD6
00068Br 2               CMD:
00068Br 2                       jsr     GETBYT
00068Br 2                       beq     LC98F
00068Br 2                       lda     #$2C
00068Br 2                       jsr     SYNCHR
00068Br 2               LC98F:
00068Br 2                       php
00068Br 2                       jsr     CHKOUT
00068Br 2                       stx     CURDVC
00068Br 2                       plp
00068Br 2                       jmp     PRINT
00068Br 2               .endif
00068Br 2               
00068Br 2               
00068Br 1               .include "print.s"
00068Br 2               .segment "CODE"
00068Br 2               
00068Br 2               PRSTRING:
00068Br 2  20 rr rr             jsr     STRPRT
00068Er 2               L297E:
00068Er 2  20 B8 00             jsr     CHRGOT
000691r 2               
000691r 2               ; ----------------------------------------------------------------------------
000691r 2               ; "PRINT" STATEMENT
000691r 2               ; ----------------------------------------------------------------------------
000691r 2               PRINT:
000691r 2  F0 2B                beq     CRDO
000693r 2               PRINT2:
000693r 2  F0 37                beq     L29DD
000695r 2  C9 9A                cmp     #TOKEN_TAB
000697r 2  F0 41                beq     L29F5
000699r 2  C9 9D                cmp     #TOKEN_SPC
00069Br 2               .ifdef CONFIG_2
00069Br 2  18                   clc	; also AppleSoft II
00069Cr 2               .endif
00069Cr 2  F0 3C                beq     L29F5
00069Er 2  C9 2C                cmp     #','
0006A0r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006A0r 2               ; here. Post-KIM moved the CLC up...
0006A0r 2               ; (makes no sense on KIM, liveness = 0)
0006A0r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006A0r 2                       clc
0006A0r 2               .endif
0006A0r 2  F0 2B                beq     L29DE
0006A2r 2  C9 3B                cmp     #$3B
0006A4r 2  F0 49                beq     L2A0D
0006A6r 2  20 rr rr             jsr     FRMEVL
0006A9r 2  24 11                bit     VALTYP
0006ABr 2  30 DE                bmi     PRSTRING
0006ADr 2  20 rr rr             jsr     FOUT
0006B0r 2  20 rr rr             jsr     STRLIT
0006B3r 2               .ifndef CONFIG_NO_CR
0006B3r 2                       ldy     #$00
0006B3r 2                       lda     (FAC_LAST-1),y
0006B3r 2                       clc
0006B3r 2                       adc     POSX
0006B3r 2                 .ifdef KBD
0006B3r 2                       cmp     #$28
0006B3r 2                 .else
0006B3r 2                       cmp     Z17
0006B3r 2                 .endif
0006B3r 2                       bcc     L29B1
0006B3r 2                       jsr     CRDO
0006B3r 2               L29B1:
0006B3r 2               .endif
0006B3r 2  20 rr rr             jsr     STRPRT
0006B6r 2  4C rr rr             jmp     L297E
0006B9r 2               .ifdef KBD
0006B9r 2                       jmp     L297E
0006B9r 2               .else
0006B9r 2  20 rr rr             jsr     OUTSP
0006BCr 2  D0 D0                bne     L297E ; branch always
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               .ifdef KBD
0006BEr 2               ; PATCHES
0006BEr 2               LE86C:
0006BEr 2                       pla
0006BEr 2                       jmp     CONTROL_C_TYPED
0006BEr 2               LE870:
0006BEr 2                       jsr     GETBYT
0006BEr 2                       txa
0006BEr 2               LE874:
0006BEr 2                       beq     LE878
0006BEr 2                       bpl     LE8F2
0006BEr 2               LE878:
0006BEr 2                       jmp     IQERR
0006BEr 2               ; PATCHES
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               
0006BEr 2               
0006BEr 2               .ifndef KBD
0006BEr 2               L29B9:
0006BEr 2                 .ifdef CBM2
0006BEr 2                       lda     #$00
0006BEr 2                       sta     INPUTBUFFER,x
0006BEr 2                       ldx     #<(INPUTBUFFER-1)
0006BEr 2                       ldy     #>(INPUTBUFFER-1)
0006BEr 2                 .else
0006BEr 2                   .ifndef APPLE
0006BEr 2                       ldy     #$00
0006BEr 2                       sty     INPUTBUFFER,x
0006BEr 2                       ldx     #LINNUM+1
0006BEr 2                   .endif
0006BEr 2                   .ifdef MICROTAN
0006BEr 2                       bne     CRDO2
0006BEr 2               	.endif
0006BEr 2                 .endif
0006BEr 2                 .ifdef CONFIG_FILE
0006BEr 2                       lda     CURDVC
0006BEr 2                       bne     L29DD
0006BEr 2                 .endif
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               
0006BEr 2               CRDO:
0006BEr 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006BEr 2                       lda     CURDVC
0006BEr 2                       bne     LC9D8
0006BEr 2                       sta     POSX
0006BEr 2               LC9D8:
0006BEr 2               .endif
0006BEr 2  A9 0D                lda     #CRLF_1
0006C0r 2               .ifndef CONFIG_CBM_ALL
0006C0r 2  85 50                sta     POSX
0006C2r 2               .endif
0006C2r 2  20 rr rr             jsr     OUTDO
0006C5r 2               CRDO2:
0006C5r 2  A9 80                lda     #CRLF_2
0006C7r 2  20 rr rr             jsr     OUTDO
0006CAr 2               
0006CAr 2               PRINTNULLS:
0006CAr 2               .ifdef KBD
0006CAr 2                       lda     #$00
0006CAr 2                       sta     POSX
0006CAr 2                       eor     #$FF
0006CAr 2               .else
0006CAr 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006CAr 2                   .ifdef CONFIG_FILE
0006CAr 2                   ; Although there is no statement for it,
0006CAr 2                   ; CBM1 had NULL support and ignores
0006CAr 2                   ; it when not targeting the screen,
0006CAr 2                   ; CBM2 dropped it completely.
0006CAr 2                       lda     CURDVC
0006CAr 2                       bne     L29DD
0006CAr 2                   .endif
0006CAr 2                       txa
0006CAr 2                       pha
0006CAr 2                       ldx     Z15
0006CAr 2                       beq     L29D9
0006CAr 2                       lda     #$00
0006CAr 2               L29D3:
0006CAr 2                       jsr     OUTDO
0006CAr 2                       dex
0006CAr 2                       bne     L29D3
0006CAr 2               L29D9:
0006CAr 2                       stx     POSX
0006CAr 2                       pla
0006CAr 2                       tax
0006CAr 2                 .else
0006CAr 2                   .ifndef CONFIG_2
0006CAr 2                       lda     #$00
0006CAr 2                       sta     POSX
0006CAr 2                   .endif
0006CAr 2  49 FF                eor     #$FF
0006CCr 2                 .endif
0006CCr 2               .endif
0006CCr 2               L29DD:
0006CCr 2  60                   rts
0006CDr 2               L29DE:
0006CDr 2  A5 50                lda     POSX
0006CFr 2               .ifndef CONFIG_NO_CR
0006CFr 2                 .ifdef KBD
0006CFr 2                       cmp     #$1A
0006CFr 2                 .else
0006CFr 2                       cmp     Z18
0006CFr 2                 .endif
0006CFr 2                       bcc     L29EA
0006CFr 2                       jsr     CRDO
0006CFr 2                       jmp     L2A0D
0006CFr 2               L29EA:
0006CFr 2               .endif
0006CFr 2  38                   sec
0006D0r 2               L29EB:
0006D0r 2               .ifdef CONFIG_CBM_ALL
0006D0r 2                       sbc     #$0A
0006D0r 2               .else
0006D0r 2                 .ifdef KBD
0006D0r 2                       sbc     #$0D
0006D0r 2                 .else
0006D0r 2  E9 0E                sbc     #$0E
0006D2r 2                 .endif
0006D2r 2               .endif
0006D2r 2  B0 FC                bcs     L29EB
0006D4r 2  49 FF                eor     #$FF
0006D6r 2  69 01                adc     #$01
0006D8r 2  D0 10                bne     L2A08
0006DAr 2               
0006DAr 2               ; tab?
0006DAr 2               L29F5:
0006DAr 2               .ifdef CONFIG_11A
0006DAr 2  08                   php
0006DBr 2               .else
0006DBr 2                       pha
0006DBr 2               .endif
0006DBr 2               
0006DBr 2  20 rr rr             jsr     GTBYTC
0006DEr 2  C9 29                cmp     #')'
0006E0r 2               
0006E0r 2               .ifdef CONFIG_11A
0006E0r 2                 .ifdef CONFIG_2
0006E0r 2  D0 62                bne     SYNERR4
0006E2r 2                 .else
0006E2r 2                       jne     SYNERR
0006E2r 2                 .endif
0006E2r 2  28                   plp
0006E3r 2  90 06                bcc     L2A09
0006E5r 2               .else
0006E5r 2                 .ifdef CONFIG_11
0006E5r 2                       jne     SYNERR
0006E5r 2                 .else
0006E5r 2               
0006E5r 2                       bne     SYNERR4
0006E5r 2               
0006E5r 2                 .endif
0006E5r 2               
0006E5r 2                       pla
0006E5r 2                       cmp     #TOKEN_TAB
0006E5r 2               
0006E5r 2                 .ifdef CONFIG_11
0006E5r 2                       bne     L2A09
0006E5r 2                 .else
0006E5r 2               
0006E5r 2                       bne     L2A0A
0006E5r 2               
0006E5r 2                 .endif
0006E5r 2               .endif
0006E5r 2               ; yep, it's a tab and we've got a good number
0006E5r 2               
0006E5r 2               ; n = x - POSX
0006E5r 2  8A                   txa
0006E6r 2  E5 50                sbc     POSX
0006E8r 2  90 05                bcc     L2A0D
0006EAr 2               
0006EAr 2               .ifndef CONFIG_11
0006EAr 2                       beq     L2A0D
0006EAr 2               .endif
0006EAr 2               
0006EAr 2               L2A08:
0006EAr 2               
0006EAr 2  AA                   tax
0006EBr 2               .ifdef CONFIG_11
0006EBr 2               L2A09:
0006EBr 2  E8                   inx
0006ECr 2               .endif
0006ECr 2               
0006ECr 2               L2A0A:
0006ECr 2               .ifndef CONFIG_11
0006ECr 2                       jsr     OUTSP
0006ECr 2               .endif
0006ECr 2  CA                   dex
0006EDr 2               .ifndef CONFIG_11
0006EDr 2                       bne     L2A0A
0006EDr 2               .else
0006EDr 2  D0 06                bne     L2A13
0006EFr 2               .endif
0006EFr 2               
0006EFr 2               ; done tabbing, lets move on
0006EFr 2               L2A0D:
0006EFr 2  20 B2 00             jsr     CHRGET
0006F2r 2  4C rr rr             jmp     PRINT2
0006F5r 2               
0006F5r 2               .ifdef CONFIG_11
0006F5r 2               L2A13:
0006F5r 2  20 rr rr             jsr     OUTSP
0006F8r 2  D0 F2                bne     L2A0A
0006FAr 2               .endif
0006FAr 2               
0006FAr 2               ; ----------------------------------------------------------------------------
0006FAr 2               ; PRINT STRING AT (Y,A)
0006FAr 2               ; ----------------------------------------------------------------------------
0006FAr 2               STROUT:
0006FAr 2  20 rr rr             jsr     STRLIT
0006FDr 2               
0006FDr 2               ; ----------------------------------------------------------------------------
0006FDr 2               ; PRINT STRING AT (FACMO,FACLO)
0006FDr 2               ; ----------------------------------------------------------------------------
0006FDr 2               STRPRT:
0006FDr 2  20 rr rr             jsr     FREFAC
000700r 2  AA                   tax
000701r 2  A0 00                ldy     #$00
000703r 2  E8                   inx
000704r 2               L2A22:
000704r 2  CA                   dex
000705r 2  F0 C5                beq     L29DD
000707r 2  B1 61                lda     (INDEX),y
000709r 2  20 rr rr             jsr     OUTDO
00070Cr 2  C8                   iny
00070Dr 2  C9 0D                cmp     #$0D
00070Fr 2  D0 F3                bne     L2A22
000711r 2  20 rr rr             jsr     PRINTNULLS
000714r 2  4C rr rr             jmp     L2A22
000717r 2               ; ----------------------------------------------------------------------------
000717r 2               OUTSP:
000717r 2               .ifdef CONFIG_FILE
000717r 2                 .ifndef CBM1
000717r 2               ; on non-screen devices, print SPACE
000717r 2               ; instead of CRSR RIGHT
000717r 2                       lda     CURDVC
000717r 2                       beq     LCA40
000717r 2                       lda     #$20
000717r 2                       .byte   $2C
000717r 2               LCA40:
000717r 2                 .endif
000717r 2                       lda     #$1D ; CRSR RIGHT
000717r 2               .else
000717r 2  A9 20                lda     #$20
000719r 2  4C rr rr     		jmp     OUTDO
00071Cr 2               .endif
00071Cr 2                       ;.byte   $2C ;; doing a BIT mucks with flags
00071Cr 2               OUTQUES:
00071Cr 2  A9 3F                lda     #$3F
00071Er 2               
00071Er 2               ; ----------------------------------------------------------------------------
00071Er 2               ; PRINT CHAR FROM (A)
00071Er 2               ; ----------------------------------------------------------------------------
00071Er 2               OUTDO:
00071Er 2               .ifndef KBD
00071Er 2  24 17                bit     Z14
000720r 2  30 0D                bmi     L2A56
000722r 2               .endif
000722r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000722r 2               ; Commodore forgot to remove this in CBM1
000722r 2                       pha
000722r 2               .endif
000722r 2               .ifdef CBM1
000722r 2                       cmp     #$1D ; CRSR RIGHT
000722r 2                       beq     LCA6A
000722r 2                       cmp     #$9D ; CRSR LEFT
000722r 2                       beq     LCA5A
000722r 2                       cmp     #$14 ; DEL
000722r 2                       bne     LCA64
000722r 2               LCA5A:
000722r 2                       lda     POSX
000722r 2                       beq     L2A4E
000722r 2                       lda     CURDVC
000722r 2                       bne     L2A4E
000722r 2                       dec     POSX
000722r 2               LCA64:
000722r 2                       and     #$7F
000722r 2               .endif
000722r 2               .ifndef CBM2
000722r 2  C9 20                cmp     #$20
000724r 2  90 02                bcc     L2A4E
000726r 2               .endif
000726r 2               LCA6A:
000726r 2               .ifdef CONFIG_CBM1_PATCHES
000726r 2                       lda     CURDVC
000726r 2                       jsr     PATCH6
000726r 2                       nop
000726r 2               .endif
000726r 2               .ifdef CONFIG_PRINT_CR
000726r 2                       lda     POSX
000726r 2                       cmp     Z17
000726r 2                       bne     L2A4C
000726r 2                 .ifdef APPLE_2
000726r 2                       nop ; PATCH!
000726r 2                       nop ; don't print CR
000726r 2                       nop
000726r 2                 .else
000726r 2                       jsr     CRDO
000726r 2                 .endif
000726r 2               L2A4C:
000726r 2               .endif
000726r 2               .ifndef CONFIG_CBM_ALL
000726r 2  E6 50                inc     POSX
000728r 2               .endif
000728r 2               L2A4E:
000728r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000728r 2               ; Commodore forgot to remove this in CBM1
000728r 2                       pla
000728r 2               .endif
000728r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000728r 2                       sty     DIMFLG
000728r 2               .endif
000728r 2               .ifdef CONFIG_IO_MSB
000728r 2  09 80                ora     #$80
00072Ar 2               .endif
00072Ar 2  20 EF FF             jsr     MONCOUT
00072Dr 2               .ifdef CONFIG_IO_MSB
00072Dr 2  29 7F                and     #$7F
00072Fr 2               .endif
00072Fr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00072Fr 2                       ldy     DIMFLG
00072Fr 2               .endif
00072Fr 2               .ifdef OSI
00072Fr 2                       nop
00072Fr 2                       nop
00072Fr 2                       nop
00072Fr 2                       nop
00072Fr 2               .endif
00072Fr 2               L2A56:
00072Fr 2  29 FF                and     #$FF
000731r 2               LE8F2:
000731r 2  60                   rts
000732r 2               
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               ; ???
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               .ifdef KBD
000732r 2               LE8F3:
000732r 2                       pha
000732r 2                       lda     $047F
000732r 2                       clc
000732r 2                       beq     LE900
000732r 2                       lda     #$00
000732r 2                       sta     $047F
000732r 2                       sec
000732r 2               LE900:
000732r 2                       pla
000732r 2                       rts
000732r 2               .endif
000732r 2               
000732r 1               .include "input.s"
000732r 2               .segment "CODE"
000732r 2               
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
000732r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
000732r 2               ; BETWEEN INPUT, READ, AND GET
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               INPUTERR:
000732r 2  A5 15                lda     INPUTFLG
000734r 2  F0 11                beq     RESPERR	; INPUT
000736r 2               .ifndef CONFIG_SMALL
000736r 2               .ifdef CONFIG_10A
000736r 2               ; without this, it treats GET errors
000736r 2               ; like READ errors
000736r 2  30 04                bmi     L2A63	; READ
000738r 2  A0 FF                ldy     #$FF	; GET
00073Ar 2  D0 04                bne     L2A67
00073Cr 2               L2A63:
00073Cr 2               .endif
00073Cr 2               .endif
00073Cr 2               .ifdef CONFIG_CBM1_PATCHES
00073Cr 2                       jsr     PATCH5
00073Cr 2               		nop
00073Cr 2               .else
00073Cr 2  A5 7E                lda     Z8C
00073Er 2  A4 7F                ldy     Z8C+1
000740r 2               .endif
000740r 2               L2A67:
000740r 2  85 78                sta     CURLIN
000742r 2  84 79                sty     CURLIN+1
000744r 2               SYNERR4:
000744r 2  4C rr rr             jmp     SYNERR
000747r 2               RESPERR:
000747r 2               .ifdef CONFIG_FILE
000747r 2                       lda     CURDVC
000747r 2                       beq     LCA8F
000747r 2                       ldx     #ERR_BADDATA
000747r 2                       jmp     ERROR
000747r 2               LCA8F:
000747r 2               .endif
000747r 2  A9 rr                lda     #<ERRREENTRY
000749r 2  A0 rr                ldy     #>ERRREENTRY
00074Br 2  20 rr rr             jsr     STROUT
00074Er 2  A5 7C                lda     OLDTEXT
000750r 2  A4 7D                ldy     OLDTEXT+1
000752r 2  85 B9                sta     TXTPTR
000754r 2  84 BA                sty     TXTPTR+1
000756r 2               RTS20:
000756r 2  60                   rts
000757r 2               
000757r 2               ; ----------------------------------------------------------------------------
000757r 2               ; "GET" STATEMENT
000757r 2               ; ----------------------------------------------------------------------------
000757r 2               .ifndef CONFIG_SMALL
000757r 2               GET:
000757r 2  20 rr rr             jsr     ERRDIR
00075Ar 2               ; CBM: if GET#, then switch input
00075Ar 2               .ifdef CONFIG_FILE
00075Ar 2                       cmp     #'#'
00075Ar 2                       bne     LCAB6
00075Ar 2                       jsr     CHRGET
00075Ar 2                       jsr     GETBYT
00075Ar 2                       lda     #','
00075Ar 2                       jsr     SYNCHR
00075Ar 2                       jsr     CHKIN
00075Ar 2                       stx     CURDVC
00075Ar 2               LCAB6:
00075Ar 2               .endif
00075Ar 2  A2 01                ldx     #<(INPUTBUFFER+1)
00075Cr 2  A0 02                ldy     #>(INPUTBUFFER+1)
00075Er 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00075Er 2  A9 00                lda     #$00
000760r 2  8D 01 02             sta     INPUTBUFFER+1
000763r 2               .else
000763r 2                       sty     INPUTBUFFER+1
000763r 2               .endif
000763r 2  A9 40                lda     #$40
000765r 2  20 rr rr             jsr     PROCESS_INPUT_LIST
000768r 2               ; CBM: if GET#, then switch input back
000768r 2               .ifdef CONFIG_FILE
000768r 2                       ldx     CURDVC
000768r 2                       bne     LCAD8
000768r 2               .endif
000768r 2  60                   rts
000769r 2               .endif
000769r 2               
000769r 2               ; ----------------------------------------------------------------------------
000769r 2               ; "INPUT#" STATEMENT
000769r 2               ; ----------------------------------------------------------------------------
000769r 2               .ifdef CONFIG_FILE
000769r 2               INPUTH:
000769r 2                       jsr     GETBYT
000769r 2                       lda     #$2C
000769r 2                       jsr     SYNCHR
000769r 2                       jsr     CHKIN
000769r 2                       stx     CURDVC
000769r 2                       jsr     L2A9E
000769r 2               LCAD6:
000769r 2                       lda     CURDVC
000769r 2               LCAD8:
000769r 2                       jsr     CLRCH
000769r 2                       ldx     #$00
000769r 2                       stx     CURDVC
000769r 2                       rts
000769r 2               LCAE0:
000769r 2               .endif
000769r 2               
000769r 2               ; ----------------------------------------------------------------------------
000769r 2               ; "INPUT" STATEMENT
000769r 2               ; ----------------------------------------------------------------------------
000769r 2               INPUT:
000769r 2               .ifndef KBD
000769r 2  46 17                lsr     Z14
00076Br 2               .endif
00076Br 2  C9 22                cmp     #$22
00076Dr 2  D0 0B                bne     L2A9E
00076Fr 2  20 rr rr             jsr     STRTXT
000772r 2  A9 3B                lda     #$3B
000774r 2  20 rr rr             jsr     SYNCHR
000777r 2  20 rr rr             jsr     STRPRT
00077Ar 2               L2A9E:
00077Ar 2  20 rr rr             jsr     ERRDIR
00077Dr 2  A9 2C                lda     #$2C
00077Fr 2  8D FF 01             sta     INPUTBUFFER-1
000782r 2               LCAF8:
000782r 2               .ifdef APPLE
000782r 2  20 rr rr             jsr     INLINX
000785r 2               .else
000785r 2                       jsr     NXIN
000785r 2               .endif
000785r 2               .ifdef KBD
000785r 2                       bmi     L2ABE
000785r 2               .else
000785r 2                 .ifdef CONFIG_FILE
000785r 2                       lda     CURDVC
000785r 2                       beq     LCB0C
000785r 2                       lda     Z96
000785r 2                       and     #$02
000785r 2                       beq     LCB0C
000785r 2                       jsr     LCAD6
000785r 2                       jmp     DATA
000785r 2               LCB0C:
000785r 2                 .endif
000785r 2  AD 00 02             lda     INPUTBUFFER
000788r 2  D0 12                bne     L2ABE
00078Ar 2                 .ifdef CONFIG_FILE
00078Ar 2                       lda     CURDVC
00078Ar 2                       bne     LCAF8
00078Ar 2                 .endif
00078Ar 2                 .ifdef CONFIG_CBM1_PATCHES
00078Ar 2                       jmp     PATCH1
00078Ar 2                 .else
00078Ar 2  18                   clc
00078Br 2  4C rr rr             jmp     CONTROL_C_TYPED
00078Er 2                 .endif
00078Er 2               .endif
00078Er 2               
00078Er 2               NXIN:
00078Er 2               .ifdef KBD
00078Er 2                       jsr     INLIN
00078Er 2                       bmi     RTS20
00078Er 2                       pla
00078Er 2                       jmp     LE86C
00078Er 2               .else
00078Er 2                 .ifdef CONFIG_FILE
00078Er 2                       lda     CURDVC
00078Er 2                       bne     LCB21
00078Er 2                 .endif
00078Er 2  20 rr rr             jsr     OUTQUES	; '?'
000791r 2  20 rr rr             jsr     OUTSP
000794r 2               LCB21:
000794r 2  4C rr rr             jmp     INLIN
000797r 2               .endif
000797r 2               
000797r 2               ; ----------------------------------------------------------------------------
000797r 2               ; "GETC" STATEMENT
000797r 2               ; ----------------------------------------------------------------------------
000797r 2               .ifdef KBD
000797r 2               GETC:
000797r 2                       jsr     CONINT
000797r 2                       jsr     LF43D
000797r 2                       jmp     LE664
000797r 2               .endif
000797r 2               
000797r 2               ; ----------------------------------------------------------------------------
000797r 2               ; "READ" STATEMENT
000797r 2               ; ----------------------------------------------------------------------------
000797r 2               READ:
000797r 2  A6 80                ldx     DATPTR
000799r 2  A4 81                ldy     DATPTR+1
00079Br 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
00079Br 2               ; AppleSoft II, too
00079Br 2                       lda     #$98	; READ
00079Br 2                       .byte   $2C
00079Br 2               L2ABE:
00079Br 2                       lda     #$00	; INPUT
00079Br 2               .else
00079Br 2  A9                   .byte   $A9	; LDA #$98
00079Cr 2               L2ABE:
00079Cr 2  98                   tya
00079Dr 2               .endif
00079Dr 2               
00079Dr 2               ; ----------------------------------------------------------------------------
00079Dr 2               ; PROCESS INPUT LIST
00079Dr 2               ;
00079Dr 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00079Dr 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00079Dr 2               ; 				$40 FOR GET
00079Dr 2               ;				$98 FOR READ
00079Dr 2               ; ----------------------------------------------------------------------------
00079Dr 2               PROCESS_INPUT_LIST:
00079Dr 2  85 15                sta     INPUTFLG
00079Fr 2  86 82                stx     INPTR
0007A1r 2  84 83                sty     INPTR+1
0007A3r 2               PROCESS_INPUT_ITEM:
0007A3r 2  20 rr rr             jsr     PTRGET
0007A6r 2  85 88                sta     FORPNT
0007A8r 2  84 89                sty     FORPNT+1
0007AAr 2  A5 B9                lda     TXTPTR
0007ACr 2  A4 BA                ldy     TXTPTR+1
0007AEr 2  85 53                sta     TXPSV
0007B0r 2  84 54                sty     TXPSV+1
0007B2r 2  A6 82                ldx     INPTR
0007B4r 2  A4 83                ldy     INPTR+1
0007B6r 2  86 B9                stx     TXTPTR
0007B8r 2  84 BA                sty     TXTPTR+1
0007BAr 2  20 B8 00             jsr     CHRGOT
0007BDr 2  D0 1E                bne     INSTART
0007BFr 2  24 15                bit     INPUTFLG
0007C1r 2               .ifndef CONFIG_SMALL ; GET
0007C1r 2  50 0E                bvc     L2AF0
0007C3r 2                 .ifdef MICROTAN
0007C3r 2                       jsr     MONRDKEY2
0007C3r 2                 .else
0007C3r 2  20 rr rr             jsr     MONRDKEY
0007C6r 2                 .endif
0007C6r 2                 .ifdef CONFIG_IO_MSB
0007C6r 2  29 7F                and     #$7F
0007C8r 2                 .endif
0007C8r 2  8D 00 02             sta     INPUTBUFFER
0007CBr 2               ; BUG: The beq/bne L2AF8 below is supposed
0007CBr 2               ; to be always taken. For this to happen,
0007CBr 2               ; the last load must be a 0 for beq
0007CBr 2               ; and != 0 for bne. The original Microsoft
0007CBr 2               ; code had ldx/ldy/bne here, which was only
0007CBr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007CBr 2               ; fixed it in CBMBASIC V1 by swapping the
0007CBr 2               ; ldx and the ldy. It was broken on KIM,
0007CBr 2               ; but okay on APPLE and CBM2, because
0007CBr 2               ; these used a non-ZP INPUTBUFFER.
0007CBr 2               ; Microsoft fixed this somewhere after KIM
0007CBr 2               ; and before MICROTAN, by using beq instead
0007CBr 2               ; of bne in the ZP case.
0007CBr 2                 .ifdef CBM1
0007CBr 2                       ldy     #>(INPUTBUFFER-1)
0007CBr 2                       ldx     #<(INPUTBUFFER-1)
0007CBr 2                 .else
0007CBr 2  A2 FF                ldx     #<(INPUTBUFFER-1)
0007CDr 2  A0 01                ldy     #>(INPUTBUFFER-1)
0007CFr 2                 .endif
0007CFr 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007CFr 2                       beq     L2AF8	; always
0007CFr 2                 .else
0007CFr 2  D0 08                bne     L2AF8	; always
0007D1r 2                 .endif
0007D1r 2               L2AF0:
0007D1r 2               .endif
0007D1r 2  30 71                bmi     FINDATA
0007D3r 2               .ifdef CONFIG_FILE
0007D3r 2                       lda     CURDVC
0007D3r 2                       bne     LCB64
0007D3r 2               .endif
0007D3r 2               .ifdef KBD
0007D3r 2                       jsr     OUTQUESSP
0007D3r 2               .else
0007D3r 2  20 rr rr             jsr     OUTQUES
0007D6r 2               .endif
0007D6r 2               LCB64:
0007D6r 2  20 rr rr             jsr     NXIN
0007D9r 2               L2AF8:
0007D9r 2  86 B9                stx     TXTPTR
0007DBr 2  84 BA                sty     TXTPTR+1
0007DDr 2               
0007DDr 2               ; ----------------------------------------------------------------------------
0007DDr 2               INSTART:
0007DDr 2  20 B2 00             jsr     CHRGET
0007E0r 2  24 11                bit     VALTYP
0007E2r 2  10 31                bpl     L2B34
0007E4r 2               .ifndef CONFIG_SMALL ; GET
0007E4r 2  24 15                bit     INPUTFLG
0007E6r 2  50 09                bvc     L2B10
0007E8r 2                 .ifdef CONFIG_CBM1_PATCHES
0007E8r 2                       lda     #$00
0007E8r 2                       jsr     PATCH4
0007E8r 2                       nop
0007E8r 2                 .else
0007E8r 2  E8                   inx
0007E9r 2  86 B9                stx     TXTPTR
0007EBr 2  A9 00                lda     #$00
0007EDr 2  85 0D                sta     CHARAC
0007EFr 2  F0 0C                beq     L2B1C
0007F1r 2                 .endif
0007F1r 2               L2B10:
0007F1r 2               .endif
0007F1r 2  85 0D                sta     CHARAC
0007F3r 2  C9 22                cmp     #$22
0007F5r 2  F0 07                beq     L2B1D
0007F7r 2  A9 3A                lda     #$3A
0007F9r 2  85 0D                sta     CHARAC
0007FBr 2  A9 2C                lda     #$2C
0007FDr 2               L2B1C:
0007FDr 2  18                   clc
0007FEr 2               L2B1D:
0007FEr 2  85 0E                sta     ENDCHR
000800r 2  A5 B9                lda     TXTPTR
000802r 2  A4 BA                ldy     TXTPTR+1
000804r 2  69 00                adc     #$00
000806r 2  90 01                bcc     L2B28
000808r 2  C8                   iny
000809r 2               L2B28:
000809r 2  20 rr rr             jsr     STRLT2
00080Cr 2  20 rr rr             jsr     POINT
00080Fr 2               .ifdef CONFIG_SMALL
00080Fr 2                       jsr     LETSTRING
00080Fr 2               .else
00080Fr 2  20 rr rr             jsr     PUTSTR
000812r 2               .endif
000812r 2  4C rr rr             jmp     INPUT_MORE
000815r 2               ; ----------------------------------------------------------------------------
000815r 2               L2B34:
000815r 2  20 rr rr             jsr     FIN
000818r 2               .ifdef CONFIG_SMALL
000818r 2                       jsr     SETFOR
000818r 2               .else
000818r 2  A5 12                lda     VALTYP+1
00081Ar 2  20 rr rr             jsr     LET2
00081Dr 2               .endif
00081Dr 2               ; ----------------------------------------------------------------------------
00081Dr 2               INPUT_MORE:
00081Dr 2  20 B8 00             jsr     CHRGOT
000820r 2  F0 07                beq     L2B48
000822r 2  C9 2C                cmp     #$2C
000824r 2  F0 03                beq     L2B48
000826r 2  4C rr rr             jmp     INPUTERR
000829r 2               L2B48:
000829r 2  A5 B9                lda     TXTPTR
00082Br 2  A4 BA                ldy     TXTPTR+1
00082Dr 2  85 82                sta     INPTR
00082Fr 2  84 83                sty     INPTR+1
000831r 2  A5 53                lda     TXPSV
000833r 2  A4 54                ldy     TXPSV+1
000835r 2  85 B9                sta     TXTPTR
000837r 2  84 BA                sty     TXTPTR+1
000839r 2  20 B8 00             jsr     CHRGOT
00083Cr 2  F0 2C                beq     INPDONE
00083Er 2  20 rr rr             jsr     CHKCOM
000841r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000844r 2               ; ----------------------------------------------------------------------------
000844r 2               FINDATA:
000844r 2  20 rr rr             jsr     DATAN
000847r 2  C8                   iny
000848r 2  AA                   tax
000849r 2  D0 12                bne     L2B7C
00084Br 2  A2 2A                ldx     #ERR_NODATA
00084Dr 2  C8                   iny
00084Er 2  B1 B9                lda     (TXTPTR),y
000850r 2  F0 69                beq     GERR
000852r 2  C8                   iny
000853r 2  B1 B9                lda     (TXTPTR),y
000855r 2  85 7E                sta     Z8C
000857r 2  C8                   iny
000858r 2  B1 B9                lda     (TXTPTR),y
00085Ar 2  C8                   iny
00085Br 2  85 7F                sta     Z8C+1
00085Dr 2               L2B7C:
00085Dr 2  B1 B9                lda     (TXTPTR),y
00085Fr 2  AA                   tax
000860r 2  20 rr rr             jsr     ADDON
000863r 2  E0 83                cpx     #$83
000865r 2  D0 DD                bne     FINDATA
000867r 2  4C rr rr             jmp     INSTART
00086Ar 2               ; ---NO MORE INPUT REQUESTED------
00086Ar 2               INPDONE:
00086Ar 2  A5 82                lda     INPTR
00086Cr 2  A4 83                ldy     INPTR+1
00086Er 2  A6 15                ldx     INPUTFLG
000870r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000870r 2                       beq     L2B94 ; INPUT
000870r 2               .else
000870r 2  10 03                bpl     L2B94; INPUT or GET
000872r 2               .endif
000872r 2  4C rr rr             jmp     SETDA
000875r 2               L2B94:
000875r 2  A0 00                ldy     #$00
000877r 2  B1 82                lda     (INPTR),y
000879r 2  F0 07                beq     L2BA1
00087Br 2               .ifdef CONFIG_FILE
00087Br 2                       lda     CURDVC
00087Br 2                       bne     L2BA1
00087Br 2               .endif
00087Br 2  A9 rr                lda     #<ERREXTRA
00087Dr 2  A0 rr                ldy     #>ERREXTRA
00087Fr 2  4C rr rr             jmp     STROUT
000882r 2               L2BA1:
000882r 2  60                   rts
000883r 2               
000883r 2               ; ----------------------------------------------------------------------------
000883r 2               ERREXTRA:
000883r 2               .ifdef KBD
000883r 2                       .byte   "?Extra"
000883r 2               .else
000883r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000887r 2  52 41 20 49  
00088Br 2  47 4E 4F 52  
000891r 2               .endif
000891r 2  0D 0A 00             .byte   $0D,$0A,$00
000894r 2               ERRREENTRY:
000894r 2               .ifdef KBD
000894r 2                       .byte   "What?"
000894r 2               .else
000894r 2  3F 52 45 44          .byte   "?REDO FROM START"
000898r 2  4F 20 46 52  
00089Cr 2  4F 4D 20 53  
0008A4r 2               .endif
0008A4r 2  0D 0A 00             .byte   $0D,$0A,$00
0008A7r 2               .ifdef KBD
0008A7r 2               LEA30:
0008A7r 2                       .byte   "B"
0008A7r 2                       .byte   $FD
0008A7r 2                       .byte   "GsBASIC"
0008A7r 2                       .byte   $00,$1B,$0D,$13
0008A7r 2                       .byte   " BASIC"
0008A7r 2               .endif
0008A7r 2               
0008A7r 1               .include "eval.s"
0008A7r 2               .segment "CODE"
0008A7r 2               
0008A7r 2               ; ----------------------------------------------------------------------------
0008A7r 2               ; "NEXT" STATEMENT
0008A7r 2               ; ----------------------------------------------------------------------------
0008A7r 2               NEXT:
0008A7r 2  D0 04                bne     NEXT1
0008A9r 2  A0 00                ldy     #$00
0008ABr 2  F0 03                beq     NEXT2
0008ADr 2               NEXT1:
0008ADr 2  20 rr rr             jsr     PTRGET
0008B0r 2               NEXT2:
0008B0r 2  85 88                sta     FORPNT
0008B2r 2  84 89                sty     FORPNT+1
0008B4r 2  20 rr rr             jsr     GTFORPNT
0008B7r 2  F0 04                beq     NEXT3
0008B9r 2  A2 00                ldx     #$00
0008BBr 2               GERR:
0008BBr 2  F0 67                beq     JERROR
0008BDr 2               NEXT3:
0008BDr 2  9A                   txs
0008BEr 2               .ifndef CONFIG_2
0008BEr 2                       inx
0008BEr 2                       inx
0008BEr 2                       inx
0008BEr 2                       inx
0008BEr 2               .endif
0008BEr 2  8A                   txa
0008BFr 2               .ifdef CONFIG_2
0008BFr 2  18                   clc
0008C0r 2  69 04                adc     #$04
0008C2r 2  48                   pha
0008C3r 2  69 06                adc     #BYTES_FP+1
0008C5r 2  85 63                sta     DEST
0008C7r 2  68                   pla
0008C8r 2               .else
0008C8r 2                       inx
0008C8r 2                       inx
0008C8r 2                       inx
0008C8r 2                       inx
0008C8r 2                       inx
0008C8r 2               .ifndef CONFIG_SMALL
0008C8r 2                       inx
0008C8r 2               .endif
0008C8r 2                       stx     DEST
0008C8r 2               .endif
0008C8r 2  A0 01                ldy     #>STACK
0008CAr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008CDr 2  BA                   tsx
0008CEr 2  BD 09 01             lda     STACK+BYTES_FP+4,x
0008D1r 2  85 A5                sta     FACSIGN
0008D3r 2  A5 88                lda     FORPNT
0008D5r 2  A4 89                ldy     FORPNT+1
0008D7r 2  20 rr rr             jsr     FADD
0008DAr 2  20 rr rr             jsr     SETFOR
0008DDr 2  A0 01                ldy     #>STACK
0008DFr 2  20 rr rr             jsr     FCOMP2
0008E2r 2  BA                   tsx
0008E3r 2  38                   sec
0008E4r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0008E7r 2  F0 17                beq     L2C22
0008E9r 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
0008ECr 2  85 78                sta     CURLIN
0008EEr 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
0008F1r 2  85 79                sta     CURLIN+1
0008F3r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
0008F6r 2  85 B9                sta     TXTPTR
0008F8r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
0008FBr 2  85 BA                sta     TXTPTR+1
0008FDr 2               L2C1F:
0008FDr 2  4C rr rr             jmp     NEWSTT
000900r 2               L2C22:
000900r 2  8A                   txa
000901r 2  69 11                adc     #2*BYTES_FP+7
000903r 2  AA                   tax
000904r 2  9A                   txs
000905r 2  20 B8 00             jsr     CHRGOT
000908r 2  C9 2C                cmp     #$2C
00090Ar 2  D0 F1                bne     L2C1F
00090Cr 2  20 B2 00             jsr     CHRGET
00090Fr 2  20 rr rr             jsr     NEXT1
000912r 2               
000912r 2               ; ----------------------------------------------------------------------------
000912r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000912r 2               ; ----------------------------------------------------------------------------
000912r 2               FRMNUM:
000912r 2  20 rr rr             jsr     FRMEVL
000915r 2               
000915r 2               ; ----------------------------------------------------------------------------
000915r 2               ; MAKE SURE (FAC) IS NUMERIC
000915r 2               ; ----------------------------------------------------------------------------
000915r 2               CHKNUM:
000915r 2  18                   clc
000916r 2  90 01        		bcc CHKVAL
000918r 2               
000918r 2               		; turns the sec into a bit
000918r 2                       ;.byte   $24
000918r 2               
000918r 2               ; ----------------------------------------------------------------------------
000918r 2               ; MAKE SURE (FAC) IS STRING
000918r 2               ; ----------------------------------------------------------------------------
000918r 2               CHKSTR:
000918r 2  38                   sec
000919r 2               
000919r 2               ; ----------------------------------------------------------------------------
000919r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000919r 2               ; IF C=0, TYPE MUST BE NUMERIC
000919r 2               ; IF C=1, TYPE MUST BE STRING
000919r 2               ; ----------------------------------------------------------------------------
000919r 2               CHKVAL:
000919r 2  24 11                bit     VALTYP
00091Br 2  30 03                bmi     L2C41
00091Dr 2  B0 03                bcs     L2C43
00091Fr 2               L2C40:
00091Fr 2  60                   rts
000920r 2               L2C41:
000920r 2  B0 FD                bcs     L2C40
000922r 2               L2C43:
000922r 2  A2 A3                ldx     #ERR_BADTYPE
000924r 2               JERROR:
000924r 2  4C rr rr             jmp     ERROR
000927r 2               
000927r 2               ; ----------------------------------------------------------------------------
000927r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000927r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000927r 2               ; EXPRESSIONS.
000927r 2               ; ----------------------------------------------------------------------------
000927r 2               FRMEVL:
000927r 2  A6 B9                ldx     TXTPTR
000929r 2  D0 02                bne     L2C4E
00092Br 2  C6 BA                dec     TXTPTR+1
00092Dr 2               L2C4E:
00092Dr 2  C6 B9                dec     TXTPTR
00092Fr 2  A2 00                ldx     #$00
000931r 2  24                   .byte   $24
000932r 2               FRMEVL1:
000932r 2  48                   pha
000933r 2  8A                   txa
000934r 2  48                   pha
000935r 2  A9 01                lda     #$01
000937r 2  20 rr rr             jsr     CHKMEM
00093Ar 2  20 rr rr             jsr     FRM_ELEMENT
00093Dr 2  A9 00                lda     #$00
00093Fr 2  85 8C                sta     CPRTYP
000941r 2               FRMEVL2:
000941r 2  20 B8 00             jsr     CHRGOT
000944r 2               L2C65:
000944r 2  38                   sec
000945r 2  E9 A8                sbc     #TOKEN_GREATER
000947r 2  90 17                bcc     L2C81
000949r 2  C9 03                cmp     #$03
00094Br 2  B0 13                bcs     L2C81
00094Dr 2  C9 01                cmp     #$01
00094Fr 2  2A                   rol     a
000950r 2  49 01                eor     #$01
000952r 2  45 8C                eor     CPRTYP
000954r 2  C5 8C                cmp     CPRTYP
000956r 2  90 61                bcc     SNTXERR
000958r 2  85 8C                sta     CPRTYP
00095Ar 2  20 B2 00             jsr     CHRGET
00095Dr 2  4C rr rr             jmp     L2C65
000960r 2               L2C81:
000960r 2  A6 8C                ldx     CPRTYP
000962r 2  D0 2C                bne     FRM_RELATIONAL
000964r 2  B0 7B                bcs     L2D02
000966r 2  69 07                adc    #$07
000968r 2  90 77                bcc     L2D02
00096Ar 2  65 11                adc     VALTYP
00096Cr 2  D0 03                bne     L2C92
00096Er 2  4C rr rr             jmp     CAT
000971r 2               L2C92:
000971r 2  69 FF                adc     #$FF
000973r 2  85 61                sta     INDEX
000975r 2  0A                   asl     a
000976r 2  65 61                adc     INDEX
000978r 2  A8                   tay
000979r 2               FRM_PRECEDENCE_TEST:
000979r 2  68                   pla
00097Ar 2  D9 rr rr             cmp     MATHTBL,y
00097Dr 2  B0 67                bcs     FRM_PERFORM1
00097Fr 2  20 rr rr             jsr     CHKNUM
000982r 2               L2CA3:
000982r 2  48                   pha
000983r 2               L2CA4:
000983r 2  20 rr rr             jsr     FRM_RECURSE
000986r 2  68                   pla
000987r 2  A4 8A                ldy     LASTOP
000989r 2  10 17                bpl     PREFNC
00098Br 2  AA                   tax
00098Cr 2  F0 56                beq     GOEX
00098Er 2  D0 5F                bne     FRM_PERFORM2
000990r 2               
000990r 2               ; ----------------------------------------------------------------------------
000990r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000990r 2               ; ----------------------------------------------------------------------------
000990r 2               FRM_RELATIONAL:
000990r 2  46 11                lsr     VALTYP
000992r 2  8A                   txa
000993r 2  2A                   rol     a
000994r 2  A6 B9                ldx     TXTPTR
000996r 2  D0 02                bne     L2CBB
000998r 2  C6 BA                dec     TXTPTR+1
00099Ar 2               L2CBB:
00099Ar 2  C6 B9                dec     TXTPTR
00099Cr 2  A0 1B                ldy     #$1B
00099Er 2  85 8C                sta     CPRTYP
0009A0r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009A2r 2               PREFNC:
0009A2r 2  D9 rr rr             cmp     MATHTBL,y
0009A5r 2  B0 48                bcs     FRM_PERFORM2
0009A7r 2  90 D9                bcc     L2CA3
0009A9r 2               
0009A9r 2               ; ----------------------------------------------------------------------------
0009A9r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
0009A9r 2               ; ANOTHER ONE
0009A9r 2               ; ----------------------------------------------------------------------------
0009A9r 2               FRM_RECURSE:
0009A9r 2  B9 rr rr             lda     MATHTBL+2,y
0009ACr 2  48                   pha
0009ADr 2  B9 rr rr             lda     MATHTBL+1,y
0009B0r 2  48                   pha
0009B1r 2  20 rr rr             jsr     FRM_STACK1
0009B4r 2  A5 8C                lda     CPRTYP
0009B6r 2  4C rr rr             jmp     FRMEVL1
0009B9r 2               SNTXERR:
0009B9r 2  4C rr rr             jmp     SYNERR
0009BCr 2               
0009BCr 2               ; ----------------------------------------------------------------------------
0009BCr 2               ; STACK (FAC)
0009BCr 2               ; THREE ENTRY POINTS:
0009BCr 2               ; 	1, FROM FRMEVL
0009BCr 2               ;	2, FROM "STEP"
0009BCr 2               ;	3, FROM "FOR"
0009BCr 2               ; ----------------------------------------------------------------------------
0009BCr 2               FRM_STACK1:
0009BCr 2  A5 A5                lda     FACSIGN
0009BEr 2  BE rr rr             ldx     MATHTBL,y
0009C1r 2               
0009C1r 2               ; ----------------------------------------------------------------------------
0009C1r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009C1r 2               ; ----------------------------------------------------------------------------
0009C1r 2               FRM_STACK2:
0009C1r 2  A8                   tay
0009C2r 2  68                   pla
0009C3r 2  85 61                sta     INDEX
0009C5r 2               .ifndef CONFIG_2B
0009C5r 2  E6 61                inc     INDEX ; bug: assumes not on page boundary
0009C7r 2               ; bug exists on AppleSoft II
0009C7r 2               .endif
0009C7r 2  68                   pla
0009C8r 2  85 62                sta     INDEX+1
0009CAr 2               .ifdef CONFIG_2B
0009CAr 2                       inc     INDEX
0009CAr 2                       bne     LEB69
0009CAr 2                       inc     INDEX+1
0009CAr 2               LEB69:
0009CAr 2               .endif
0009CAr 2  98                   tya
0009CBr 2  48                   pha
0009CCr 2               
0009CCr 2               ; ----------------------------------------------------------------------------
0009CCr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009CCr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009CCr 2               ; ----------------------------------------------------------------------------
0009CCr 2               FRM_STACK3:
0009CCr 2  20 rr rr             jsr     ROUND_FAC
0009CFr 2               .ifndef CONFIG_SMALL
0009CFr 2  A5 A4                lda     FAC+4
0009D1r 2  48                   pha
0009D2r 2               .endif
0009D2r 2  A5 A3                lda     FAC+3
0009D4r 2  48                   pha
0009D5r 2  A5 A2                lda     FAC+2
0009D7r 2  48                   pha
0009D8r 2  A5 A1                lda     FAC+1
0009DAr 2  48                   pha
0009DBr 2  A5 A0                lda     FAC
0009DDr 2  48                   pha
0009DEr 2  6C 61 00             jmp     (INDEX)
0009E1r 2               L2D02:
0009E1r 2  A0 FF                ldy     #$FF
0009E3r 2  68                   pla
0009E4r 2               GOEX:
0009E4r 2  F0 23                beq     EXIT
0009E6r 2               
0009E6r 2               ; ----------------------------------------------------------------------------
0009E6r 2               ; PERFORM STACKED OPERATION
0009E6r 2               ;
0009E6r 2               ; (A) = PRECEDENCE BYTE
0009E6r 2               ; STACK:  1 -- CPRMASK
0009E6r 2               ;	5 -- (ARG)
0009E6r 2               ;	2 -- ADDR OF PERFORMER
0009E6r 2               ; ----------------------------------------------------------------------------
0009E6r 2               FRM_PERFORM1:
0009E6r 2  C9 64                cmp     #$64
0009E8r 2  F0 03                beq     L2D0E
0009EAr 2  20 rr rr             jsr     CHKNUM
0009EDr 2               L2D0E:
0009EDr 2  84 8A                sty     LASTOP
0009EFr 2               FRM_PERFORM2:
0009EFr 2  68                   pla
0009F0r 2  4A                   lsr     a
0009F1r 2  85 16                sta     CPRMASK
0009F3r 2  68                   pla
0009F4r 2  85 A8                sta     ARG
0009F6r 2  68                   pla
0009F7r 2  85 A9                sta     ARG+1
0009F9r 2  68                   pla
0009FAr 2  85 AA                sta     ARG+2
0009FCr 2  68                   pla
0009FDr 2  85 AB                sta     ARG+3
0009FFr 2  68                   pla
000A00r 2               .ifndef CONFIG_SMALL
000A00r 2  85 AC                sta     ARG+4
000A02r 2  68                   pla
000A03r 2               .endif
000A03r 2  85 AD                sta     ARGSIGN
000A05r 2  45 A5                eor     FACSIGN
000A07r 2  85 AE                sta     SGNCPR
000A09r 2               EXIT:
000A09r 2  A5 A0                lda     FAC
000A0Br 2  60                   rts
000A0Cr 2               
000A0Cr 2               ; ----------------------------------------------------------------------------
000A0Cr 2               ; GET ELEMENT IN EXPRESSION
000A0Cr 2               ;
000A0Cr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A0Cr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A0Cr 2               ; ----------------------------------------------------------------------------
000A0Cr 2               FRM_ELEMENT:
000A0Cr 2  A9 00                lda     #$00
000A0Er 2  85 11                sta     VALTYP
000A10r 2               L2D31:
000A10r 2  20 B2 00             jsr     CHRGET
000A13r 2  B0 03                bcs     L2D39
000A15r 2               L2D36:
000A15r 2  4C rr rr             jmp     FIN
000A18r 2               L2D39:
000A18r 2  20 rr rr             jsr     ISLETC
000A1Br 2  B0 67                bcs     FRM_VARIABLE
000A1Dr 2               .ifdef CONFIG_CBM_ALL
000A1Dr 2                       cmp     #$FF
000A1Dr 2                       bne     LCDC1
000A1Dr 2                       lda     #<CON_PI
000A1Dr 2                       ldy     #>CON_PI
000A1Dr 2                       jsr     LOAD_FAC_FROM_YA
000A1Dr 2                       jmp     CHRGET
000A1Dr 2               CON_PI:
000A1Dr 2                       .byte   $82,$49,$0f,$DA,$A1
000A1Dr 2               LCDC1:
000A1Dr 2               .endif
000A1Dr 2  C9 2E                cmp     #$2E
000A1Fr 2  F0 F4                beq     L2D36
000A21r 2  C9 A2                cmp     #TOKEN_MINUS
000A23r 2  F0 58                beq     MIN
000A25r 2  C9 A1                cmp     #TOKEN_PLUS
000A27r 2  F0 E7                beq     L2D31
000A29r 2  C9 22                cmp     #$22
000A2Br 2  D0 0F                bne     NOT_
000A2Dr 2               
000A2Dr 2               ; ----------------------------------------------------------------------------
000A2Dr 2               ; STRING CONSTANT ELEMENT
000A2Dr 2               ;
000A2Dr 2               ; SET Y,A = (TXTPTR)+CARRY
000A2Dr 2               ; ----------------------------------------------------------------------------
000A2Dr 2               STRTXT:
000A2Dr 2  A5 B9                lda     TXTPTR
000A2Fr 2  A4 BA                ldy     TXTPTR+1
000A31r 2  69 00                adc     #$00
000A33r 2  90 01                bcc     L2D57
000A35r 2  C8                   iny
000A36r 2               L2D57:
000A36r 2  20 rr rr             jsr     STRLIT
000A39r 2  4C rr rr             jmp     POINT
000A3Cr 2               
000A3Cr 2               ; ----------------------------------------------------------------------------
000A3Cr 2               ; "NOT" FUNCTION
000A3Cr 2               ; IF FAC=0, RETURN FAC=1
000A3Cr 2               ; IF FAC<>0, RETURN FAC=0
000A3Cr 2               ; ----------------------------------------------------------------------------
000A3Cr 2               NOT_:
000A3Cr 2  C9 9F                cmp     #TOKEN_NOT
000A3Er 2  D0 13                bne     L2D74
000A40r 2  A0 18                ldy     #$18
000A42r 2  D0 3B                bne     EQUL
000A44r 2               
000A44r 2               ; ----------------------------------------------------------------------------
000A44r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A44r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A44r 2               ; ----------------------------------------------------------------------------
000A44r 2               EQUOP:
000A44r 2  20 rr rr             jsr     AYINT
000A47r 2  A5 A4                lda     FAC_LAST
000A49r 2  49 FF                eor     #$FF
000A4Br 2  A8                   tay
000A4Cr 2  A5 A3                lda     FAC_LAST-1
000A4Er 2  49 FF                eor     #$FF
000A50r 2  4C rr rr             jmp     GIVAYF
000A53r 2               L2D74:
000A53r 2  C9 9C                cmp     #TOKEN_FN
000A55r 2  D0 03                bne     L2D7B
000A57r 2  4C rr rr             jmp     L31F3
000A5Ar 2               L2D7B:
000A5Ar 2  C9 AB                cmp     #TOKEN_SGN
000A5Cr 2  90 03                bcc     PARCHK
000A5Er 2  4C rr rr             jmp     UNARY
000A61r 2               
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               ; EVALUATE "(EXPRESSION)"
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               PARCHK:
000A61r 2  20 rr rr             jsr     CHKOPN
000A64r 2  20 rr rr             jsr     FRMEVL
000A67r 2               CHKCLS:
000A67r 2  A9 29                lda     #$29
000A69r 2  2C                   .byte   $2C
000A6Ar 2               CHKOPN:
000A6Ar 2  A9 28                lda     #$28
000A6Cr 2  2C                   .byte   $2C
000A6Dr 2               CHKCOM:
000A6Dr 2  A9 2C                lda     #$2C
000A6Fr 2               
000A6Fr 2               ; ----------------------------------------------------------------------------
000A6Fr 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A6Fr 2               ; ----------------------------------------------------------------------------
000A6Fr 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A6Fr 2  A0 00                ldy     #$00
000A71r 2  D1 B9                cmp     (TXTPTR),y
000A73r 2  D0 03                bne     SYNERR
000A75r 2  4C B2 00             jmp     CHRGET
000A78r 2               ; ----------------------------------------------------------------------------
000A78r 2               SYNERR:
000A78r 2  A2 10                ldx     #ERR_SYNTAX
000A7Ar 2  4C rr rr             jmp     ERROR
000A7Dr 2               ; ----------------------------------------------------------------------------
000A7Dr 2               MIN:
000A7Dr 2  A0 15                ldy     #$15
000A7Fr 2               EQUL:
000A7Fr 2  68                   pla
000A80r 2  68                   pla
000A81r 2  4C rr rr             jmp     L2CA4
000A84r 2               ; ----------------------------------------------------------------------------
000A84r 2               FRM_VARIABLE:
000A84r 2  20 rr rr             jsr     PTRGET
000A87r 2               FRM_VARIABLE_CALL	= *-1
000A87r 2  85 A3                sta     FAC_LAST-1
000A89r 2  84 A4                sty     FAC_LAST
000A8Br 2               .ifdef CONFIG_CBM_ALL
000A8Br 2                       lda     VARNAM
000A8Br 2                       ldy     VARNAM+1
000A8Br 2               .endif
000A8Br 2  A6 11                ldx     VALTYP
000A8Dr 2  F0 05                beq     L2DB1
000A8Fr 2               .ifdef CONFIG_CBM_ALL
000A8Fr 2                 .ifdef CONFIG_CBM1_PATCHES
000A8Fr 2                       jmp     PATCH2
000A8Fr 2                       clc
000A8Fr 2               LCE3B:
000A8Fr 2                 .else
000A8Fr 2                       ldx     #$00
000A8Fr 2                       stx     STRNG1+1
000A8Fr 2                       bit     FAC+4
000A8Fr 2                       bpl     LCE53
000A8Fr 2                       cmp     #$54	; T
000A8Fr 2                       bne     LCE53
000A8Fr 2                 .endif
000A8Fr 2                       cpy     #$C9	; I$
000A8Fr 2                       bne     LCE53
000A8Fr 2                       jsr     LCE76
000A8Fr 2                       sty     EXPON
000A8Fr 2                       dey
000A8Fr 2                       sty     STRNG2
000A8Fr 2                       ldy     #$06
000A8Fr 2                       sty     INDX
000A8Fr 2                       ldy     #$24
000A8Fr 2                       jsr     LDD3A
000A8Fr 2                       jmp     LD353
000A8Fr 2               LCE53:
000A8Fr 2               .endif
000A8Fr 2               .ifdef CONFIG_2
000A8Fr 2                 .ifndef CBM2
000A8Fr 2               ; bugfix?
000A8Fr 2               ; fixed on AppleSoft II, not on any CBM
000A8Fr 2  A2 00                ldx     #$00
000A91r 2  86 AF                stx     STRNG1+1
000A93r 2                 .endif
000A93r 2               .endif
000A93r 2  60                   rts
000A94r 2               L2DB1:
000A94r 2               .ifndef CONFIG_SMALL
000A94r 2  A6 12                ldx     VALTYP+1
000A96r 2  10 0D                bpl     L2DC2
000A98r 2  A0 00                ldy     #$00
000A9Ar 2  B1 A3                lda     (FAC+3),y
000A9Cr 2  AA                   tax
000A9Dr 2  C8                   iny
000A9Er 2  B1 A3                lda     (FAC+3),y
000AA0r 2  A8                   tay
000AA1r 2  8A                   txa
000AA2r 2  4C rr rr             jmp     GIVAYF
000AA5r 2               L2DC2:
000AA5r 2               .endif
000AA5r 2               .ifdef CONFIG_CBM1_PATCHES
000AA5r 2                       jmp     PATCH3
000AA5r 2                       .byte   $19
000AA5r 2               .endif
000AA5r 2               .ifdef CBM2
000AA5r 2                       bit     FAC+4
000AA5r 2                       bpl     LCE90
000AA5r 2                       cmp     #$54
000AA5r 2                       bne     LCE82
000AA5r 2               .endif
000AA5r 2               .ifndef CONFIG_CBM_ALL
000AA5r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000AA8r 2               .endif
000AA8r 2               .ifdef CONFIG_CBM_ALL
000AA8r 2               LCE69:
000AA8r 2                       cpy     #$49
000AA8r 2               .ifdef CBM1
000AA8r 2                       bne     LCE82
000AA8r 2               .else
000AA8r 2                       bne     LCE90
000AA8r 2               .endif
000AA8r 2                       jsr     LCE76
000AA8r 2                       tya
000AA8r 2                       ldx     #$A0
000AA8r 2                       jmp     LDB21
000AA8r 2               LCE76:
000AA8r 2               .ifdef CBM1
000AA8r 2                       lda     #$FE
000AA8r 2                       ldy     #$01
000AA8r 2               .else
000AA8r 2                       lda     #$8B
000AA8r 2                       ldy     #$00
000AA8r 2               .endif
000AA8r 2                       sei
000AA8r 2                       jsr     LOAD_FAC_FROM_YA
000AA8r 2                       cli
000AA8r 2                       sty     FAC+1
000AA8r 2                       rts
000AA8r 2               LCE82:
000AA8r 2                       cmp     #$53
000AA8r 2                       bne     LCE90
000AA8r 2                       cpy     #$54
000AA8r 2                       bne     LCE90
000AA8r 2                       lda     Z96
000AA8r 2                       jmp     FLOAT
000AA8r 2               LCE90:
000AA8r 2                       lda     FAC+3
000AA8r 2                       ldy     FAC+4
000AA8r 2                       jmp     LOAD_FAC_FROM_YA
000AA8r 2               .endif
000AA8r 2               
000AA8r 2               ; ----------------------------------------------------------------------------
000AA8r 2               UNARY:
000AA8r 2  0A                   asl     a
000AA9r 2  48                   pha
000AAAr 2  AA                   tax
000AABr 2  20 B2 00             jsr     CHRGET
000AAEr 2  E0 7D                cpx     #<(TOKEN_LEFTSTR*2-1)
000AB0r 2  90 20                bcc     L2DEF
000AB2r 2  20 rr rr             jsr     CHKOPN
000AB5r 2  20 rr rr             jsr     FRMEVL
000AB8r 2  20 rr rr             jsr     CHKCOM
000ABBr 2  20 rr rr             jsr     CHKSTR
000ABEr 2  68                   pla
000ABFr 2  AA                   tax
000AC0r 2  A5 A4                lda     FAC_LAST
000AC2r 2  48                   pha
000AC3r 2  A5 A3                lda     FAC_LAST-1
000AC5r 2  48                   pha
000AC6r 2  8A                   txa
000AC7r 2  48                   pha
000AC8r 2  20 rr rr             jsr     GETBYT
000ACBr 2  68                   pla
000ACCr 2  A8                   tay
000ACDr 2  8A                   txa
000ACEr 2  48                   pha
000ACFr 2  4C rr rr             jmp     L2DF4
000AD2r 2               L2DEF:
000AD2r 2  20 rr rr             jsr     PARCHK
000AD5r 2  68                   pla
000AD6r 2  A8                   tay
000AD7r 2               L2DF4:
000AD7r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000ADAr 2  85 94                sta     JMPADRS+1
000ADCr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000ADFr 2  85 95                sta     JMPADRS+2
000AE1r 2               .ifdef KBD
000AE1r 2                       jsr     LF47D
000AE1r 2               .else
000AE1r 2  20 93 00             jsr     JMPADRS
000AE4r 2               .endif
000AE4r 2  4C rr rr             jmp     CHKNUM
000AE7r 2               
000AE7r 2               ; ----------------------------------------------------------------------------
000AE7r 2               OR:
000AE7r 2  A0 FF                ldy     #$FF
000AE9r 2  2C                   .byte   $2C
000AEAr 2               ; ----------------------------------------------------------------------------
000AEAr 2               TAND:
000AEAr 2  A0 00                ldy     #$00
000AECr 2  84 0F                sty     EOLPNTR
000AEEr 2  20 rr rr             jsr     AYINT
000AF1r 2  A5 A3                lda     FAC_LAST-1
000AF3r 2  45 0F                eor     EOLPNTR
000AF5r 2  85 0D                sta     CHARAC
000AF7r 2  A5 A4                lda     FAC_LAST
000AF9r 2  45 0F                eor     EOLPNTR
000AFBr 2  85 0E                sta     ENDCHR
000AFDr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000B00r 2  20 rr rr             jsr     AYINT
000B03r 2  A5 A4                lda     FAC_LAST
000B05r 2  45 0F                eor     EOLPNTR
000B07r 2  25 0E                and     ENDCHR
000B09r 2  45 0F                eor     EOLPNTR
000B0Br 2  A8                   tay
000B0Cr 2  A5 A3                lda     FAC_LAST-1
000B0Er 2  45 0F                eor     EOLPNTR
000B10r 2  25 0D                and     CHARAC
000B12r 2  45 0F                eor     EOLPNTR
000B14r 2  4C rr rr             jmp     GIVAYF
000B17r 2               
000B17r 2               ; ----------------------------------------------------------------------------
000B17r 2               ; PERFORM RELATIONAL OPERATIONS
000B17r 2               ; ----------------------------------------------------------------------------
000B17r 2               RELOPS:
000B17r 2  20 rr rr             jsr     CHKVAL
000B1Ar 2  B0 13                bcs     STRCMP
000B1Cr 2  A5 AD                lda     ARGSIGN
000B1Er 2  09 7F                ora     #$7F
000B20r 2  25 A9                and     ARG+1
000B22r 2  85 A9                sta     ARG+1
000B24r 2  A9 A8                lda     #<ARG
000B26r 2  A0 00                ldy     #$00
000B28r 2  20 rr rr             jsr     FCOMP
000B2Br 2  AA                   tax
000B2Cr 2  4C rr rr             jmp     NUMCMP
000B2Fr 2               
000B2Fr 2               ; ----------------------------------------------------------------------------
000B2Fr 2               ; STRING COMPARISON
000B2Fr 2               ; ----------------------------------------------------------------------------
000B2Fr 2               STRCMP:
000B2Fr 2  A9 00                lda     #$00
000B31r 2  85 11                sta     VALTYP
000B33r 2  C6 8C                dec     CPRTYP
000B35r 2  20 rr rr             jsr     FREFAC
000B38r 2  85 A0                sta     FAC
000B3Ar 2  86 A1                stx     FAC+1
000B3Cr 2  84 A2                sty     FAC+2
000B3Er 2  A5 AB                lda     ARG_LAST-1
000B40r 2  A4 AC                ldy     ARG_LAST
000B42r 2  20 rr rr             jsr     FRETMP
000B45r 2  86 AB                stx     ARG_LAST-1
000B47r 2  84 AC                sty     ARG_LAST
000B49r 2  AA                   tax
000B4Ar 2  38                   sec
000B4Br 2  E5 A0                sbc     FAC
000B4Dr 2  F0 08                beq     L2E74
000B4Fr 2  A9 01                lda     #$01
000B51r 2  90 04                bcc     L2E74
000B53r 2  A6 A0                ldx     FAC
000B55r 2  A9 FF                lda     #$FF
000B57r 2               L2E74:
000B57r 2  85 A5                sta     FACSIGN
000B59r 2  A0 FF                ldy     #$FF
000B5Br 2  E8                   inx
000B5Cr 2               STRCMP1:
000B5Cr 2  C8                   iny
000B5Dr 2  CA                   dex
000B5Er 2  D0 07                bne     L2E84
000B60r 2  A6 A5                ldx     FACSIGN
000B62r 2               NUMCMP:
000B62r 2  30 0F                bmi     CMPDONE
000B64r 2  18                   clc
000B65r 2  90 0C                bcc     CMPDONE
000B67r 2               L2E84:
000B67r 2  B1 AB                lda     (ARG_LAST-1),y
000B69r 2  D1 A1                cmp     (FAC+1),y
000B6Br 2  F0 EF                beq     STRCMP1
000B6Dr 2  A2 FF                ldx     #$FF
000B6Fr 2  B0 02                bcs     CMPDONE
000B71r 2  A2 01                ldx     #$01
000B73r 2               CMPDONE:
000B73r 2  E8                   inx
000B74r 2  8A                   txa
000B75r 2  2A                   rol     a
000B76r 2  25 16                and     CPRMASK
000B78r 2  F0 02                beq     L2E99
000B7Ar 2  A9 FF                lda     #$FF
000B7Cr 2               L2E99:
000B7Cr 2  4C rr rr             jmp     FLOAT
000B7Fr 2               
000B7Fr 1               .include "var.s"
000B7Fr 2               .segment "CODE"
000B7Fr 2               
000B7Fr 2               ; ----------------------------------------------------------------------------
000B7Fr 2               ; "DIM" STATEMENT
000B7Fr 2               ; ----------------------------------------------------------------------------
000B7Fr 2               NXDIM:
000B7Fr 2  20 rr rr             jsr     CHKCOM
000B82r 2               DIM:
000B82r 2  AA                   tax
000B83r 2  20 rr rr             jsr     PTRGET2
000B86r 2  20 B8 00             jsr     CHRGOT
000B89r 2  D0 F4                bne     NXDIM
000B8Br 2  60                   rts
000B8Cr 2               
000B8Cr 2               ; ----------------------------------------------------------------------------
000B8Cr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B8Cr 2               ;
000B8Cr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B8Cr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B8Cr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B8Cr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B8Cr 2               ;
000B8Cr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B8Cr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B8Cr 2               ;		ELSE = 0
000B8Cr 2               ;
000B8Cr 2               ;	SUBFLG -- = $00
000B8Cr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B8Cr 2               ; ----------------------------------------------------------------------------
000B8Cr 2               PTRGET:
000B8Cr 2  A2 00                ldx     #$00
000B8Er 2  20 B8 00             jsr     CHRGOT
000B91r 2               PTRGET2:
000B91r 2  86 10                stx     DIMFLG
000B93r 2               PTRGET3:
000B93r 2  85 84                sta     VARNAM
000B95r 2  20 B8 00             jsr     CHRGOT
000B98r 2  20 rr rr             jsr     ISLETC
000B9Br 2  B0 03                bcs     NAMOK
000B9Dr 2               SYNERR3:
000B9Dr 2  4C rr rr             jmp     SYNERR
000BA0r 2               NAMOK:
000BA0r 2  A2 00                ldx     #$00
000BA2r 2  86 11                stx     VALTYP
000BA4r 2               .ifndef CONFIG_SMALL
000BA4r 2  86 12                stx     VALTYP+1
000BA6r 2               .endif
000BA6r 2  20 B2 00             jsr     CHRGET
000BA9r 2  90 05                bcc     L2ECD
000BABr 2  20 rr rr             jsr     ISLETC
000BAEr 2  90 0B                bcc     L2ED8
000BB0r 2               L2ECD:
000BB0r 2  AA                   tax
000BB1r 2               L2ECE:
000BB1r 2  20 B2 00             jsr     CHRGET
000BB4r 2  90 FB                bcc     L2ECE
000BB6r 2  20 rr rr             jsr     ISLETC
000BB9r 2  B0 F6                bcs     L2ECE
000BBBr 2               L2ED8:
000BBBr 2  C9 24                cmp     #$24
000BBDr 2               .ifdef CONFIG_SMALL
000BBDr 2                       bne     L2EF9
000BBDr 2               .else
000BBDr 2  D0 06                bne     L2EE2
000BBFr 2               .endif
000BBFr 2  A9 FF                lda     #$FF
000BC1r 2  85 11                sta     VALTYP
000BC3r 2               .ifndef CONFIG_SMALL
000BC3r 2  D0 10                bne     L2EF2
000BC5r 2               L2EE2:
000BC5r 2  C9 25                cmp     #$25
000BC7r 2  D0 13                bne     L2EF9
000BC9r 2  A5 14                lda     SUBFLG
000BCBr 2  D0 D0                bne     SYNERR3
000BCDr 2  A9 80                lda     #$80
000BCFr 2  85 12                sta     VALTYP+1
000BD1r 2  05 84                ora     VARNAM
000BD3r 2  85 84                sta     VARNAM
000BD5r 2               L2EF2:
000BD5r 2               .endif
000BD5r 2  8A                   txa
000BD6r 2  09 80                ora     #$80
000BD8r 2  AA                   tax
000BD9r 2  20 B2 00             jsr     CHRGET
000BDCr 2               L2EF9:
000BDCr 2  86 85                stx     VARNAM+1
000BDEr 2  38                   sec
000BDFr 2  05 14                ora     SUBFLG
000BE1r 2  E9 28                sbc     #$28
000BE3r 2  D0 03                bne     L2F05
000BE5r 2  4C rr rr             jmp     ARRAY
000BE8r 2               L2F05:
000BE8r 2  A9 00                lda     #$00
000BEAr 2  85 14                sta     SUBFLG
000BECr 2  A5 6C                lda     VARTAB
000BEEr 2  A6 6D                ldx     VARTAB+1
000BF0r 2  A0 00                ldy     #$00
000BF2r 2               L2F0F:
000BF2r 2  86 9F                stx     LOWTR+1
000BF4r 2               L2F11:
000BF4r 2  85 9E                sta     LOWTR
000BF6r 2  E4 6F                cpx     ARYTAB+1
000BF8r 2  D0 04                bne     L2F1B
000BFAr 2  C5 6E                cmp     ARYTAB
000BFCr 2  F0 22                beq     NAMENOTFOUND
000BFEr 2               L2F1B:
000BFEr 2  A5 84                lda     VARNAM
000C00r 2  D1 9E                cmp     (LOWTR),y
000C02r 2  D0 08                bne     L2F29
000C04r 2  A5 85                lda     VARNAM+1
000C06r 2  C8                   iny
000C07r 2  D1 9E                cmp     (LOWTR),y
000C09r 2  F0 6A                beq     SET_VARPNT_AND_YA
000C0Br 2  88                   dey
000C0Cr 2               L2F29:
000C0Cr 2  18                   clc
000C0Dr 2  A5 9E                lda     LOWTR
000C0Fr 2  69 07                adc     #BYTES_PER_VARIABLE
000C11r 2  90 E1                bcc     L2F11
000C13r 2  E8                   inx
000C14r 2  D0 DC                bne     L2F0F
000C16r 2               
000C16r 2               ; ----------------------------------------------------------------------------
000C16r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000C16r 2               ;
000C16r 2               ; RETURN CARRY = 1 IF A-Z
000C16r 2               ;	= 0 IF NOT
000C16r 2               ; ----------------------------------------------------------------------------
000C16r 2               ISLETC:
000C16r 2  C9 41                cmp     #$41
000C18r 2  90 05                bcc     L2F3C
000C1Ar 2  E9 5B                sbc     #$5B
000C1Cr 2  38                   sec
000C1Dr 2  E9 A5                sbc     #$A5
000C1Fr 2               L2F3C:
000C1Fr 2  60                   rts
000C20r 2               
000C20r 2               ; ----------------------------------------------------------------------------
000C20r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C20r 2               ; ----------------------------------------------------------------------------
000C20r 2               NAMENOTFOUND:
000C20r 2  68                   pla
000C21r 2  48                   pha
000C22r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C24r 2  D0 0D                bne     MAKENEWVARIABLE
000C26r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C26r 2  BA                   tsx
000C27r 2  BD 02 01             lda     STACK+2,x
000C2Ar 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000C2Cr 2  D0 05                bne     MAKENEWVARIABLE
000C2Er 2               .endif
000C2Er 2               LD015:
000C2Er 2  A9 rr                lda     #<C_ZERO
000C30r 2  A0 rr                ldy     #>C_ZERO
000C32r 2  60                   rts
000C33r 2               
000C33r 2               ; ----------------------------------------------------------------------------
000C33r 2               .ifndef CONFIG_2
000C33r 2               C_ZERO:
000C33r 2                       .byte   $00,$00
000C33r 2               .endif
000C33r 2               
000C33r 2               ; ----------------------------------------------------------------------------
000C33r 2               ; MAKE A NEW SIMPLE VARIABLE
000C33r 2               ;
000C33r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C33r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C33r 2               ; ----------------------------------------------------------------------------
000C33r 2               MAKENEWVARIABLE:
000C33r 2               .ifdef CONFIG_CBM_ALL
000C33r 2                       lda     VARNAM
000C33r 2                       ldy     VARNAM+1
000C33r 2                       cmp     #$54
000C33r 2                       bne     LD02F
000C33r 2                       cpy     #$C9
000C33r 2                       beq     LD015
000C33r 2                       cpy     #$49
000C33r 2                       bne     LD02F
000C33r 2               LD02C:
000C33r 2                       jmp     SYNERR
000C33r 2               LD02F:
000C33r 2                       cmp     #$53
000C33r 2                       bne     LD037
000C33r 2                       cpy     #$54
000C33r 2                       beq     LD02C
000C33r 2               LD037:
000C33r 2               .endif
000C33r 2  A5 6E                lda     ARYTAB
000C35r 2  A4 6F                ldy     ARYTAB+1
000C37r 2  85 9E                sta     LOWTR
000C39r 2  84 9F                sty     LOWTR+1
000C3Br 2  A5 70                lda     STREND
000C3Dr 2  A4 71                ldy     STREND+1
000C3Fr 2  85 99                sta     HIGHTR
000C41r 2  84 9A                sty     HIGHTR+1
000C43r 2  18                   clc
000C44r 2  69 07                adc     #BYTES_PER_VARIABLE
000C46r 2  90 01                bcc     L2F68
000C48r 2  C8                   iny
000C49r 2               L2F68:
000C49r 2  85 97                sta     HIGHDS
000C4Br 2  84 98                sty     HIGHDS+1
000C4Dr 2  20 rr rr             jsr     BLTU
000C50r 2  A5 97                lda     HIGHDS
000C52r 2  A4 98                ldy     HIGHDS+1
000C54r 2  C8                   iny
000C55r 2  85 6E                sta     ARYTAB
000C57r 2  84 6F                sty     ARYTAB+1
000C59r 2  A0 00                ldy     #$00
000C5Br 2  A5 84                lda     VARNAM
000C5Dr 2  91 9E                sta     (LOWTR),y
000C5Fr 2  C8                   iny
000C60r 2  A5 85                lda     VARNAM+1
000C62r 2  91 9E                sta     (LOWTR),y
000C64r 2  A9 00                lda     #$00
000C66r 2  C8                   iny
000C67r 2  91 9E                sta     (LOWTR),y
000C69r 2  C8                   iny
000C6Ar 2  91 9E                sta     (LOWTR),y
000C6Cr 2  C8                   iny
000C6Dr 2  91 9E                sta     (LOWTR),y
000C6Fr 2  C8                   iny
000C70r 2  91 9E                sta     (LOWTR),y
000C72r 2               .ifndef CONFIG_SMALL
000C72r 2  C8                   iny
000C73r 2  91 9E                sta     (LOWTR),y
000C75r 2               .endif
000C75r 2               
000C75r 2               ; ----------------------------------------------------------------------------
000C75r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C75r 2               ; ----------------------------------------------------------------------------
000C75r 2               SET_VARPNT_AND_YA:
000C75r 2  A5 9E                lda     LOWTR
000C77r 2  18                   clc
000C78r 2  69 02                adc     #$02
000C7Ar 2  A4 9F                ldy     LOWTR+1
000C7Cr 2  90 01                bcc     L2F9E
000C7Er 2  C8                   iny
000C7Fr 2               L2F9E:
000C7Fr 2  85 86                sta     VARPNT
000C81r 2  84 87                sty     VARPNT+1
000C83r 2  60                   rts
000C84r 2               
000C84r 1               .include "array.s"
000C84r 2               .segment "CODE"
000C84r 2               
000C84r 2               ; ----------------------------------------------------------------------------
000C84r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C84r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C84r 2               ; ----------------------------------------------------------------------------
000C84r 2               GETARY:
000C84r 2  A5 0F                lda     EOLPNTR
000C86r 2  0A                   asl     a
000C87r 2  69 05                adc     #$05
000C89r 2  65 9E                adc     LOWTR
000C8Br 2  A4 9F                ldy     LOWTR+1
000C8Dr 2  90 01                bcc     L2FAF
000C8Fr 2  C8                   iny
000C90r 2               L2FAF:
000C90r 2  85 97                sta     HIGHDS
000C92r 2  84 98                sty     HIGHDS+1
000C94r 2  60                   rts
000C95r 2               
000C95r 2               ; ----------------------------------------------------------------------------
000C95r 2               NEG32768:
000C95r 2  90 80 00 00          .byte   $90,$80,$00,$00
000C99r 2               
000C99r 2               .ifdef CONFIG_2C
000C99r 2               		.byte	$00; bugfix: short number
000C99r 2               .endif
000C99r 2               
000C99r 2               ; ----------------------------------------------------------------------------
000C99r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C99r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C99r 2               ; IN FAC+3,4
000C99r 2               ; ----------------------------------------------------------------------------
000C99r 2               MAKINT:
000C99r 2  20 B2 00             jsr     CHRGET
000C9Cr 2               .ifdef CONFIG_2
000C9Cr 2  20 rr rr             jsr     FRMEVL
000C9Fr 2               .else
000C9Fr 2                       jsr     FRMNUM
000C9Fr 2               .endif
000C9Fr 2               
000C9Fr 2               ; ----------------------------------------------------------------------------
000C9Fr 2               ; CONVERT FAC TO INTEGER
000C9Fr 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C9Fr 2               ; ----------------------------------------------------------------------------
000C9Fr 2               MKINT:
000C9Fr 2               .ifdef CONFIG_2
000C9Fr 2  20 rr rr             jsr     CHKNUM
000CA2r 2               .endif
000CA2r 2  A5 A5                lda     FACSIGN
000CA4r 2  30 0D                bmi     MI1
000CA6r 2               
000CA6r 2               ; ----------------------------------------------------------------------------
000CA6r 2               ; CONVERT FAC TO INTEGER
000CA6r 2               ; MUST BE -32767 <= FAC <= 32767
000CA6r 2               ; ----------------------------------------------------------------------------
000CA6r 2               AYINT:
000CA6r 2  A5 A0                lda     FAC
000CA8r 2  C9 90                cmp     #$90
000CAAr 2  90 09                bcc     MI2
000CACr 2  A9 rr                lda     #<NEG32768
000CAEr 2  A0 rr                ldy     #>NEG32768
000CB0r 2  20 rr rr             jsr     FCOMP
000CB3r 2               MI1:
000CB3r 2  D0 7A                bne     IQERR
000CB5r 2               MI2:
000CB5r 2  4C rr rr             jmp     QINT
000CB8r 2               
000CB8r 2               ; ----------------------------------------------------------------------------
000CB8r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000CB8r 2               ; ----------------------------------------------------------------------------
000CB8r 2               ARRAY:
000CB8r 2  A5 10                lda     DIMFLG
000CBAr 2               .ifndef CONFIG_SMALL
000CBAr 2  05 12                ora     VALTYP+1
000CBCr 2               .endif
000CBCr 2  48                   pha
000CBDr 2  A5 11                lda     VALTYP
000CBFr 2  48                   pha
000CC0r 2  A0 00                ldy     #$00
000CC2r 2               L2FDE:
000CC2r 2  98                   tya
000CC3r 2  48                   pha
000CC4r 2  A5 85                lda     VARNAM+1
000CC6r 2  48                   pha
000CC7r 2  A5 84                lda     VARNAM
000CC9r 2  48                   pha
000CCAr 2  20 rr rr             jsr     MAKINT
000CCDr 2  68                   pla
000CCEr 2  85 84                sta     VARNAM
000CD0r 2  68                   pla
000CD1r 2  85 85                sta     VARNAM+1
000CD3r 2  68                   pla
000CD4r 2  A8                   tay
000CD5r 2  BA                   tsx
000CD6r 2  BD 02 01             lda     STACK+2,x
000CD9r 2  48                   pha
000CDAr 2  BD 01 01             lda     STACK+1,x
000CDDr 2  48                   pha
000CDEr 2  A5 A3                lda     FAC_LAST-1
000CE0r 2  9D 02 01             sta     STACK+2,x
000CE3r 2  A5 A4                lda     FAC_LAST
000CE5r 2  9D 01 01             sta     STACK+1,x
000CE8r 2  C8                   iny
000CE9r 2  20 B8 00             jsr     CHRGOT
000CECr 2  C9 2C                cmp     #$2C
000CEEr 2  F0 D2                beq     L2FDE
000CF0r 2  84 0F                sty     EOLPNTR
000CF2r 2  20 rr rr             jsr     CHKCLS
000CF5r 2  68                   pla
000CF6r 2  85 11                sta     VALTYP
000CF8r 2  68                   pla
000CF9r 2               .ifndef CONFIG_SMALL
000CF9r 2  85 12                sta     VALTYP+1
000CFBr 2  29 7F                and     #$7F
000CFDr 2               .endif
000CFDr 2  85 10                sta     DIMFLG
000CFFr 2               ; ----------------------------------------------------------------------------
000CFFr 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000CFFr 2               ; ----------------------------------------------------------------------------
000CFFr 2  A6 6E                ldx     ARYTAB
000D01r 2  A5 6F                lda     ARYTAB+1
000D03r 2               L301F:
000D03r 2  86 9E                stx     LOWTR
000D05r 2  85 9F                sta     LOWTR+1
000D07r 2  C5 71                cmp     STREND+1
000D09r 2  D0 04                bne     L302B
000D0Br 2  E4 70                cpx     STREND
000D0Dr 2  F0 39                beq     MAKE_NEW_ARRAY
000D0Fr 2               L302B:
000D0Fr 2  A0 00                ldy     #$00
000D11r 2  B1 9E                lda     (LOWTR),y
000D13r 2  C8                   iny
000D14r 2  C5 84                cmp     VARNAM
000D16r 2  D0 06                bne     L303A
000D18r 2  A5 85                lda     VARNAM+1
000D1Ar 2  D1 9E                cmp     (LOWTR),y
000D1Cr 2  F0 16                beq     USE_OLD_ARRAY
000D1Er 2               L303A:
000D1Er 2  C8                   iny
000D1Fr 2  B1 9E                lda     (LOWTR),y
000D21r 2  18                   clc
000D22r 2  65 9E                adc     LOWTR
000D24r 2  AA                   tax
000D25r 2  C8                   iny
000D26r 2  B1 9E                lda     (LOWTR),y
000D28r 2  65 9F                adc     LOWTR+1
000D2Ar 2  90 D7                bcc     L301F
000D2Cr 2               
000D2Cr 2               ; ----------------------------------------------------------------------------
000D2Cr 2               ; ERROR:  BAD SUBSCRIPTS
000D2Cr 2               ; ----------------------------------------------------------------------------
000D2Cr 2               SUBERR:
000D2Cr 2  A2 6B                ldx     #ERR_BADSUBS
000D2Er 2  2C                   .byte   $2C
000D2Fr 2               
000D2Fr 2               ; ----------------------------------------------------------------------------
000D2Fr 2               ; ERROR:  ILLEGAL QUANTITY
000D2Fr 2               ; ----------------------------------------------------------------------------
000D2Fr 2               IQERR:
000D2Fr 2  A2 35                ldx     #ERR_ILLQTY
000D31r 2               JER:
000D31r 2  4C rr rr             jmp     ERROR
000D34r 2               
000D34r 2               ; ----------------------------------------------------------------------------
000D34r 2               ; FOUND THE ARRAY
000D34r 2               ; ----------------------------------------------------------------------------
000D34r 2               USE_OLD_ARRAY:
000D34r 2  A2 78                ldx     #ERR_REDIMD
000D36r 2  A5 10                lda     DIMFLG
000D38r 2  D0 F7                bne     JER
000D3Ar 2  20 rr rr             jsr     GETARY
000D3Dr 2  A5 0F                lda     EOLPNTR
000D3Fr 2  A0 04                ldy     #$04
000D41r 2  D1 9E                cmp     (LOWTR),y
000D43r 2  D0 E7                bne     SUBERR
000D45r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D48r 2               
000D48r 2               ; ----------------------------------------------------------------------------
000D48r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D48r 2               ; ----------------------------------------------------------------------------
000D48r 2               MAKE_NEW_ARRAY:
000D48r 2  20 rr rr             jsr     GETARY
000D4Br 2  20 rr rr             jsr     REASON
000D4Er 2  A9 00                lda     #$00
000D50r 2  A8                   tay
000D51r 2  85 B1                sta     STRNG2+1
000D53r 2  A2 06                ldx     #BYTES_PER_ELEMENT
000D55r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D55r 2                       stx     STRNG2
000D55r 2               .endif
000D55r 2  A5 84                lda     VARNAM
000D57r 2  91 9E                sta     (LOWTR),y
000D59r 2               .ifndef CONFIG_SMALL
000D59r 2  10 01                bpl     L3078
000D5Br 2  CA                   dex
000D5Cr 2               L3078:
000D5Cr 2               .endif
000D5Cr 2  C8                   iny
000D5Dr 2  A5 85                lda     VARNAM+1
000D5Fr 2  91 9E                sta     (LOWTR),y
000D61r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D61r 2  10 02                bpl     L3081
000D63r 2  CA                   dex
000D64r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D64r 2  CA                   dex
000D65r 2                 .endif
000D65r 2               L3081:
000D65r 2  86 B0                stx     STRNG2
000D67r 2               .endif
000D67r 2  A5 0F                lda     EOLPNTR
000D69r 2  C8                   iny
000D6Ar 2  C8                   iny
000D6Br 2  C8                   iny
000D6Cr 2  91 9E                sta     (LOWTR),y
000D6Er 2               L308A:
000D6Er 2  A2 0B                ldx     #$0B
000D70r 2  A9 00                lda     #$00
000D72r 2  24 10                bit     DIMFLG
000D74r 2  50 08                bvc     L309A
000D76r 2  68                   pla
000D77r 2  18                   clc
000D78r 2  69 01                adc     #$01
000D7Ar 2  AA                   tax
000D7Br 2  68                   pla
000D7Cr 2  69 00                adc     #$00
000D7Er 2               L309A:
000D7Er 2  C8                   iny
000D7Fr 2  91 9E                sta     (LOWTR),y
000D81r 2  C8                   iny
000D82r 2  8A                   txa
000D83r 2  91 9E                sta     (LOWTR),y
000D85r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D88r 2  86 B0                stx     STRNG2
000D8Ar 2  85 B1                sta     STRNG2+1
000D8Cr 2  A4 61                ldy     INDEX
000D8Er 2  C6 0F                dec     EOLPNTR
000D90r 2  D0 DC                bne     L308A
000D92r 2  65 98                adc     HIGHDS+1
000D94r 2  B0 5D                bcs     GME
000D96r 2  85 98                sta     HIGHDS+1
000D98r 2  A8                   tay
000D99r 2  8A                   txa
000D9Ar 2  65 97                adc     HIGHDS
000D9Cr 2  90 03                bcc     L30BD
000D9Er 2  C8                   iny
000D9Fr 2  F0 52                beq     GME
000DA1r 2               L30BD:
000DA1r 2  20 rr rr             jsr     REASON
000DA4r 2  85 70                sta     STREND
000DA6r 2  84 71                sty     STREND+1
000DA8r 2  A9 00                lda     #$00
000DAAr 2  E6 B1                inc     STRNG2+1
000DACr 2  A4 B0                ldy     STRNG2
000DAEr 2  F0 05                beq     L30D1
000DB0r 2               L30CC:
000DB0r 2  88                   dey
000DB1r 2  91 97                sta     (HIGHDS),y
000DB3r 2  D0 FB                bne     L30CC
000DB5r 2               L30D1:
000DB5r 2  C6 98                dec     HIGHDS+1
000DB7r 2  C6 B1                dec     STRNG2+1
000DB9r 2  D0 F5                bne     L30CC
000DBBr 2  E6 98                inc     HIGHDS+1
000DBDr 2  38                   sec
000DBEr 2  A5 70                lda     STREND
000DC0r 2  E5 9E                sbc     LOWTR
000DC2r 2  A0 02                ldy     #$02
000DC4r 2  91 9E                sta     (LOWTR),y
000DC6r 2  A5 71                lda     STREND+1
000DC8r 2  C8                   iny
000DC9r 2  E5 9F                sbc     LOWTR+1
000DCBr 2  91 9E                sta     (LOWTR),y
000DCDr 2  A5 10                lda     DIMFLG
000DCFr 2  D0 62                bne     RTS9
000DD1r 2  C8                   iny
000DD2r 2               
000DD2r 2               ; ----------------------------------------------------------------------------
000DD2r 2               ; FIND SPECIFIED ARRAY ELEMENT
000DD2r 2               ;
000DD2r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000DD2r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000DD2r 2               ; ----------------------------------------------------------------------------
000DD2r 2               FIND_ARRAY_ELEMENT:
000DD2r 2  B1 9E                lda     (LOWTR),y
000DD4r 2  85 0F                sta     EOLPNTR
000DD6r 2  A9 00                lda     #$00
000DD8r 2  85 B0                sta     STRNG2
000DDAr 2               L30F6:
000DDAr 2  85 B1                sta     STRNG2+1
000DDCr 2  C8                   iny
000DDDr 2  68                   pla
000DDEr 2  AA                   tax
000DDFr 2  85 A3                sta     FAC_LAST-1
000DE1r 2  68                   pla
000DE2r 2  85 A4                sta     FAC_LAST
000DE4r 2  D1 9E                cmp     (LOWTR),y
000DE6r 2  90 0E                bcc     FAE2
000DE8r 2  D0 06                bne     GSE
000DEAr 2  C8                   iny
000DEBr 2  8A                   txa
000DECr 2  D1 9E                cmp     (LOWTR),y
000DEEr 2  90 07                bcc     FAE3
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               GSE:
000DF0r 2  4C rr rr             jmp     SUBERR
000DF3r 2               GME:
000DF3r 2  4C rr rr             jmp     MEMERR
000DF6r 2               ; ----------------------------------------------------------------------------
000DF6r 2               FAE2:
000DF6r 2  C8                   iny
000DF7r 2               FAE3:
000DF7r 2  A5 B1                lda     STRNG2+1
000DF9r 2  05 B0                ora     STRNG2
000DFBr 2  18                   clc
000DFCr 2  F0 0A                beq     L3124
000DFEr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E01r 2  8A                   txa
000E02r 2  65 A3                adc     FAC_LAST-1
000E04r 2  AA                   tax
000E05r 2  98                   tya
000E06r 2  A4 61                ldy     INDEX
000E08r 2               L3124:
000E08r 2  65 A4                adc     FAC_LAST
000E0Ar 2  86 B0                stx     STRNG2
000E0Cr 2  C6 0F                dec     EOLPNTR
000E0Er 2  D0 CA                bne     L30F6
000E10r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E10r 2                       asl     STRNG2
000E10r 2                       rol     a
000E10r 2                       bcs     GSE
000E10r 2                       asl     STRNG2
000E10r 2                       rol     a
000E10r 2                       bcs     GSE
000E10r 2                       tay
000E10r 2                       lda     STRNG2
000E10r 2               .else
000E10r 2                 .ifdef CONFIG_11A
000E10r 2  85 B1                sta     STRNG2+1
000E12r 2                 .endif
000E12r 2  A2 05                ldx     #BYTES_FP
000E14r 2                 .ifdef CONFIG_SMALL
000E14r 2                       lda     VARNAM+1
000E14r 2                 .else
000E14r 2  A5 84                lda     VARNAM
000E16r 2                 .endif
000E16r 2  10 01                bpl     L3135
000E18r 2  CA                   dex
000E19r 2               L3135:
000E19r 2                 .ifdef CONFIG_SMALL
000E19r 2                       stx     RESULT+1
000E19r 2                 .else
000E19r 2  A5 85                lda     VARNAM+1
000E1Br 2  10 02                bpl     L313B
000E1Dr 2  CA                   dex
000E1Er 2  CA                   dex
000E1Fr 2               L313B:
000E1Fr 2  86 67                stx     RESULT+2
000E21r 2                 .endif
000E21r 2  A9 00                lda     #$00
000E23r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000E26r 2  8A                   txa
000E27r 2               .endif
000E27r 2  65 97                adc     HIGHDS
000E29r 2  85 86                sta     VARPNT
000E2Br 2  98                   tya
000E2Cr 2  65 98                adc     HIGHDS+1
000E2Er 2  85 87                sta     VARPNT+1
000E30r 2  A8                   tay
000E31r 2  A5 86                lda     VARPNT
000E33r 2               RTS9:
000E33r 2  60                   rts
000E34r 2               
000E34r 2               ; ----------------------------------------------------------------------------
000E34r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000E34r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000E34r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000E34r 2               ; ----------------------------------------------------------------------------
000E34r 2               MULTIPLY_SUBSCRIPT:
000E34r 2  84 61                sty     INDEX
000E36r 2  B1 9E                lda     (LOWTR),y
000E38r 2  85 67                sta     RESULT_LAST-2
000E3Ar 2  88                   dey
000E3Br 2  B1 9E                lda     (LOWTR),y
000E3Dr 2               MULTIPLY_SUBS1:
000E3Dr 2  85 68                sta     RESULT_LAST-1
000E3Fr 2  A9 10                lda     #$10
000E41r 2  85 9C                sta     INDX
000E43r 2  A2 00                ldx     #$00
000E45r 2  A0 00                ldy     #$00
000E47r 2               L3163:
000E47r 2  8A                   txa
000E48r 2  0A                   asl     a
000E49r 2  AA                   tax
000E4Ar 2  98                   tya
000E4Br 2  2A                   rol     a
000E4Cr 2  A8                   tay
000E4Dr 2  B0 A4                bcs     GME
000E4Fr 2  06 B0                asl     STRNG2
000E51r 2  26 B1                rol     STRNG2+1
000E53r 2  90 0B                bcc     L317C
000E55r 2  18                   clc
000E56r 2  8A                   txa
000E57r 2  65 67                adc     RESULT_LAST-2
000E59r 2  AA                   tax
000E5Ar 2  98                   tya
000E5Br 2  65 68                adc     RESULT_LAST-1
000E5Dr 2  A8                   tay
000E5Er 2  B0 93                bcs     GME
000E60r 2               L317C:
000E60r 2  C6 9C                dec     INDX
000E62r 2  D0 E3                bne     L3163
000E64r 2  60                   rts
000E65r 2               
000E65r 2               
000E65r 1               .include "misc2.s"
000E65r 2               .segment "CODE"
000E65r 2               
000E65r 2               ; ----------------------------------------------------------------------------
000E65r 2               ; "FRE" FUNCTION
000E65r 2               ;
000E65r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E65r 2               ; ----------------------------------------------------------------------------
000E65r 2               FRE:
000E65r 2  A5 11                lda     VALTYP
000E67r 2  F0 03                beq     L3188
000E69r 2  20 rr rr             jsr     FREFAC
000E6Cr 2               L3188:
000E6Cr 2  20 rr rr             jsr     GARBAG
000E6Fr 2  38                   sec
000E70r 2  A5 72                lda     FRETOP
000E72r 2  E5 70                sbc     STREND
000E74r 2  A8                   tay
000E75r 2  A5 73                lda     FRETOP+1
000E77r 2  E5 71                sbc     STREND+1
000E79r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E79r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E79r 2               
000E79r 2               ; ----------------------------------------------------------------------------
000E79r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E79r 2               ; ----------------------------------------------------------------------------
000E79r 2               GIVAYF:
000E79r 2  A2 00                ldx     #$00
000E7Br 2  86 11                stx     VALTYP
000E7Dr 2  85 A1                sta     FAC+1
000E7Fr 2  84 A2                sty     FAC+2
000E81r 2  A2 90                ldx     #$90
000E83r 2  4C rr rr             jmp     FLOAT1
000E86r 2               POS:
000E86r 2  A4 50                ldy     POSX
000E88r 2               
000E88r 2               ; ----------------------------------------------------------------------------
000E88r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E88r 2               ; ----------------------------------------------------------------------------
000E88r 2               SNGFLT:
000E88r 2  A9 00                lda     #$00
000E8Ar 2  F0 ED                beq     GIVAYF
000E8Cr 2               
000E8Cr 2               ; ----------------------------------------------------------------------------
000E8Cr 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E8Cr 2               ; GIVING ERROR IF DIRECT MODE
000E8Cr 2               ; ----------------------------------------------------------------------------
000E8Cr 2               ERRDIR:
000E8Cr 2  A6 79                ldx     CURLIN+1
000E8Er 2  E8                   inx
000E8Fr 2  D0 A2                bne     RTS9
000E91r 2  A2 95                ldx     #ERR_ILLDIR
000E93r 2               .ifdef CONFIG_2
000E93r 2  2C                   .byte   $2C
000E94r 2               LD288:
000E94r 2  A2 E0                ldx     #ERR_UNDEFFN
000E96r 2               .endif
000E96r 2               L31AF:
000E96r 2  4C rr rr             jmp     ERROR
000E99r 2               DEF:
000E99r 2  20 rr rr             jsr     FNC
000E9Cr 2  20 rr rr             jsr     ERRDIR
000E9Fr 2  20 rr rr             jsr     CHKOPN
000EA2r 2  A9 80                lda     #$80
000EA4r 2  85 14                sta     SUBFLG
000EA6r 2  20 rr rr             jsr     PTRGET
000EA9r 2  20 rr rr             jsr     CHKNUM
000EACr 2  20 rr rr             jsr     CHKCLS
000EAFr 2  A9 A9                lda     #TOKEN_EQUAL
000EB1r 2  20 rr rr             jsr     SYNCHR
000EB4r 2               .ifndef CONFIG_SMALL
000EB4r 2  48                   pha
000EB5r 2               .endif
000EB5r 2  A5 87                lda     VARPNT+1
000EB7r 2  48                   pha
000EB8r 2  A5 86                lda     VARPNT
000EBAr 2  48                   pha
000EBBr 2  A5 BA                lda     TXTPTR+1
000EBDr 2  48                   pha
000EBEr 2  A5 B9                lda     TXTPTR
000EC0r 2  48                   pha
000EC1r 2  20 rr rr             jsr     DATA
000EC4r 2  4C rr rr             jmp     L3250
000EC7r 2               FNC:
000EC7r 2  A9 9C                lda     #TOKEN_FN
000EC9r 2  20 rr rr             jsr     SYNCHR
000ECCr 2  09 80                ora     #$80
000ECEr 2  85 14                sta     SUBFLG
000ED0r 2  20 rr rr             jsr     PTRGET3
000ED3r 2  85 8D                sta     FNCNAM
000ED5r 2  84 8E                sty     FNCNAM+1
000ED7r 2  4C rr rr             jmp     CHKNUM
000EDAr 2               L31F3:
000EDAr 2  20 rr rr             jsr     FNC
000EDDr 2  A5 8E                lda     FNCNAM+1
000EDFr 2  48                   pha
000EE0r 2  A5 8D                lda     FNCNAM
000EE2r 2  48                   pha
000EE3r 2  20 rr rr             jsr     PARCHK
000EE6r 2  20 rr rr             jsr     CHKNUM
000EE9r 2  68                   pla
000EEAr 2  85 8D                sta     FNCNAM
000EECr 2  68                   pla
000EEDr 2  85 8E                sta     FNCNAM+1
000EEFr 2  A0 02                ldy     #$02
000EF1r 2               .ifndef CONFIG_2
000EF1r 2                       ldx     #ERR_UNDEFFN
000EF1r 2               .endif
000EF1r 2  B1 8D                lda     (FNCNAM),y
000EF3r 2               .ifndef CONFIG_2
000EF3r 2                       beq     L31AF
000EF3r 2               .endif
000EF3r 2  85 86                sta     VARPNT
000EF5r 2  AA                   tax
000EF6r 2  C8                   iny
000EF7r 2  B1 8D                lda     (FNCNAM),y
000EF9r 2               .ifdef CONFIG_2
000EF9r 2  F0 99                beq     LD288
000EFBr 2               .endif
000EFBr 2  85 87                sta     VARPNT+1
000EFDr 2               .ifndef CONFIG_SMALL
000EFDr 2  C8                   iny
000EFEr 2               .endif
000EFEr 2               L3219:
000EFEr 2  B1 86                lda     (VARPNT),y
000F00r 2  48                   pha
000F01r 2  88                   dey
000F02r 2  10 FA                bpl     L3219
000F04r 2  A4 87                ldy     VARPNT+1
000F06r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000F09r 2  A5 BA                lda     TXTPTR+1
000F0Br 2  48                   pha
000F0Cr 2  A5 B9                lda     TXTPTR
000F0Er 2  48                   pha
000F0Fr 2  B1 8D                lda     (FNCNAM),y
000F11r 2  85 B9                sta     TXTPTR
000F13r 2  C8                   iny
000F14r 2  B1 8D                lda     (FNCNAM),y
000F16r 2  85 BA                sta     TXTPTR+1
000F18r 2  A5 87                lda     VARPNT+1
000F1Ar 2  48                   pha
000F1Br 2  A5 86                lda     VARPNT
000F1Dr 2  48                   pha
000F1Er 2  20 rr rr             jsr     FRMNUM
000F21r 2  68                   pla
000F22r 2  85 8D                sta     FNCNAM
000F24r 2  68                   pla
000F25r 2  85 8E                sta     FNCNAM+1
000F27r 2  20 B8 00             jsr     CHRGOT
000F2Ar 2  F0 03                beq     L324A
000F2Cr 2  4C rr rr             jmp     SYNERR
000F2Fr 2               L324A:
000F2Fr 2  68                   pla
000F30r 2  85 B9                sta     TXTPTR
000F32r 2  68                   pla
000F33r 2  85 BA                sta     TXTPTR+1
000F35r 2               L3250:
000F35r 2  A0 00                ldy     #$00
000F37r 2  68                   pla
000F38r 2  91 8D                sta     (FNCNAM),y
000F3Ar 2  68                   pla
000F3Br 2  C8                   iny
000F3Cr 2  91 8D                sta     (FNCNAM),y
000F3Er 2  68                   pla
000F3Fr 2  C8                   iny
000F40r 2  91 8D                sta     (FNCNAM),y
000F42r 2  68                   pla
000F43r 2  C8                   iny
000F44r 2  91 8D                sta     (FNCNAM),y
000F46r 2               .ifndef CONFIG_SMALL
000F46r 2  68                   pla
000F47r 2  C8                   iny
000F48r 2  91 8D                sta     (FNCNAM),y
000F4Ar 2               .endif
000F4Ar 2  60                   rts
000F4Br 2               
000F4Br 1               .include "string.s"
000F4Br 2               .segment "CODE"
000F4Br 2               ; ----------------------------------------------------------------------------
000F4Br 2               ; "STR$" FUNCTION
000F4Br 2               ; ----------------------------------------------------------------------------
000F4Br 2               STR:
000F4Br 2  20 rr rr             jsr     CHKNUM
000F4Er 2  A0 00                ldy     #$00
000F50r 2  20 rr rr             jsr     FOUT1
000F53r 2  68                   pla
000F54r 2  68                   pla
000F55r 2               LD353:
000F55r 2  A9 FF                lda     #$FF
000F57r 2  A0 00                ldy     #$00
000F59r 2  F0 12                beq     STRLIT
000F5Br 2               
000F5Br 2               ; ----------------------------------------------------------------------------
000F5Br 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F5Br 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F5Br 2               ; ----------------------------------------------------------------------------
000F5Br 2               STRINI:
000F5Br 2  A6 A3                ldx     FAC_LAST-1
000F5Dr 2  A4 A4                ldy     FAC_LAST
000F5Fr 2  86 8F                stx     DSCPTR
000F61r 2  84 90                sty     DSCPTR+1
000F63r 2               
000F63r 2               ; ----------------------------------------------------------------------------
000F63r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F63r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F63r 2               ; ----------------------------------------------------------------------------
000F63r 2               STRSPA:
000F63r 2  20 rr rr             jsr     GETSPA
000F66r 2  86 A1                stx     FAC+1
000F68r 2  84 A2                sty     FAC+2
000F6Ar 2  85 A0                sta     FAC
000F6Cr 2  60                   rts
000F6Dr 2               
000F6Dr 2               ; ----------------------------------------------------------------------------
000F6Dr 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F6Dr 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F6Dr 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F6Dr 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F6Dr 2               ; ----------------------------------------------------------------------------
000F6Dr 2               STRLIT:
000F6Dr 2  A2 22                ldx     #$22
000F6Fr 2  86 0D                stx     CHARAC
000F71r 2  86 0E                stx     ENDCHR
000F73r 2               
000F73r 2               ; ----------------------------------------------------------------------------
000F73r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F73r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F73r 2               ;
000F73r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F73r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F73r 2               ; ----------------------------------------------------------------------------
000F73r 2               STRLT2:
000F73r 2  85 AE                sta     STRNG1
000F75r 2  84 AF                sty     STRNG1+1
000F77r 2  85 A1                sta     FAC+1
000F79r 2  84 A2                sty     FAC+2
000F7Br 2  A0 FF                ldy     #$FF
000F7Dr 2               L3298:
000F7Dr 2  C8                   iny
000F7Er 2  B1 AE                lda     (STRNG1),y
000F80r 2  F0 0C                beq     L32A9
000F82r 2  C5 0D                cmp     CHARAC
000F84r 2  F0 04                beq     L32A5
000F86r 2  C5 0E                cmp     ENDCHR
000F88r 2  D0 F3                bne     L3298
000F8Ar 2               L32A5:
000F8Ar 2  C9 22                cmp     #$22
000F8Cr 2  F0 01                beq     L32AA
000F8Er 2               L32A9:
000F8Er 2  18                   clc
000F8Fr 2               L32AA:
000F8Fr 2  84 A0                sty     FAC
000F91r 2  98                   tya
000F92r 2  65 AE                adc     STRNG1
000F94r 2  85 B0                sta     STRNG2
000F96r 2  A6 AF                ldx     STRNG1+1
000F98r 2  90 01                bcc     L32B6
000F9Ar 2  E8                   inx
000F9Br 2               L32B6:
000F9Br 2  86 B1                stx     STRNG2+1
000F9Dr 2  A5 AF                lda     STRNG1+1
000F9Fr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F9Fr 2  F0 04                beq     LD399
000FA1r 2  C9 02                cmp     #>INPUTBUFFER
000FA3r 2               .endif
000FA3r 2  D0 0B                bne     PUTNEW
000FA5r 2               LD399:
000FA5r 2  98                   tya
000FA6r 2  20 rr rr             jsr     STRINI
000FA9r 2  A6 AE                ldx     STRNG1
000FABr 2  A4 AF                ldy     STRNG1+1
000FADr 2  20 rr rr             jsr     MOVSTR
000FB0r 2               
000FB0r 2               ; ----------------------------------------------------------------------------
000FB0r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000FB0r 2               ;
000FB0r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000FB0r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000FB0r 2               ; ----------------------------------------------------------------------------
000FB0r 2               PUTNEW:
000FB0r 2  A6 55                ldx     TEMPPT
000FB2r 2  E0 61                cpx     #TEMPST+9
000FB4r 2  D0 05                bne     PUTEMP
000FB6r 2  A2 BF                ldx     #ERR_FRMCPX
000FB8r 2               JERR:
000FB8r 2  4C rr rr             jmp     ERROR
000FBBr 2               PUTEMP:
000FBBr 2  A5 A0                lda     FAC
000FBDr 2  95 00                sta     0,x
000FBFr 2  A5 A1                lda     FAC+1
000FC1r 2  95 01                sta     1,x
000FC3r 2  A5 A2                lda     FAC+2
000FC5r 2  95 02                sta     2,x
000FC7r 2  A0 00                ldy     #$00
000FC9r 2  86 A3                stx     FAC_LAST-1
000FCBr 2  84 A4                sty     FAC_LAST
000FCDr 2               .ifdef CONFIG_2
000FCDr 2  84 AF                sty     FACEXTENSION
000FCFr 2               .endif
000FCFr 2  88                   dey
000FD0r 2  84 11                sty     VALTYP
000FD2r 2  86 56                stx     LASTPT
000FD4r 2  E8                   inx
000FD5r 2  E8                   inx
000FD6r 2  E8                   inx
000FD7r 2  86 55                stx     TEMPPT
000FD9r 2  60                   rts
000FDAr 2               
000FDAr 2               ; ----------------------------------------------------------------------------
000FDAr 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000FDAr 2               ; (A)=# BYTES SPACE TO MAKE
000FDAr 2               ;
000FDAr 2               ; RETURN WITH (A) SAME,
000FDAr 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000FDAr 2               ; ----------------------------------------------------------------------------
000FDAr 2               GETSPA:
000FDAr 2  46 13                lsr     DATAFLG
000FDCr 2               L32F1:
000FDCr 2  48                   pha
000FDDr 2  49 FF                eor     #$FF
000FDFr 2  38                   sec
000FE0r 2  65 72                adc     FRETOP
000FE2r 2  A4 73                ldy     FRETOP+1
000FE4r 2  B0 01                bcs     L32FC
000FE6r 2  88                   dey
000FE7r 2               L32FC:
000FE7r 2  C4 71                cpy     STREND+1
000FE9r 2  90 11                bcc     L3311
000FEBr 2  D0 04                bne     L3306
000FEDr 2  C5 70                cmp     STREND
000FEFr 2  90 0B                bcc     L3311
000FF1r 2               L3306:
000FF1r 2  85 72                sta     FRETOP
000FF3r 2  84 73                sty     FRETOP+1
000FF5r 2  85 74                sta     FRESPC
000FF7r 2  84 75                sty     FRESPC+1
000FF9r 2  AA                   tax
000FFAr 2  68                   pla
000FFBr 2  60                   rts
000FFCr 2               L3311:
000FFCr 2  A2 4D                ldx     #ERR_MEMFULL
000FFEr 2  A5 13                lda     DATAFLG
001000r 2  30 B6                bmi     JERR
001002r 2  20 rr rr             jsr     GARBAG
001005r 2  A9 80                lda     #$80
001007r 2  85 13                sta     DATAFLG
001009r 2  68                   pla
00100Ar 2  D0 D0                bne     L32F1
00100Cr 2               
00100Cr 2               ; ----------------------------------------------------------------------------
00100Cr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00100Cr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00100Cr 2               ; BELOW STRING AREA DOWN TO STREND.
00100Cr 2               ; ----------------------------------------------------------------------------
00100Cr 2               GARBAG:
00100Cr 2               
00100Cr 2               .ifdef CONST_MEMSIZ
00100Cr 2                       ldx     #<CONST_MEMSIZ
00100Cr 2                       lda     #>CONST_MEMSIZ
00100Cr 2               .else
00100Cr 2  A6 76                ldx     MEMSIZ
00100Er 2  A5 77                lda     MEMSIZ+1
001010r 2               .endif
001010r 2               FINDHIGHESTSTRING:
001010r 2  86 72                stx     FRETOP
001012r 2  85 73                sta     FRETOP+1
001014r 2  A0 00                ldy     #$00
001016r 2  84 8E                sty     FNCNAM+1
001018r 2               .ifdef CONFIG_2
001018r 2  84 8D                sty     FNCNAM	; GC bugfix!
00101Ar 2               .endif
00101Ar 2  A5 70                lda     STREND
00101Cr 2  A6 71                ldx     STREND+1
00101Er 2  85 9E                sta     LOWTR
001020r 2  86 9F                stx     LOWTR+1
001022r 2  A9 58                lda     #TEMPST
001024r 2  A2 00                ldx     #$00
001026r 2  85 61                sta     INDEX
001028r 2  86 62                stx     INDEX+1
00102Ar 2               L333D:
00102Ar 2  C5 55                cmp     TEMPPT
00102Cr 2  F0 05                beq     L3346
00102Er 2  20 rr rr             jsr     CHECK_VARIABLE
001031r 2  F0 F7                beq     L333D
001033r 2               L3346:
001033r 2  A9 07                lda     #BYTES_PER_VARIABLE
001035r 2  85 92                sta     DSCLEN
001037r 2  A5 6C                lda     VARTAB
001039r 2  A6 6D                ldx     VARTAB+1
00103Br 2  85 61                sta     INDEX
00103Dr 2  86 62                stx     INDEX+1
00103Fr 2               L3352:
00103Fr 2  E4 6F                cpx     ARYTAB+1
001041r 2  D0 04                bne     L335A
001043r 2  C5 6E                cmp     ARYTAB
001045r 2  F0 05                beq     L335F
001047r 2               L335A:
001047r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
00104Ar 2  F0 F3                beq     L3352
00104Cr 2               L335F:
00104Cr 2  85 97                sta     HIGHDS
00104Er 2  86 98                stx     HIGHDS+1
001050r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001052r 2  85 92                sta     DSCLEN
001054r 2               L3367:
001054r 2  A5 97                lda     HIGHDS
001056r 2  A6 98                ldx     HIGHDS+1
001058r 2               L336B:
001058r 2  E4 71                cpx     STREND+1
00105Ar 2  D0 07                bne     L3376
00105Cr 2  C5 70                cmp     STREND
00105Er 2  D0 03                bne     L3376
001060r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
001063r 2               L3376:
001063r 2  85 61                sta     INDEX
001065r 2  86 62                stx     INDEX+1
001067r 2               .ifdef CONFIG_SMALL
001067r 2                       ldy     #$01
001067r 2               .else
001067r 2  A0 00                ldy     #$00
001069r 2  B1 61                lda     (INDEX),y
00106Br 2  AA                   tax
00106Cr 2  C8                   iny
00106Dr 2               .endif
00106Dr 2  B1 61                lda     (INDEX),y
00106Fr 2  08                   php
001070r 2  C8                   iny
001071r 2  B1 61                lda     (INDEX),y
001073r 2  65 97                adc     HIGHDS
001075r 2  85 97                sta     HIGHDS
001077r 2  C8                   iny
001078r 2  B1 61                lda     (INDEX),y
00107Ar 2  65 98                adc     HIGHDS+1
00107Cr 2  85 98                sta     HIGHDS+1
00107Er 2  28                   plp
00107Fr 2  10 D3                bpl     L3367
001081r 2               .ifndef CONFIG_SMALL
001081r 2  8A                   txa
001082r 2  30 D0                bmi     L3367
001084r 2               .endif
001084r 2  C8                   iny
001085r 2  B1 61                lda     (INDEX),y
001087r 2               .ifdef CONFIG_CBM1_PATCHES
001087r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
001087r 2               .else
001087r 2                 .ifdef CONFIG_11
001087r 2  A0 00                ldy     #$00	; GC bugfix
001089r 2                 .endif
001089r 2  0A                   asl     a
00108Ar 2  69 05                adc     #$05
00108Cr 2               .endif
00108Cr 2  65 61                adc     INDEX
00108Er 2  85 61                sta     INDEX
001090r 2  90 02                bcc     L33A7
001092r 2  E6 62                inc     INDEX+1
001094r 2               L33A7:
001094r 2  A6 62                ldx     INDEX+1
001096r 2               L33A9:
001096r 2  E4 98                cpx     HIGHDS+1
001098r 2  D0 04                bne     L33B1
00109Ar 2  C5 97                cmp     HIGHDS
00109Cr 2  F0 BA                beq     L336B
00109Er 2               L33B1:
00109Er 2  20 rr rr             jsr     CHECK_VARIABLE
0010A1r 2  F0 F3                beq     L33A9
0010A3r 2               
0010A3r 2               ; ----------------------------------------------------------------------------
0010A3r 2               ; PROCESS A SIMPLE VARIABLE
0010A3r 2               ; ----------------------------------------------------------------------------
0010A3r 2               CHECK_SIMPLE_VARIABLE:
0010A3r 2               .ifndef CONFIG_SMALL
0010A3r 2  B1 61                lda     (INDEX),y
0010A5r 2  30 35                bmi     CHECK_BUMP
0010A7r 2               .endif
0010A7r 2  C8                   iny
0010A8r 2  B1 61                lda     (INDEX),y
0010AAr 2  10 30                bpl     CHECK_BUMP
0010ACr 2  C8                   iny
0010ADr 2               
0010ADr 2               ; ----------------------------------------------------------------------------
0010ADr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
0010ADr 2               ; ----------------------------------------------------------------------------
0010ADr 2               CHECK_VARIABLE:
0010ADr 2  B1 61                lda     (INDEX),y
0010AFr 2  F0 2B                beq     CHECK_BUMP
0010B1r 2  C8                   iny
0010B2r 2  B1 61                lda     (INDEX),y
0010B4r 2  AA                   tax
0010B5r 2  C8                   iny
0010B6r 2  B1 61                lda     (INDEX),y
0010B8r 2  C5 73                cmp     FRETOP+1
0010BAr 2  90 06                bcc     L33D5
0010BCr 2  D0 1E                bne     CHECK_BUMP
0010BEr 2  E4 72                cpx     FRETOP
0010C0r 2  B0 1A                bcs     CHECK_BUMP
0010C2r 2               L33D5:
0010C2r 2  C5 9F                cmp     LOWTR+1
0010C4r 2  90 16                bcc     CHECK_BUMP
0010C6r 2  D0 04                bne     L33DF
0010C8r 2  E4 9E                cpx     LOWTR
0010CAr 2  90 10                bcc     CHECK_BUMP
0010CCr 2               L33DF:
0010CCr 2  86 9E                stx     LOWTR
0010CEr 2  85 9F                sta     LOWTR+1
0010D0r 2  A5 61                lda     INDEX
0010D2r 2  A6 62                ldx     INDEX+1
0010D4r 2  85 8D                sta     FNCNAM
0010D6r 2  86 8E                stx     FNCNAM+1
0010D8r 2  A5 92                lda     DSCLEN
0010DAr 2  85 94                sta     Z52
0010DCr 2               
0010DCr 2               ; ----------------------------------------------------------------------------
0010DCr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
0010DCr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
0010DCr 2               ; ----------------------------------------------------------------------------
0010DCr 2               CHECK_BUMP:
0010DCr 2  A5 92                lda     DSCLEN
0010DEr 2  18                   clc
0010DFr 2  65 61                adc     INDEX
0010E1r 2  85 61                sta     INDEX
0010E3r 2  90 02                bcc     L33FA
0010E5r 2  E6 62                inc     INDEX+1
0010E7r 2               L33FA:
0010E7r 2  A6 62                ldx     INDEX+1
0010E9r 2  A0 00                ldy     #$00
0010EBr 2  60                   rts
0010ECr 2               
0010ECr 2               ; ----------------------------------------------------------------------------
0010ECr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
0010ECr 2               ; TO TOP AND GO BACK FOR ANOTHER
0010ECr 2               ; ----------------------------------------------------------------------------
0010ECr 2               MOVE_HIGHEST_STRING_TO_TOP:
0010ECr 2               .ifdef CONFIG_2
0010ECr 2  A5 8E                lda     FNCNAM+1	; GC bugfix
0010EEr 2  05 8D                ora     FNCNAM
0010F0r 2               .else
0010F0r 2                       ldx     FNCNAM+1
0010F0r 2               .endif
0010F0r 2  F0 F5                beq     L33FA
0010F2r 2  A5 94                lda     Z52
0010F4r 2               .ifndef CONFIG_10A
0010F4r 2                       sbc     #$03
0010F4r 2               .else
0010F4r 2  29 04                and     #$04
0010F6r 2               .endif
0010F6r 2  4A                   lsr     a
0010F7r 2  A8                   tay
0010F8r 2  85 94                sta     Z52
0010FAr 2  B1 8D                lda     (FNCNAM),y
0010FCr 2  65 9E                adc     LOWTR
0010FEr 2  85 99                sta     HIGHTR
001100r 2  A5 9F                lda     LOWTR+1
001102r 2  69 00                adc     #$00
001104r 2  85 9A                sta     HIGHTR+1
001106r 2  A5 72                lda     FRETOP
001108r 2  A6 73                ldx     FRETOP+1
00110Ar 2  85 97                sta     HIGHDS
00110Cr 2  86 98                stx     HIGHDS+1
00110Er 2  20 rr rr             jsr     BLTU2
001111r 2  A4 94                ldy     Z52
001113r 2  C8                   iny
001114r 2  A5 97                lda     HIGHDS
001116r 2  91 8D                sta     (FNCNAM),y
001118r 2  AA                   tax
001119r 2  E6 98                inc     HIGHDS+1
00111Br 2  A5 98                lda     HIGHDS+1
00111Dr 2  C8                   iny
00111Er 2  91 8D                sta     (FNCNAM),y
001120r 2  4C rr rr             jmp     FINDHIGHESTSTRING
001123r 2               
001123r 2               ; ----------------------------------------------------------------------------
001123r 2               ; CONCATENATE TWO STRINGS
001123r 2               ; ----------------------------------------------------------------------------
001123r 2               CAT:
001123r 2  A5 A4                lda     FAC_LAST
001125r 2  48                   pha
001126r 2  A5 A3                lda     FAC_LAST-1
001128r 2  48                   pha
001129r 2  20 rr rr             jsr     FRM_ELEMENT
00112Cr 2  20 rr rr             jsr     CHKSTR
00112Fr 2  68                   pla
001130r 2  85 AE                sta     STRNG1
001132r 2  68                   pla
001133r 2  85 AF                sta     STRNG1+1
001135r 2  A0 00                ldy     #$00
001137r 2  B1 AE                lda     (STRNG1),y
001139r 2  18                   clc
00113Ar 2  71 A3                adc     (FAC_LAST-1),y
00113Cr 2  90 05                bcc     L3454
00113Er 2  A2 B0                ldx     #ERR_STRLONG
001140r 2  4C rr rr             jmp     ERROR
001143r 2               L3454:
001143r 2  20 rr rr             jsr     STRINI
001146r 2  20 rr rr             jsr     MOVINS
001149r 2  A5 8F                lda     DSCPTR
00114Br 2  A4 90                ldy     DSCPTR+1
00114Dr 2  20 rr rr             jsr     FRETMP
001150r 2  20 rr rr             jsr     MOVSTR1
001153r 2  A5 AE                lda     STRNG1
001155r 2  A4 AF                ldy     STRNG1+1
001157r 2  20 rr rr             jsr     FRETMP
00115Ar 2  20 rr rr             jsr     PUTNEW
00115Dr 2  4C rr rr             jmp     FRMEVL2
001160r 2               
001160r 2               ; ----------------------------------------------------------------------------
001160r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001160r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001160r 2               ; ----------------------------------------------------------------------------
001160r 2               MOVINS:
001160r 2  A0 00                ldy     #$00
001162r 2  B1 AE                lda     (STRNG1),y
001164r 2  48                   pha
001165r 2  C8                   iny
001166r 2  B1 AE                lda     (STRNG1),y
001168r 2  AA                   tax
001169r 2  C8                   iny
00116Ar 2  B1 AE                lda     (STRNG1),y
00116Cr 2  A8                   tay
00116Dr 2  68                   pla
00116Er 2               
00116Er 2               ; ----------------------------------------------------------------------------
00116Er 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00116Er 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00116Er 2               ; ----------------------------------------------------------------------------
00116Er 2               MOVSTR:
00116Er 2  86 61                stx     INDEX
001170r 2  84 62                sty     INDEX+1
001172r 2               MOVSTR1:
001172r 2  A8                   tay
001173r 2  F0 0A                beq     L3490
001175r 2  48                   pha
001176r 2               L3487:
001176r 2  88                   dey
001177r 2  B1 61                lda     (INDEX),y
001179r 2  91 74                sta     (FRESPC),y
00117Br 2  98                   tya
00117Cr 2  D0 F8                bne     L3487
00117Er 2  68                   pla
00117Fr 2               L3490:
00117Fr 2  18                   clc
001180r 2  65 74                adc     FRESPC
001182r 2  85 74                sta     FRESPC
001184r 2  90 02                bcc     L3499
001186r 2  E6 75                inc     FRESPC+1
001188r 2               L3499:
001188r 2  60                   rts
001189r 2               
001189r 2               ; ----------------------------------------------------------------------------
001189r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001189r 2               ; ----------------------------------------------------------------------------
001189r 2               FRESTR:
001189r 2  20 rr rr             jsr     CHKSTR
00118Cr 2               
00118Cr 2               ; ----------------------------------------------------------------------------
00118Cr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00118Cr 2               ; A TEMPORARY STRING, RELEASE IT.
00118Cr 2               ; ----------------------------------------------------------------------------
00118Cr 2               FREFAC:
00118Cr 2  A5 A3                lda     FAC_LAST-1
00118Er 2  A4 A4                ldy     FAC_LAST
001190r 2               
001190r 2               ; ----------------------------------------------------------------------------
001190r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001190r 2               ; A TEMPORARY STRING, RELEASE IT.
001190r 2               ; ----------------------------------------------------------------------------
001190r 2               FRETMP:
001190r 2  85 61                sta     INDEX
001192r 2  84 62                sty     INDEX+1
001194r 2  20 rr rr             jsr     FRETMS
001197r 2  08                   php
001198r 2  A0 00                ldy     #$00
00119Ar 2  B1 61                lda     (INDEX),y
00119Cr 2  48                   pha
00119Dr 2  C8                   iny
00119Er 2  B1 61                lda     (INDEX),y
0011A0r 2  AA                   tax
0011A1r 2  C8                   iny
0011A2r 2  B1 61                lda     (INDEX),y
0011A4r 2  A8                   tay
0011A5r 2  68                   pla
0011A6r 2  28                   plp
0011A7r 2  D0 13                bne     L34CD
0011A9r 2  C4 73                cpy     FRETOP+1
0011ABr 2  D0 0F                bne     L34CD
0011ADr 2  E4 72                cpx     FRETOP
0011AFr 2  D0 0B                bne     L34CD
0011B1r 2  48                   pha
0011B2r 2  18                   clc
0011B3r 2  65 72                adc     FRETOP
0011B5r 2  85 72                sta     FRETOP
0011B7r 2  90 02                bcc     L34CC
0011B9r 2  E6 73                inc     FRETOP+1
0011BBr 2               L34CC:
0011BBr 2  68                   pla
0011BCr 2               L34CD:
0011BCr 2  86 61                stx     INDEX
0011BEr 2  84 62                sty     INDEX+1
0011C0r 2  60                   rts
0011C1r 2               
0011C1r 2               ; ----------------------------------------------------------------------------
0011C1r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
0011C1r 2               ; ----------------------------------------------------------------------------
0011C1r 2               FRETMS:
0011C1r 2               .ifdef KBD
0011C1r 2                       cpy     #$00
0011C1r 2               .else
0011C1r 2  C4 57                cpy     LASTPT+1
0011C3r 2               .endif
0011C3r 2  D0 0C                bne     L34E2
0011C5r 2  C5 56                cmp     LASTPT
0011C7r 2  D0 08                bne     L34E2
0011C9r 2  85 55                sta     TEMPPT
0011CBr 2  E9 03                sbc     #$03
0011CDr 2  85 56                sta     LASTPT
0011CFr 2  A0 00                ldy     #$00
0011D1r 2               L34E2:
0011D1r 2  60                   rts
0011D2r 2               
0011D2r 2               ; ----------------------------------------------------------------------------
0011D2r 2               ; "CHR$" FUNCTION
0011D2r 2               ; ----------------------------------------------------------------------------
0011D2r 2               CHRSTR:
0011D2r 2  20 rr rr             jsr     CONINT
0011D5r 2  8A                   txa
0011D6r 2  48                   pha
0011D7r 2  A9 01                lda     #$01
0011D9r 2  20 rr rr             jsr     STRSPA
0011DCr 2  68                   pla
0011DDr 2  A0 00                ldy     #$00
0011DFr 2  91 A1                sta     (FAC+1),y
0011E1r 2  68                   pla
0011E2r 2  68                   pla
0011E3r 2  4C rr rr             jmp     PUTNEW
0011E6r 2               
0011E6r 2               ; ----------------------------------------------------------------------------
0011E6r 2               ; "LEFT$" FUNCTION
0011E6r 2               ; ----------------------------------------------------------------------------
0011E6r 2               LEFTSTR:
0011E6r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011E9r 2  D1 8F                cmp     (DSCPTR),y
0011EBr 2  98                   tya
0011ECr 2               SUBSTRING1:
0011ECr 2  90 04                bcc     L3503
0011EEr 2  B1 8F                lda     (DSCPTR),y
0011F0r 2  AA                   tax
0011F1r 2  98                   tya
0011F2r 2               L3503:
0011F2r 2  48                   pha
0011F3r 2               SUBSTRING2:
0011F3r 2  8A                   txa
0011F4r 2               SUBSTRING3:
0011F4r 2  48                   pha
0011F5r 2  20 rr rr             jsr     STRSPA
0011F8r 2  A5 8F                lda     DSCPTR
0011FAr 2  A4 90                ldy     DSCPTR+1
0011FCr 2  20 rr rr             jsr     FRETMP
0011FFr 2  68                   pla
001200r 2  A8                   tay
001201r 2  68                   pla
001202r 2  18                   clc
001203r 2  65 61                adc     INDEX
001205r 2  85 61                sta     INDEX
001207r 2  90 02                bcc     L351C
001209r 2  E6 62                inc     INDEX+1
00120Br 2               L351C:
00120Br 2  98                   tya
00120Cr 2  20 rr rr             jsr     MOVSTR1
00120Fr 2  4C rr rr             jmp     PUTNEW
001212r 2               
001212r 2               ; ----------------------------------------------------------------------------
001212r 2               ; "RIGHT$" FUNCTION
001212r 2               ; ----------------------------------------------------------------------------
001212r 2               RIGHTSTR:
001212r 2  20 rr rr             jsr     SUBSTRING_SETUP
001215r 2  18                   clc
001216r 2  F1 8F                sbc     (DSCPTR),y
001218r 2  49 FF                eor     #$FF
00121Ar 2  4C rr rr             jmp     SUBSTRING1
00121Dr 2               
00121Dr 2               ; ----------------------------------------------------------------------------
00121Dr 2               ; "MID$" FUNCTION
00121Dr 2               ; ----------------------------------------------------------------------------
00121Dr 2               MIDSTR:
00121Dr 2  A9 FF                lda     #$FF
00121Fr 2  85 A4                sta     FAC_LAST
001221r 2  20 B8 00             jsr     CHRGOT
001224r 2  C9 29                cmp     #$29
001226r 2  F0 06                beq     L353F
001228r 2  20 rr rr             jsr     CHKCOM
00122Br 2  20 rr rr             jsr     GETBYT
00122Er 2               L353F:
00122Er 2  20 rr rr             jsr     SUBSTRING_SETUP
001231r 2               .ifdef CONFIG_2
001231r 2  F0 4B                beq     GOIQ
001233r 2               .endif
001233r 2  CA                   dex
001234r 2  8A                   txa
001235r 2  48                   pha
001236r 2  18                   clc
001237r 2  A2 00                ldx     #$00
001239r 2  F1 8F                sbc     (DSCPTR),y
00123Br 2  B0 B6                bcs     SUBSTRING2
00123Dr 2  49 FF                eor     #$FF
00123Fr 2  C5 A4                cmp     FAC_LAST
001241r 2  90 B1                bcc     SUBSTRING3
001243r 2  A5 A4                lda     FAC_LAST
001245r 2  B0 AD                bcs     SUBSTRING3
001247r 2               
001247r 2               ; ----------------------------------------------------------------------------
001247r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001247r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001247r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001247r 2               ; ----------------------------------------------------------------------------
001247r 2               SUBSTRING_SETUP:
001247r 2  20 rr rr             jsr     CHKCLS
00124Ar 2  68                   pla
00124Br 2               .ifndef CONFIG_11
00124Br 2                       sta     JMPADRS+1
00124Br 2                       pla
00124Br 2                       sta     JMPADRS+2
00124Br 2               .else
00124Br 2  A8                   tay
00124Cr 2  68                   pla
00124Dr 2  85 94                sta     Z52
00124Fr 2               .endif
00124Fr 2  68                   pla
001250r 2  68                   pla
001251r 2  68                   pla
001252r 2  AA                   tax
001253r 2  68                   pla
001254r 2  85 8F                sta     DSCPTR
001256r 2  68                   pla
001257r 2  85 90                sta     DSCPTR+1
001259r 2               .ifdef CONFIG_11
001259r 2  A5 94                lda     Z52
00125Br 2  48                   pha
00125Cr 2  98                   tya
00125Dr 2  48                   pha
00125Er 2               .endif
00125Er 2  A0 00                ldy     #$00
001260r 2  8A                   txa
001261r 2               .ifndef CONFIG_2
001261r 2                       beq     GOIQ
001261r 2               .endif
001261r 2               .ifndef CONFIG_11
001261r 2                       inc     JMPADRS+1
001261r 2                       jmp     (JMPADRS+1)
001261r 2               .else
001261r 2  60                   rts
001262r 2               .endif
001262r 2               
001262r 2               ; ----------------------------------------------------------------------------
001262r 2               ; "LEN" FUNCTION
001262r 2               ; ----------------------------------------------------------------------------
001262r 2               LEN:
001262r 2  20 rr rr             jsr     GETSTR
001265r 2               SNGFLT1:
001265r 2  4C rr rr             jmp     SNGFLT
001268r 2               
001268r 2               ; ----------------------------------------------------------------------------
001268r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001268r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001268r 2               ; ----------------------------------------------------------------------------
001268r 2               GETSTR:
001268r 2  20 rr rr             jsr     FRESTR
00126Br 2  A2 00                ldx     #$00
00126Dr 2  86 11                stx     VALTYP
00126Fr 2  A8                   tay
001270r 2  60                   rts
001271r 2               
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               ; "ASC" FUNCTION
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               ASC:
001271r 2  20 rr rr             jsr     GETSTR
001274r 2  F0 08                beq     GOIQ
001276r 2  A0 00                ldy     #$00
001278r 2  B1 61                lda     (INDEX),y
00127Ar 2  A8                   tay
00127Br 2               .ifndef CONFIG_11A
00127Br 2                       jmp     SNGFLT1
00127Br 2               .else
00127Br 2  4C rr rr             jmp     SNGFLT
00127Er 2               .endif
00127Er 2               ; ----------------------------------------------------------------------------
00127Er 2               GOIQ:
00127Er 2  4C rr rr             jmp     IQERR
001281r 2               
001281r 2               ; ----------------------------------------------------------------------------
001281r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001281r 2               ; TO SINGLE BYTE IN X-REG
001281r 2               ; ----------------------------------------------------------------------------
001281r 2               GTBYTC:
001281r 2  20 B2 00             jsr     CHRGET
001284r 2               
001284r 2               ; ----------------------------------------------------------------------------
001284r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001284r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001284r 2               ; ----------------------------------------------------------------------------
001284r 2               GETBYT:
001284r 2  20 rr rr             jsr     FRMNUM
001287r 2               
001287r 2               ; ----------------------------------------------------------------------------
001287r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001287r 2               ; ----------------------------------------------------------------------------
001287r 2               CONINT:
001287r 2  20 rr rr             jsr     MKINT
00128Ar 2  A6 A3                ldx     FAC_LAST-1
00128Cr 2  D0 F0                bne     GOIQ
00128Er 2  A6 A4                ldx     FAC_LAST
001290r 2  4C B8 00             jmp     CHRGOT
001293r 2               
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               ; "VAL" FUNCTION
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               VAL:
001293r 2  20 rr rr             jsr     GETSTR
001296r 2  D0 03                bne     L35AC
001298r 2  4C rr rr             jmp     ZERO_FAC
00129Br 2               L35AC:
00129Br 2  A6 B9                ldx     TXTPTR
00129Dr 2  A4 BA                ldy     TXTPTR+1
00129Fr 2  86 B0                stx     STRNG2
0012A1r 2  84 B1                sty     STRNG2+1
0012A3r 2  A6 61                ldx     INDEX
0012A5r 2  86 B9                stx     TXTPTR
0012A7r 2  18                   clc
0012A8r 2  65 61                adc     INDEX
0012AAr 2  85 63                sta     DEST
0012ACr 2  A6 62                ldx     INDEX+1
0012AEr 2  86 BA                stx     TXTPTR+1
0012B0r 2  90 01                bcc     L35C4
0012B2r 2  E8                   inx
0012B3r 2               L35C4:
0012B3r 2  86 64                stx     DEST+1
0012B5r 2  A0 00                ldy     #$00
0012B7r 2  B1 63                lda     (DEST),y
0012B9r 2  48                   pha
0012BAr 2  A9 00                lda     #$00
0012BCr 2  91 63                sta     (DEST),y
0012BEr 2  20 B8 00             jsr     CHRGOT
0012C1r 2  20 rr rr             jsr     FIN
0012C4r 2  68                   pla
0012C5r 2  A0 00                ldy     #$00
0012C7r 2  91 63                sta     (DEST),y
0012C9r 2               
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               ; COPY STRNG2 INTO TXTPTR
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               POINT:
0012C9r 2  A6 B0                ldx     STRNG2
0012CBr 2  A4 B1                ldy     STRNG2+1
0012CDr 2  86 B9                stx     TXTPTR
0012CFr 2  84 BA                sty     TXTPTR+1
0012D1r 2  60                   rts
0012D2r 2               
0012D2r 2               
0012D2r 1               .include "misc3.s"
0012D2r 2               ; KBD specific patches
0012D2r 2               
0012D2r 2               .segment "CODE"
0012D2r 2               
0012D2r 2               .ifdef KBD
0012D2r 2               VARTAB_MINUS_2_TO_AY:
0012D2r 2                       lda     VARTAB
0012D2r 2                       sec
0012D2r 2                       sbc     #$02
0012D2r 2                       ldy     VARTAB+1
0012D2r 2                       bcs     LF42C
0012D2r 2                       dey
0012D2r 2               LF42C:
0012D2r 2                       rts
0012D2r 2               
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               GET_UPPER:
0012D2r 2                       lda     INPUTBUFFERX,x
0012D2r 2               LF430:
0012D2r 2                       cmp     #'a'
0012D2r 2                       bcc     LF43A
0012D2r 2                       cmp     #'z'+1
0012D2r 2                       bcs     LF43A
0012D2r 2               LF438:
0012D2r 2                       sbc     #$1F
0012D2r 2               LF43A:
0012D2r 2                       rts
0012D2r 2               
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               GETLN:
0012D2r 2                       ldx     #$5D
0012D2r 2               LF43D:
0012D2r 2                       txa
0012D2r 2                       and     #$7F
0012D2r 2                       cmp     $0340
0012D2r 2                       beq     LF44D
0012D2r 2                       sta     $0340
0012D2r 2                       lda     #$03
0012D2r 2                       jsr     LDE48
0012D2r 2               LF44D:
0012D2r 2                       jsr     LDE7F
0012D2r 2                       bne     RTS4
0012D2r 2                       cpx     #$80
0012D2r 2                       bcc     LF44D
0012D2r 2               RTS4:
0012D2r 2                       rts
0012D2r 2               
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               LF457:
0012D2r 2                       lda     TXTTAB
0012D2r 2                       ldx     TXTTAB+1
0012D2r 2               LF45B:
0012D2r 2                       sta     JMPADRS+1
0012D2r 2                       stx     JMPADRS+2
0012D2r 2                       ldy     #$01
0012D2r 2                       lda     (JMPADRS+1),y
0012D2r 2                       beq     LF438
0012D2r 2                       iny
0012D2r 2                       iny
0012D2r 2                       lda     (JMPADRS+1),y
0012D2r 2                       dey
0012D2r 2                       cmp     LINNUM+1
0012D2r 2                       bne     LF472
0012D2r 2                       lda     (JMPADRS+1),y
0012D2r 2                       cmp     LINNUM
0012D2r 2               LF472:
0012D2r 2                       bcs     LF43A
0012D2r 2                       dey
0012D2r 2                       lda     (JMPADRS+1),y
0012D2r 2                       tax
0012D2r 2                       dey
0012D2r 2                       lda     (JMPADRS+1),y
0012D2r 2                       bcc     LF45B
0012D2r 2               LF47D:
0012D2r 2                       jmp     (JMPADRS+1)
0012D2r 2               .endif
0012D2r 2               
0012D2r 1               .include "poke.s"
0012D2r 2               .segment "CODE"
0012D2r 2               
0012D2r 2               .ifndef CONFIG_NO_POKE
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               ; EVALUATE "EXP1,EXP2"
0012D2r 2               ;
0012D2r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
0012D2r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               GTNUM:
0012D2r 2  20 rr rr             jsr     FRMNUM
0012D5r 2  20 rr rr             jsr     GETADR
0012D8r 2               
0012D8r 2               ; ----------------------------------------------------------------------------
0012D8r 2               ; EVALUATE ",EXPRESSION"
0012D8r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
0012D8r 2               ; ----------------------------------------------------------------------------
0012D8r 2               COMBYTE:
0012D8r 2  20 rr rr             jsr     CHKCOM
0012DBr 2  4C rr rr             jmp     GETBYT
0012DEr 2               
0012DEr 2               ; ----------------------------------------------------------------------------
0012DEr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
0012DEr 2               ; ----------------------------------------------------------------------------
0012DEr 2               GETADR:
0012DEr 2  A5 A5                lda     FACSIGN
0012E0r 2                 .ifdef APPLE
0012E0r 2  EA                   nop ; PATCH
0012E1r 2  EA                   nop
0012E2r 2                 .else
0012E2r 2                       bmi     GOIQ
0012E2r 2                 .endif
0012E2r 2  A5 A0                lda     FAC
0012E4r 2  C9 91                cmp     #$91
0012E6r 2  B0 96                bcs     GOIQ
0012E8r 2  20 rr rr             jsr     QINT
0012EBr 2  A5 A3                lda     FAC_LAST-1
0012EDr 2  A4 A4                ldy     FAC_LAST
0012EFr 2  84 53                sty     LINNUM
0012F1r 2  85 54                sta     LINNUM+1
0012F3r 2  60                   rts
0012F4r 2               
0012F4r 2               ; ----------------------------------------------------------------------------
0012F4r 2               ; "PEEK" FUNCTION
0012F4r 2               ; ----------------------------------------------------------------------------
0012F4r 2               PEEK:
0012F4r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0012F4r 2  A5 54                lda     LINNUM+1
0012F6r 2  48                   pha
0012F7r 2  A5 53                lda     LINNUM
0012F9r 2  48                   pha
0012FAr 2               .endif
0012FAr 2  20 rr rr             jsr     GETADR
0012FDr 2  A0 00                ldy     #$00
0012FFr 2               .ifdef CBM1
0012FFr 2               ; disallow PEEK between $C000 and $DFFF
0012FFr 2                       cmp     #$C0
0012FFr 2                       bcc     LD6F3
0012FFr 2                       cmp     #$E1
0012FFr 2                       bcc     LD6F6
0012FFr 2               LD6F3:
0012FFr 2               .endif
0012FFr 2               .ifdef CBM2
0012FFr 2               		nop ; patch that disables the compares above
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               		nop
0012FFr 2               .endif
0012FFr 2  B1 53                lda     (LINNUM),y
001301r 2  A8                   tay
001302r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001302r 2  68                   pla
001303r 2  85 53                sta     LINNUM
001305r 2  68                   pla
001306r 2  85 54                sta     LINNUM+1
001308r 2               .endif
001308r 2               LD6F6:
001308r 2  4C rr rr             jmp     SNGFLT
00130Br 2               
00130Br 2               ; ----------------------------------------------------------------------------
00130Br 2               ; "POKE" STATEMENT
00130Br 2               ; ----------------------------------------------------------------------------
00130Br 2               POKE:
00130Br 2  20 rr rr             jsr     GTNUM
00130Er 2  8A                   txa
00130Fr 2  A0 00                ldy     #$00
001311r 2  91 53                sta     (LINNUM),y
001313r 2  60                   rts
001314r 2               
001314r 2               ; ----------------------------------------------------------------------------
001314r 2               ; "WAIT" STATEMENT
001314r 2               ; ----------------------------------------------------------------------------
001314r 2               WAIT:
001314r 2  20 rr rr             jsr     FRMNUM
001317r 2               
001317r 2  A5 A5                lda     FACSIGN
001319r 2  A5 A0                lda     FAC
00131Br 2  C9 91                cmp     #$91
00131Dr 2  90 03 4C rr          jcs     GOIQ
001321r 2  rr           
001322r 2  20 rr rr             jsr     QINT
001325r 2  A4 A3                ldy     FAC_LAST-1
001327r 2               
001327r 2               WAIT1:
001327r 2  A6 A4        		ldx FAC_LAST   ; innermost loop is 256
001329r 2               WAIT2:
001329r 2  AD 11 D0     		lda KBcr   ; 4
00132Cr 2  F0 03        		beq WAIT3  ; 3 - if keycheck is 0, it'd be A7 if a key was waiting
00132Er 2  AD 10 D0     		lda KBin   ; 4 - prev is 2
001331r 2               WAIT3:
001331r 2  CA           		dex        ; 2
001332r 2  D0 F5        		bne WAIT2  ; 3 till x = 0
001334r 2               
001334r 2               WAIT4:
001334r 2  88           		dey        ; as long as linnum > 0
001335r 2  D0 F0        		bne WAIT1
001337r 2               
001337r 2               RTS3:
001337r 2  60                   rts
001338r 2               .endif ;/* KBD */
001338r 2               
001338r 1               .include "float.s"
001338r 2               .segment "CODE"
001338r 2               
001338r 2               TEMP1X = TEMP1+(5-BYTES_FP)
001338r 2               
001338r 2               ; ----------------------------------------------------------------------------
001338r 2               ; ADD 0.5 TO FAC
001338r 2               ; ----------------------------------------------------------------------------
001338r 2               FADDH:
001338r 2  A9 rr                lda     #<CON_HALF
00133Ar 2  A0 rr                ldy     #>CON_HALF
00133Cr 2  4C rr rr             jmp     FADD
00133Fr 2               
00133Fr 2               ; ----------------------------------------------------------------------------
00133Fr 2               ; FAC = (Y,A) - FAC
00133Fr 2               ; ----------------------------------------------------------------------------
00133Fr 2               FSUB:
00133Fr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001342r 2               
001342r 2               ; ----------------------------------------------------------------------------
001342r 2               ; FAC = ARG - FAC
001342r 2               ; ----------------------------------------------------------------------------
001342r 2               FSUBT:
001342r 2  A5 A5                lda     FACSIGN
001344r 2  49 FF                eor     #$FF
001346r 2  85 A5                sta     FACSIGN
001348r 2  45 AD                eor     ARGSIGN
00134Ar 2  85 AE                sta     SGNCPR
00134Cr 2  A5 A0                lda     FAC
00134Er 2  4C rr rr             jmp     FADDT
001351r 2               
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               ; Commodore BASIC V2 Easter Egg
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               .ifdef CONFIG_EASTER_EGG
001351r 2               EASTER_EGG:
001351r 2                       lda     LINNUM
001351r 2                       cmp     #<6502
001351r 2                       bne     L3628
001351r 2                       lda     LINNUM+1
001351r 2                       sbc     #>6502
001351r 2                       bne     L3628
001351r 2                       sta     LINNUM
001351r 2                       tay
001351r 2                       lda     #$80
001351r 2                       sta     LINNUM+1
001351r 2               LD758:
001351r 2                       ldx     #$0A
001351r 2               LD75A:
001351r 2                       lda     MICROSOFT-1,x
001351r 2                       and     #$3F
001351r 2                       sta     (LINNUM),y
001351r 2                       iny
001351r 2                       bne     LD766
001351r 2                       inc     LINNUM+1
001351r 2               LD766:
001351r 2                       dex
001351r 2                       bne     LD75A
001351r 2                       dec     FORPNT
001351r 2                       bne     LD758
001351r 2                       rts
001351r 2               .endif
001351r 2               
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               FADD1:
001351r 2  20 rr rr             jsr     SHIFT_RIGHT
001354r 2  90 3C                bcc     FADD3
001356r 2               
001356r 2               ; ----------------------------------------------------------------------------
001356r 2               ; FAC = (Y,A) + FAC
001356r 2               ; ----------------------------------------------------------------------------
001356r 2               FADD:
001356r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001359r 2               
001359r 2               ; ----------------------------------------------------------------------------
001359r 2               ; FAC = ARG + FAC
001359r 2               ; ----------------------------------------------------------------------------
001359r 2               FADDT:
001359r 2  D0 03                bne     L365B
00135Br 2  4C rr rr             jmp     COPY_ARG_TO_FAC
00135Er 2               L365B:
00135Er 2  A6 AF                ldx     FACEXTENSION
001360r 2  86 95                stx     ARGEXTENSION
001362r 2  A2 A8                ldx     #ARG
001364r 2  A5 A8                lda     ARG
001366r 2               FADD2:
001366r 2  A8                   tay
001367r 2               .ifdef KBD
001367r 2                       beq     RTS4
001367r 2               .else
001367r 2  F0 CE                beq     RTS3
001369r 2               .endif
001369r 2  38                   sec
00136Ar 2  E5 A0                sbc     FAC
00136Cr 2  F0 24                beq     FADD3
00136Er 2  90 12                bcc     L367F
001370r 2  84 A0                sty     FAC
001372r 2  A4 AD                ldy     ARGSIGN
001374r 2  84 A5                sty     FACSIGN
001376r 2  49 FF                eor     #$FF
001378r 2  69 00                adc     #$00
00137Ar 2  A0 00                ldy     #$00
00137Cr 2  84 95                sty     ARGEXTENSION
00137Er 2  A2 A0                ldx     #FAC
001380r 2  D0 04                bne     L3683
001382r 2               L367F:
001382r 2  A0 00                ldy     #$00
001384r 2  84 AF                sty     FACEXTENSION
001386r 2               L3683:
001386r 2  C9 F9                cmp     #$F9
001388r 2  30 C7                bmi     FADD1
00138Ar 2  A8                   tay
00138Br 2  A5 AF                lda     FACEXTENSION
00138Dr 2  56 01                lsr     1,x
00138Fr 2  20 rr rr             jsr     SHIFT_RIGHT4
001392r 2               FADD3:
001392r 2  24 AE                bit     SGNCPR
001394r 2  10 57                bpl     FADD4
001396r 2  A0 A0                ldy     #FAC
001398r 2  E0 A8                cpx     #ARG
00139Ar 2  F0 02                beq     L369B
00139Cr 2  A0 A8                ldy     #ARG
00139Er 2               L369B:
00139Er 2  38                   sec
00139Fr 2  49 FF                eor     #$FF
0013A1r 2  65 95                adc     ARGEXTENSION
0013A3r 2  85 AF                sta     FACEXTENSION
0013A5r 2               .ifndef CONFIG_SMALL
0013A5r 2  B9 04 00             lda     4,y
0013A8r 2  F5 04                sbc     4,x
0013AAr 2  85 A4                sta     FAC+4
0013ACr 2               .endif
0013ACr 2  B9 03 00             lda     3,y
0013AFr 2  F5 03                sbc     3,x
0013B1r 2  85 A3                sta     FAC+3
0013B3r 2  B9 02 00             lda     2,y
0013B6r 2  F5 02                sbc     2,x
0013B8r 2  85 A2                sta     FAC+2
0013BAr 2  B9 01 00             lda     1,y
0013BDr 2  F5 01                sbc     1,x
0013BFr 2  85 A1                sta     FAC+1
0013C1r 2               
0013C1r 2               ; ----------------------------------------------------------------------------
0013C1r 2               ; NORMALIZE VALUE IN FAC
0013C1r 2               ; ----------------------------------------------------------------------------
0013C1r 2               NORMALIZE_FAC1:
0013C1r 2  B0 03                bcs     NORMALIZE_FAC2
0013C3r 2  20 rr rr             jsr     COMPLEMENT_FAC
0013C6r 2               NORMALIZE_FAC2:
0013C6r 2  A0 00                ldy     #$00
0013C8r 2  98                   tya
0013C9r 2  18                   clc
0013CAr 2               L36C7:
0013CAr 2  A6 A1                ldx     FAC+1
0013CCr 2  D0 4A                bne     NORMALIZE_FAC4
0013CEr 2  A6 A2                ldx     FAC+2
0013D0r 2  86 A1                stx     FAC+1
0013D2r 2  A6 A3                ldx     FAC+3
0013D4r 2  86 A2                stx     FAC+2
0013D6r 2               .ifdef CONFIG_SMALL
0013D6r 2                       ldx     FACEXTENSION
0013D6r 2                       stx     FAC+3
0013D6r 2               .else
0013D6r 2  A6 A4                ldx     FAC+4
0013D8r 2  86 A3                stx     FAC+3
0013DAr 2  A6 AF                ldx     FACEXTENSION
0013DCr 2  86 A4                stx     FAC+4
0013DEr 2               .endif
0013DEr 2  84 AF                sty     FACEXTENSION
0013E0r 2  69 08                adc     #$08
0013E2r 2               .ifdef CONFIG_2B
0013E2r 2               ; bugfix?
0013E2r 2               ; fix does not exist on AppleSoft 2
0013E2r 2                       cmp     #(MANTISSA_BYTES+1)*8
0013E2r 2               .else
0013E2r 2  C9 20                cmp     #MANTISSA_BYTES*8
0013E4r 2               .endif
0013E4r 2  D0 E4                bne     L36C7
0013E6r 2               
0013E6r 2               ; ----------------------------------------------------------------------------
0013E6r 2               ; SET FAC = 0
0013E6r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
0013E6r 2               ; ----------------------------------------------------------------------------
0013E6r 2               ZERO_FAC:
0013E6r 2  A9 00                lda     #$00
0013E8r 2               STA_IN_FAC_SIGN_AND_EXP:
0013E8r 2  85 A0                sta     FAC
0013EAr 2               STA_IN_FAC_SIGN:
0013EAr 2  85 A5                sta     FACSIGN
0013ECr 2  60                   rts
0013EDr 2               
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               FADD4:
0013EDr 2  65 95                adc     ARGEXTENSION
0013EFr 2  85 AF                sta     FACEXTENSION
0013F1r 2               .ifndef CONFIG_SMALL
0013F1r 2  A5 A4                lda     FAC+4
0013F3r 2  65 AC                adc     ARG+4
0013F5r 2  85 A4                sta     FAC+4
0013F7r 2               .endif
0013F7r 2  A5 A3                lda     FAC+3
0013F9r 2  65 AB                adc     ARG+3
0013FBr 2  85 A3                sta     FAC+3
0013FDr 2  A5 A2                lda     FAC+2
0013FFr 2  65 AA                adc     ARG+2
001401r 2  85 A2                sta     FAC+2
001403r 2  A5 A1                lda     FAC+1
001405r 2  65 A9                adc     ARG+1
001407r 2  85 A1                sta     FAC+1
001409r 2  4C rr rr             jmp     NORMALIZE_FAC5
00140Cr 2               
00140Cr 2               ; ----------------------------------------------------------------------------
00140Cr 2               ; FINISH NORMALIZING FAC
00140Cr 2               ; ----------------------------------------------------------------------------
00140Cr 2               NORMALIZE_FAC3:
00140Cr 2  69 01                adc     #$01
00140Er 2  06 AF                asl     FACEXTENSION
001410r 2               .ifndef CONFIG_SMALL
001410r 2  26 A4                rol     FAC+4
001412r 2               .endif
001412r 2  26 A3                rol     FAC+3
001414r 2  26 A2                rol     FAC+2
001416r 2  26 A1                rol     FAC+1
001418r 2               NORMALIZE_FAC4:
001418r 2  10 F2                bpl     NORMALIZE_FAC3
00141Ar 2  38                   sec
00141Br 2  E5 A0                sbc     FAC
00141Dr 2  B0 C7                bcs     ZERO_FAC
00141Fr 2  49 FF                eor     #$FF
001421r 2  69 01                adc     #$01
001423r 2  85 A0                sta     FAC
001425r 2               NORMALIZE_FAC5:
001425r 2  90 0E                bcc     L3764
001427r 2               NORMALIZE_FAC6:
001427r 2  E6 A0                inc     FAC
001429r 2  F0 42                beq     OVERFLOW
00142Br 2               .ifndef CONFIG_ROR_WORKAROUND
00142Br 2  66 A1                ror     FAC+1
00142Dr 2  66 A2                ror     FAC+2
00142Fr 2  66 A3                ror     FAC+3
001431r 2                 .ifndef CONFIG_SMALL
001431r 2  66 A4                ror     FAC+4
001433r 2                 .endif
001433r 2  66 AF                ror     FACEXTENSION
001435r 2               .else
001435r 2                       lda     #$00
001435r 2                       bcc     L372E
001435r 2                       lda     #$80
001435r 2               L372E:
001435r 2                       lsr     FAC+1
001435r 2                       ora     FAC+1
001435r 2                       sta     FAC+1
001435r 2                       lda     #$00
001435r 2                       bcc     L373A
001435r 2                       lda     #$80
001435r 2               L373A:
001435r 2                       lsr     FAC+2
001435r 2                       ora     FAC+2
001435r 2                       sta     FAC+2
001435r 2                       lda     #$00
001435r 2                       bcc     L3746
001435r 2                       lda     #$80
001435r 2               L3746:
001435r 2                       lsr     FAC+3
001435r 2                       ora     FAC+3
001435r 2                       sta     FAC+3
001435r 2                       lda     #$00
001435r 2                       bcc     L3752
001435r 2                       lda     #$80
001435r 2               L3752:
001435r 2                       lsr     FAC+4
001435r 2                       ora     FAC+4
001435r 2                       sta     FAC+4
001435r 2                       lda     #$00
001435r 2                       bcc     L375E
001435r 2                       lda     #$80
001435r 2               L375E:
001435r 2                       lsr     FACEXTENSION
001435r 2                       ora     FACEXTENSION
001435r 2                       sta     FACEXTENSION
001435r 2               .endif
001435r 2               L3764:
001435r 2  60                   rts
001436r 2               
001436r 2               ; ----------------------------------------------------------------------------
001436r 2               ; 2'S COMPLEMENT OF FAC
001436r 2               ; ----------------------------------------------------------------------------
001436r 2               COMPLEMENT_FAC:
001436r 2  A5 A5                lda     FACSIGN
001438r 2  49 FF                eor     #$FF
00143Ar 2  85 A5                sta     FACSIGN
00143Cr 2               
00143Cr 2               ; ----------------------------------------------------------------------------
00143Cr 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00143Cr 2               ; ----------------------------------------------------------------------------
00143Cr 2               COMPLEMENT_FAC_MANTISSA:
00143Cr 2  A5 A1                lda     FAC+1
00143Er 2  49 FF                eor     #$FF
001440r 2  85 A1                sta     FAC+1
001442r 2  A5 A2                lda     FAC+2
001444r 2  49 FF                eor     #$FF
001446r 2  85 A2                sta     FAC+2
001448r 2  A5 A3                lda     FAC+3
00144Ar 2  49 FF                eor     #$FF
00144Cr 2  85 A3                sta     FAC+3
00144Er 2               .ifndef CONFIG_SMALL
00144Er 2  A5 A4                lda     FAC+4
001450r 2  49 FF                eor     #$FF
001452r 2  85 A4                sta     FAC+4
001454r 2               .endif
001454r 2  A5 AF                lda     FACEXTENSION
001456r 2  49 FF                eor     #$FF
001458r 2  85 AF                sta     FACEXTENSION
00145Ar 2  E6 AF                inc     FACEXTENSION
00145Cr 2  D0 0E                bne     RTS12
00145Er 2               
00145Er 2               ; ----------------------------------------------------------------------------
00145Er 2               ; INCREMENT FAC MANTISSA
00145Er 2               ; ----------------------------------------------------------------------------
00145Er 2               INCREMENT_FAC_MANTISSA:
00145Er 2               .ifndef CONFIG_SMALL
00145Er 2  E6 A4                inc     FAC+4
001460r 2  D0 0A                bne     RTS12
001462r 2               .endif
001462r 2  E6 A3                inc     FAC+3
001464r 2  D0 06                bne     RTS12
001466r 2  E6 A2                inc     FAC+2
001468r 2  D0 02                bne     RTS12
00146Ar 2  E6 A1                inc     FAC+1
00146Cr 2               RTS12:
00146Cr 2  60                   rts
00146Dr 2               OVERFLOW:
00146Dr 2  A2 45                ldx     #ERR_OVERFLOW
00146Fr 2  4C rr rr             jmp     ERROR
001472r 2               
001472r 2               ; ----------------------------------------------------------------------------
001472r 2               ; SHIFT 1,X THRU 5,X RIGHT
001472r 2               ; (A) = NEGATIVE OF SHIFT COUNT
001472r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
001472r 2               ;
001472r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001472r 2               ; ----------------------------------------------------------------------------
001472r 2               SHIFT_RIGHT1:
001472r 2  A2 64                ldx     #RESULT-1
001474r 2               SHIFT_RIGHT2:
001474r 2               .ifdef CONFIG_SMALL
001474r 2                       ldy     3,x
001474r 2               .else
001474r 2  B4 04                ldy     4,x
001476r 2               .endif
001476r 2  84 AF                sty     FACEXTENSION
001478r 2               .ifndef CONFIG_SMALL
001478r 2  B4 03                ldy     3,x
00147Ar 2  94 04                sty     4,x
00147Cr 2               .endif
00147Cr 2  B4 02                ldy     2,x
00147Er 2  94 03                sty     3,x
001480r 2  B4 01                ldy     1,x
001482r 2  94 02                sty     2,x
001484r 2  A4 A7                ldy     SHIFTSIGNEXT
001486r 2  94 01                sty     1,x
001488r 2               
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               SHIFT_RIGHT:
001488r 2  69 08                adc     #$08
00148Ar 2  30 E8                bmi     SHIFT_RIGHT2
00148Cr 2  F0 E6                beq     SHIFT_RIGHT2
00148Er 2  E9 08                sbc     #$08
001490r 2  A8                   tay
001491r 2  A5 AF                lda     FACEXTENSION
001493r 2  B0 14                bcs     SHIFT_RIGHT5
001495r 2               .ifndef CONFIG_ROR_WORKAROUND
001495r 2               LB588:
001495r 2  16 01                asl     1,x
001497r 2  90 02                bcc     LB58E
001499r 2  F6 01                inc     1,x
00149Br 2               LB58E:
00149Br 2  76 01                ror     1,x
00149Dr 2  76 01                ror     1,x
00149Fr 2               
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               SHIFT_RIGHT4:
00149Fr 2  76 02                ror     2,x
0014A1r 2  76 03                ror     3,x
0014A3r 2                 .ifndef CONFIG_SMALL
0014A3r 2  76 04                ror     4,x
0014A5r 2                 .endif
0014A5r 2  6A                   ror     a
0014A6r 2  C8                   iny
0014A7r 2  D0 EC                bne     LB588
0014A9r 2               .else
0014A9r 2               L37C4:
0014A9r 2                       pha
0014A9r 2                       lda     1,x
0014A9r 2                       and     #$80
0014A9r 2                       lsr     1,x
0014A9r 2                       ora     1,x
0014A9r 2                       sta     1,x
0014A9r 2                       .byte   $24
0014A9r 2               SHIFT_RIGHT4:
0014A9r 2                       pha
0014A9r 2                       lda     #$00
0014A9r 2                       bcc     L37D7
0014A9r 2                       lda     #$80
0014A9r 2               L37D7:
0014A9r 2                       lsr     2,x
0014A9r 2                       ora     2,x
0014A9r 2                       sta     2,x
0014A9r 2                       lda     #$00
0014A9r 2                       bcc     L37E3
0014A9r 2                       lda     #$80
0014A9r 2               L37E3:
0014A9r 2                       lsr     3,x
0014A9r 2                       ora     3,x
0014A9r 2                       sta     3,x
0014A9r 2                       lda     #$00
0014A9r 2                       bcc     L37EF
0014A9r 2                       lda     #$80
0014A9r 2               L37EF:
0014A9r 2                       lsr     4,x
0014A9r 2                       ora     4,x
0014A9r 2                       sta     4,x
0014A9r 2                       pla
0014A9r 2                       php
0014A9r 2                       lsr     a
0014A9r 2                       plp
0014A9r 2                       bcc     L37FD
0014A9r 2                       ora     #$80
0014A9r 2               L37FD:
0014A9r 2                       iny
0014A9r 2                       bne     L37C4
0014A9r 2               .endif
0014A9r 2               SHIFT_RIGHT5:
0014A9r 2  18                   clc
0014AAr 2  60                   rts
0014ABr 2               
0014ABr 2               ; ----------------------------------------------------------------------------
0014ABr 2               .ifdef CONFIG_SMALL
0014ABr 2               CON_ONE:
0014ABr 2                       .byte   $81,$00,$00,$00
0014ABr 2               POLY_LOG:
0014ABr 2               		.byte	$02
0014ABr 2               		.byte   $80,$19,$56,$62
0014ABr 2               		.byte   $80,$76,$22,$F3
0014ABr 2               		.byte   $82,$38,$AA,$40
0014ABr 2               CON_SQR_HALF:
0014ABr 2               		.byte   $80,$35,$04,$F3
0014ABr 2               CON_SQR_TWO:
0014ABr 2               		.byte   $81,$35,$04,$F3
0014ABr 2               CON_NEG_HALF:
0014ABr 2               		.byte   $80,$80,$00,$00
0014ABr 2               CON_LOG_TWO:
0014ABr 2               		.byte   $80,$31,$72,$18
0014ABr 2               .else
0014ABr 2               CON_ONE:
0014ABr 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0014AFr 2  00           
0014B0r 2               POLY_LOG:
0014B0r 2  03                   .byte   $03
0014B1r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0014B5r 2  79           
0014B6r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0014BAr 2  64           
0014BBr 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0014BFr 2  16           
0014C0r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0014C4r 2  20           
0014C5r 2               CON_SQR_HALF:
0014C5r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
0014C9r 2  34           
0014CAr 2               CON_SQR_TWO:
0014CAr 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
0014CEr 2  34           
0014CFr 2               CON_NEG_HALF:
0014CFr 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
0014D3r 2  00           
0014D4r 2               CON_LOG_TWO:
0014D4r 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
0014D8r 2  F8           
0014D9r 2               .endif
0014D9r 2               
0014D9r 2               ; ----------------------------------------------------------------------------
0014D9r 2               ; "LOG" FUNCTION
0014D9r 2               ; ----------------------------------------------------------------------------
0014D9r 2               LOG:
0014D9r 2  20 rr rr             jsr     SIGN
0014DCr 2  F0 02                beq     GIQ
0014DEr 2  10 03                bpl     LOG2
0014E0r 2               GIQ:
0014E0r 2  4C rr rr             jmp     IQERR
0014E3r 2               LOG2:
0014E3r 2  A5 A0                lda     FAC
0014E5r 2  E9 7F                sbc     #$7F
0014E7r 2  48                   pha
0014E8r 2  A9 80                lda     #$80
0014EAr 2  85 A0                sta     FAC
0014ECr 2  A9 rr                lda     #<CON_SQR_HALF
0014EEr 2  A0 rr                ldy     #>CON_SQR_HALF
0014F0r 2  20 rr rr             jsr     FADD
0014F3r 2  A9 rr                lda     #<CON_SQR_TWO
0014F5r 2  A0 rr                ldy     #>CON_SQR_TWO
0014F7r 2  20 rr rr             jsr     FDIV
0014FAr 2  A9 rr                lda     #<CON_ONE
0014FCr 2  A0 rr                ldy     #>CON_ONE
0014FEr 2  20 rr rr             jsr     FSUB
001501r 2  A9 rr                lda     #<POLY_LOG
001503r 2  A0 rr                ldy     #>POLY_LOG
001505r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001508r 2  A9 rr                lda     #<CON_NEG_HALF
00150Ar 2  A0 rr                ldy     #>CON_NEG_HALF
00150Cr 2  20 rr rr             jsr     FADD
00150Fr 2  68                   pla
001510r 2  20 rr rr             jsr     ADDACC
001513r 2  A9 rr                lda     #<CON_LOG_TWO
001515r 2  A0 rr                ldy     #>CON_LOG_TWO
001517r 2               
001517r 2               ; ----------------------------------------------------------------------------
001517r 2               ; FAC = (Y,A) * FAC
001517r 2               ; ----------------------------------------------------------------------------
001517r 2               FMULT:
001517r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00151Ar 2               
00151Ar 2               ; ----------------------------------------------------------------------------
00151Ar 2               ; FAC = ARG * FAC
00151Ar 2               ; ----------------------------------------------------------------------------
00151Ar 2               FMULTT:
00151Ar 2               .ifndef CONFIG_11
00151Ar 2                       beq     L3903
00151Ar 2               .else
00151Ar 2  D0 03 4C rr          jeq     L3903
00151Er 2  rr           
00151Fr 2               .endif
00151Fr 2  20 rr rr             jsr     ADD_EXPONENTS
001522r 2  A9 00                lda     #$00
001524r 2  85 65                sta     RESULT
001526r 2  85 66                sta     RESULT+1
001528r 2  85 67                sta     RESULT+2
00152Ar 2               .ifndef CONFIG_SMALL
00152Ar 2  85 68                sta     RESULT+3
00152Cr 2               .endif
00152Cr 2  A5 AF                lda     FACEXTENSION
00152Er 2  20 rr rr             jsr     MULTIPLY1
001531r 2               .ifndef CONFIG_SMALL
001531r 2  A5 A4                lda     FAC+4
001533r 2  20 rr rr             jsr     MULTIPLY1
001536r 2               .endif
001536r 2  A5 A3                lda     FAC+3
001538r 2  20 rr rr             jsr     MULTIPLY1
00153Br 2  A5 A2                lda     FAC+2
00153Dr 2  20 rr rr             jsr     MULTIPLY1
001540r 2  A5 A1                lda     FAC+1
001542r 2  20 rr rr             jsr     MULTIPLY2
001545r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001548r 2               
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               ; MULTIPLY ARG BY (A) INTO RESULT
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               MULTIPLY1:
001548r 2  D0 03                bne     MULTIPLY2
00154Ar 2  4C rr rr             jmp     SHIFT_RIGHT1
00154Dr 2               MULTIPLY2:
00154Dr 2  4A                   lsr     a
00154Er 2  09 80                ora     #$80
001550r 2               L38A7:
001550r 2  A8                   tay
001551r 2  90 19                bcc     L38C3
001553r 2  18                   clc
001554r 2               .ifndef CONFIG_SMALL
001554r 2  A5 68                lda     RESULT+3
001556r 2  65 AC                adc     ARG+4
001558r 2  85 68                sta     RESULT+3
00155Ar 2               .endif
00155Ar 2  A5 67                lda     RESULT+2
00155Cr 2  65 AB                adc     ARG+3
00155Er 2  85 67                sta     RESULT+2
001560r 2  A5 66                lda     RESULT+1
001562r 2  65 AA                adc     ARG+2
001564r 2  85 66                sta     RESULT+1
001566r 2  A5 65                lda     RESULT
001568r 2  65 A9                adc     ARG+1
00156Ar 2  85 65                sta     RESULT
00156Cr 2               L38C3:
00156Cr 2               .ifndef CONFIG_ROR_WORKAROUND
00156Cr 2  66 65                ror     RESULT
00156Er 2  66 66                ror     RESULT+1
001570r 2               .ifdef APPLE_BAD_BYTE
001570r 2               ; this seems to be a bad byte in the dump
001570r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
001570r 2               .else
001570r 2  66 67                ror     RESULT+2
001572r 2               .endif
001572r 2               .ifndef CONFIG_SMALL
001572r 2  66 68                ror     RESULT+3
001574r 2               .endif
001574r 2  66 AF                ror     FACEXTENSION
001576r 2               .else
001576r 2                       lda     #$00
001576r 2                       bcc     L38C9
001576r 2                       lda     #$80
001576r 2               L38C9:
001576r 2                       lsr     RESULT
001576r 2                       ora     RESULT
001576r 2                       sta     RESULT
001576r 2                       lda     #$00
001576r 2                       bcc     L38D5
001576r 2                       lda     #$80
001576r 2               L38D5:
001576r 2                       lsr     RESULT+1
001576r 2                       ora     RESULT+1
001576r 2                       sta     RESULT+1
001576r 2                       lda     #$00
001576r 2                       bcc     L38E1
001576r 2                       lda     #$80
001576r 2               L38E1:
001576r 2                       lsr     RESULT+2
001576r 2                       ora     RESULT+2
001576r 2                       sta     RESULT+2
001576r 2                       lda     #$00
001576r 2                       bcc     L38ED
001576r 2                       lda     #$80
001576r 2               L38ED:
001576r 2                       lsr     RESULT+3
001576r 2                       ora     RESULT+3
001576r 2                       sta     RESULT+3
001576r 2                       lda     #$00
001576r 2                       bcc     L38F9
001576r 2                       lda     #$80
001576r 2               L38F9:
001576r 2                       lsr     FACEXTENSION
001576r 2                       ora     FACEXTENSION
001576r 2                       sta     FACEXTENSION
001576r 2               .endif
001576r 2  98                   tya
001577r 2  4A                   lsr     a
001578r 2  D0 D6                bne     L38A7
00157Ar 2               L3903:
00157Ar 2  60                   rts
00157Br 2               
00157Br 2               ; ----------------------------------------------------------------------------
00157Br 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
00157Br 2               ; ----------------------------------------------------------------------------
00157Br 2               LOAD_ARG_FROM_YA:
00157Br 2  85 61                sta     INDEX
00157Dr 2  84 62                sty     INDEX+1
00157Fr 2  A0 04                ldy     #BYTES_FP-1
001581r 2               .ifndef CONFIG_SMALL
001581r 2  B1 61                lda     (INDEX),y
001583r 2  85 AC                sta     ARG+4
001585r 2  88                   dey
001586r 2               .endif
001586r 2  B1 61                lda     (INDEX),y
001588r 2  85 AB                sta     ARG+3
00158Ar 2  88                   dey
00158Br 2  B1 61                lda     (INDEX),y
00158Dr 2  85 AA                sta     ARG+2
00158Fr 2  88                   dey
001590r 2  B1 61                lda     (INDEX),y
001592r 2  85 AD                sta     ARGSIGN
001594r 2  45 A5                eor     FACSIGN
001596r 2  85 AE                sta     SGNCPR
001598r 2  A5 AD                lda     ARGSIGN
00159Ar 2  09 80                ora     #$80
00159Cr 2  85 A9                sta     ARG+1
00159Er 2  88                   dey
00159Fr 2  B1 61                lda     (INDEX),y
0015A1r 2  85 A8                sta     ARG
0015A3r 2  A5 A0                lda     FAC
0015A5r 2  60                   rts
0015A6r 2               
0015A6r 2               ; ----------------------------------------------------------------------------
0015A6r 2               ; ADD EXPONENTS OF ARG AND FAC
0015A6r 2               ; (CALLED BY FMULT AND FDIV)
0015A6r 2               ;
0015A6r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0015A6r 2               ; ----------------------------------------------------------------------------
0015A6r 2               ADD_EXPONENTS:
0015A6r 2  A5 A8                lda     ARG
0015A8r 2               ADD_EXPONENTS1:
0015A8r 2  F0 1F                beq     ZERO
0015AAr 2  18                   clc
0015ABr 2  65 A0                adc     FAC
0015ADr 2  90 04                bcc     L393C
0015AFr 2  30 1D                bmi     JOV
0015B1r 2  18                   clc
0015B2r 2  2C                   .byte   $2C
0015B3r 2               L393C:
0015B3r 2  10 14                bpl     ZERO
0015B5r 2  69 80                adc     #$80
0015B7r 2  85 A0                sta     FAC
0015B9r 2  D0 03                bne     L3947
0015BBr 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0015BEr 2               L3947:
0015BEr 2  A5 AE                lda     SGNCPR
0015C0r 2  85 A5                sta     FACSIGN
0015C2r 2  60                   rts
0015C3r 2               
0015C3r 2               ; ----------------------------------------------------------------------------
0015C3r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0015C3r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0015C3r 2               ; CALLED FROM "EXP" FUNCTION
0015C3r 2               ; ----------------------------------------------------------------------------
0015C3r 2               OUTOFRNG:
0015C3r 2  A5 A5                lda     FACSIGN
0015C5r 2  49 FF                eor     #$FF
0015C7r 2  30 05                bmi     JOV
0015C9r 2               
0015C9r 2               ; ----------------------------------------------------------------------------
0015C9r 2               ; POP RETURN ADDRESS AND SET FAC=0
0015C9r 2               ; ----------------------------------------------------------------------------
0015C9r 2               ZERO:
0015C9r 2  68                   pla
0015CAr 2  68                   pla
0015CBr 2  4C rr rr             jmp     ZERO_FAC
0015CEr 2               JOV:
0015CEr 2  4C rr rr             jmp     OVERFLOW
0015D1r 2               
0015D1r 2               ; ----------------------------------------------------------------------------
0015D1r 2               ; MULTIPLY FAC BY 10
0015D1r 2               ; ----------------------------------------------------------------------------
0015D1r 2               MUL10:
0015D1r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0015D4r 2  AA                   tax
0015D5r 2  F0 10                beq     L3970
0015D7r 2  18                   clc
0015D8r 2  69 02                adc     #$02
0015DAr 2  B0 F2                bcs     JOV
0015DCr 2               LD9BF:
0015DCr 2  A2 00                ldx     #$00
0015DEr 2  86 AE                stx     SGNCPR
0015E0r 2  20 rr rr             jsr     FADD2
0015E3r 2  E6 A0                inc     FAC
0015E5r 2  F0 E7                beq     JOV
0015E7r 2               L3970:
0015E7r 2  60                   rts
0015E8r 2               
0015E8r 2               ; ----------------------------------------------------------------------------
0015E8r 2               CONTEN:
0015E8r 2               .ifdef CONFIG_SMALL
0015E8r 2                       .byte   $84,$20,$00,$00
0015E8r 2               .else
0015E8r 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
0015ECr 2  00           
0015EDr 2               .endif
0015EDr 2               
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               ; DIVIDE FAC BY 10
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               DIV10:
0015EDr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0015F0r 2  A9 rr                lda     #<CONTEN
0015F2r 2  A0 rr                ldy     #>CONTEN
0015F4r 2  A2 00                ldx     #$00
0015F6r 2               
0015F6r 2               ; ----------------------------------------------------------------------------
0015F6r 2               ; FAC = ARG / (Y,A)
0015F6r 2               ; ----------------------------------------------------------------------------
0015F6r 2               DIV:
0015F6r 2  86 AE                stx     SGNCPR
0015F8r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0015FBr 2  4C rr rr             jmp     FDIVT
0015FEr 2               
0015FEr 2               ; ----------------------------------------------------------------------------
0015FEr 2               ; FAC = (Y,A) / FAC
0015FEr 2               ; ----------------------------------------------------------------------------
0015FEr 2               FDIV:
0015FEr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001601r 2               
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               ; FAC = ARG / FAC
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               FDIVT:
001601r 2  F0 76                beq     L3A02
001603r 2  20 rr rr             jsr     ROUND_FAC
001606r 2  A9 00                lda     #$00
001608r 2  38                   sec
001609r 2  E5 A0                sbc     FAC
00160Br 2  85 A0                sta     FAC
00160Dr 2  20 rr rr             jsr     ADD_EXPONENTS
001610r 2  E6 A0                inc     FAC
001612r 2  F0 BA                beq     JOV
001614r 2  A2 FC                ldx     #<-MANTISSA_BYTES
001616r 2  A9 01                lda     #$01
001618r 2               L39A1:
001618r 2  A4 A9                ldy     ARG+1
00161Ar 2  C4 A1                cpy     FAC+1
00161Cr 2  D0 10                bne     L39B7
00161Er 2  A4 AA                ldy     ARG+2
001620r 2  C4 A2                cpy     FAC+2
001622r 2  D0 0A                bne     L39B7
001624r 2  A4 AB                ldy     ARG+3
001626r 2  C4 A3                cpy     FAC+3
001628r 2               .ifndef CONFIG_SMALL
001628r 2  D0 04                bne     L39B7
00162Ar 2  A4 AC                ldy     ARG+4
00162Cr 2  C4 A4                cpy     FAC+4
00162Er 2               .endif
00162Er 2               L39B7:
00162Er 2  08                   php
00162Fr 2  2A                   rol     a
001630r 2  90 09                bcc     L39C4
001632r 2  E8                   inx
001633r 2  95 68                sta     RESULT_LAST-1,x
001635r 2  F0 32                beq     L39F2
001637r 2  10 34                bpl     L39F6
001639r 2  A9 01                lda     #$01
00163Br 2               L39C4:
00163Br 2  28                   plp
00163Cr 2  B0 0E                bcs     L39D5
00163Er 2               L39C7:
00163Er 2  06 AC                asl     ARG_LAST
001640r 2               .ifndef CONFIG_SMALL
001640r 2  26 AB                rol     ARG+3
001642r 2               .endif
001642r 2  26 AA                rol     ARG+2
001644r 2  26 A9                rol     ARG+1
001646r 2  B0 E6                bcs     L39B7
001648r 2  30 CE                bmi     L39A1
00164Ar 2  10 E2                bpl     L39B7
00164Cr 2               L39D5:
00164Cr 2  A8                   tay
00164Dr 2               .ifndef CONFIG_SMALL
00164Dr 2  A5 AC                lda     ARG+4
00164Fr 2  E5 A4                sbc     FAC+4
001651r 2  85 AC                sta     ARG+4
001653r 2               .endif
001653r 2  A5 AB                lda     ARG+3
001655r 2  E5 A3                sbc     FAC+3
001657r 2  85 AB                sta     ARG+3
001659r 2  A5 AA                lda     ARG+2
00165Br 2  E5 A2                sbc     FAC+2
00165Dr 2  85 AA                sta     ARG+2
00165Fr 2  A5 A9                lda     ARG+1
001661r 2  E5 A1                sbc     FAC+1
001663r 2  85 A9                sta     ARG+1
001665r 2  98                   tya
001666r 2  4C rr rr             jmp     L39C7
001669r 2               L39F2:
001669r 2  A9 40                lda     #$40
00166Br 2  D0 CE                bne     L39C4
00166Dr 2               L39F6:
00166Dr 2  0A                   asl     a
00166Er 2  0A                   asl     a
00166Fr 2  0A                   asl     a
001670r 2  0A                   asl     a
001671r 2  0A                   asl     a
001672r 2  0A                   asl     a
001673r 2  85 AF                sta     FACEXTENSION
001675r 2  28                   plp
001676r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001679r 2               L3A02:
001679r 2  A2 85                ldx     #ERR_ZERODIV
00167Br 2  4C rr rr             jmp     ERROR
00167Er 2               
00167Er 2               ; ----------------------------------------------------------------------------
00167Er 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00167Er 2               ; ----------------------------------------------------------------------------
00167Er 2               COPY_RESULT_INTO_FAC:
00167Er 2  A5 65                lda     RESULT
001680r 2  85 A1                sta     FAC+1
001682r 2  A5 66                lda     RESULT+1
001684r 2  85 A2                sta     FAC+2
001686r 2  A5 67                lda     RESULT+2
001688r 2  85 A3                sta     FAC+3
00168Ar 2               .ifndef CONFIG_SMALL
00168Ar 2  A5 68                lda     RESULT+3
00168Cr 2  85 A4                sta     FAC+4
00168Er 2               .endif
00168Er 2  4C rr rr             jmp     NORMALIZE_FAC2
001691r 2               
001691r 2               ; ----------------------------------------------------------------------------
001691r 2               ; UNPACK (Y,A) INTO FAC
001691r 2               ; ----------------------------------------------------------------------------
001691r 2               LOAD_FAC_FROM_YA:
001691r 2  85 61                sta     INDEX
001693r 2  84 62                sty     INDEX+1
001695r 2  A0 04                ldy     #MANTISSA_BYTES
001697r 2               .ifndef CONFIG_SMALL
001697r 2  B1 61                lda     (INDEX),y
001699r 2  85 A4                sta     FAC+4
00169Br 2  88                   dey
00169Cr 2               .endif
00169Cr 2  B1 61                lda     (INDEX),y
00169Er 2  85 A3                sta     FAC+3
0016A0r 2  88                   dey
0016A1r 2  B1 61                lda     (INDEX),y
0016A3r 2  85 A2                sta     FAC+2
0016A5r 2  88                   dey
0016A6r 2  B1 61                lda     (INDEX),y
0016A8r 2  85 A5                sta     FACSIGN
0016AAr 2  09 80                ora     #$80
0016ACr 2  85 A1                sta     FAC+1
0016AEr 2  88                   dey
0016AFr 2  B1 61                lda     (INDEX),y
0016B1r 2  85 A0                sta     FAC
0016B3r 2  84 AF                sty     FACEXTENSION
0016B5r 2  60                   rts
0016B6r 2               
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               ; ROUND FAC, STORE IN TEMP2
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0016B6r 2  A2 9B                ldx     #TEMP2
0016B8r 2  2C                   .byte   $2C
0016B9r 2               
0016B9r 2               ; ----------------------------------------------------------------------------
0016B9r 2               ; ROUND FAC, STORE IN TEMP1
0016B9r 2               ; ----------------------------------------------------------------------------
0016B9r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0016B9r 2  A2 96                ldx     #TEMP1X
0016BBr 2  A0 00                ldy     #$00
0016BDr 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0016BFr 2               
0016BFr 2               ; ----------------------------------------------------------------------------
0016BFr 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0016BFr 2               ; ----------------------------------------------------------------------------
0016BFr 2               SETFOR:
0016BFr 2  A6 88                ldx     FORPNT
0016C1r 2  A4 89                ldy     FORPNT+1
0016C3r 2               
0016C3r 2               ; ----------------------------------------------------------------------------
0016C3r 2               ; ROUND FAC, AND STORE AT (Y,X)
0016C3r 2               ; ----------------------------------------------------------------------------
0016C3r 2               STORE_FAC_AT_YX_ROUNDED:
0016C3r 2  20 rr rr             jsr     ROUND_FAC
0016C6r 2  86 61                stx     INDEX
0016C8r 2  84 62                sty     INDEX+1
0016CAr 2  A0 04                ldy     #MANTISSA_BYTES
0016CCr 2               .ifndef CONFIG_SMALL
0016CCr 2  A5 A4                lda     FAC+4
0016CEr 2  91 61                sta     (INDEX),y
0016D0r 2  88                   dey
0016D1r 2               .endif
0016D1r 2  A5 A3                lda     FAC+3
0016D3r 2  91 61                sta     (INDEX),y
0016D5r 2  88                   dey
0016D6r 2  A5 A2                lda     FAC+2
0016D8r 2  91 61                sta     (INDEX),y
0016DAr 2  88                   dey
0016DBr 2  A5 A5                lda     FACSIGN
0016DDr 2  09 7F                ora     #$7F
0016DFr 2  25 A1                and     FAC+1
0016E1r 2  91 61                sta     (INDEX),y
0016E3r 2  88                   dey
0016E4r 2  A5 A0                lda     FAC
0016E6r 2  91 61                sta     (INDEX),y
0016E8r 2  84 AF                sty     FACEXTENSION
0016EAr 2  60                   rts
0016EBr 2               
0016EBr 2               ; ----------------------------------------------------------------------------
0016EBr 2               ; COPY ARG INTO FAC
0016EBr 2               ; ----------------------------------------------------------------------------
0016EBr 2               COPY_ARG_TO_FAC:
0016EBr 2  A5 AD                lda     ARGSIGN
0016EDr 2               MFA:
0016EDr 2  85 A5                sta     FACSIGN
0016EFr 2  A2 05                ldx     #BYTES_FP
0016F1r 2               L3A7A:
0016F1r 2  B5 A7                lda     SHIFTSIGNEXT,x
0016F3r 2  95 9F                sta     EXPSGN,x
0016F5r 2  CA                   dex
0016F6r 2  D0 F9                bne     L3A7A
0016F8r 2  86 AF                stx     FACEXTENSION
0016FAr 2  60                   rts
0016FBr 2               
0016FBr 2               ; ----------------------------------------------------------------------------
0016FBr 2               ; ROUND FAC AND COPY TO ARG
0016FBr 2               ; ----------------------------------------------------------------------------
0016FBr 2               COPY_FAC_TO_ARG_ROUNDED:
0016FBr 2  20 rr rr             jsr     ROUND_FAC
0016FEr 2               MAF:
0016FEr 2  A2 06                ldx     #BYTES_FP+1
001700r 2               L3A89:
001700r 2  B5 9F                lda     EXPSGN,x
001702r 2  95 A7                sta     SHIFTSIGNEXT,x
001704r 2  CA                   dex
001705r 2  D0 F9                bne     L3A89
001707r 2  86 AF                stx     FACEXTENSION
001709r 2               RTS14:
001709r 2  60                   rts
00170Ar 2               
00170Ar 2               ; ----------------------------------------------------------------------------
00170Ar 2               ; ROUND FAC USING EXTENSION BYTE
00170Ar 2               ; ----------------------------------------------------------------------------
00170Ar 2               ROUND_FAC:
00170Ar 2  A5 A0                lda     FAC
00170Cr 2  F0 FB                beq     RTS14
00170Er 2  06 AF                asl     FACEXTENSION
001710r 2  90 F7                bcc     RTS14
001712r 2               
001712r 2               ; ----------------------------------------------------------------------------
001712r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001712r 2               ; ----------------------------------------------------------------------------
001712r 2               INCREMENT_MANTISSA:
001712r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001715r 2  D0 F2                bne     RTS14
001717r 2  4C rr rr             jmp     NORMALIZE_FAC6
00171Ar 2               
00171Ar 2               ; ----------------------------------------------------------------------------
00171Ar 2               ; TEST FAC FOR ZERO AND SIGN
00171Ar 2               ;
00171Ar 2               ; FAC > 0, RETURN +1
00171Ar 2               ; FAC = 0, RETURN  0
00171Ar 2               ; FAC < 0, RETURN -1
00171Ar 2               ; ----------------------------------------------------------------------------
00171Ar 2               SIGN:
00171Ar 2  A5 A0                lda     FAC
00171Cr 2  F0 09                beq     RTS15
00171Er 2               L3AA7:
00171Er 2  A5 A5                lda     FACSIGN
001720r 2               SIGN2:
001720r 2  2A                   rol     a
001721r 2  A9 FF                lda     #$FF
001723r 2  B0 02                bcs     RTS15
001725r 2  A9 01                lda     #$01
001727r 2               RTS15:
001727r 2  60                   rts
001728r 2               
001728r 2               ; ----------------------------------------------------------------------------
001728r 2               ; "SGN" FUNCTION
001728r 2               ; ----------------------------------------------------------------------------
001728r 2               SGN:
001728r 2  20 rr rr             jsr     SIGN
00172Br 2               
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               FLOAT:
00172Br 2  85 A1                sta     FAC+1
00172Dr 2  A9 00                lda     #$00
00172Fr 2  85 A2                sta     FAC+2
001731r 2  A2 88                ldx     #$88
001733r 2               
001733r 2               ; ----------------------------------------------------------------------------
001733r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001733r 2               ; (X) = EXPONENT
001733r 2               ; ----------------------------------------------------------------------------
001733r 2               FLOAT1:
001733r 2  A5 A1                lda     FAC+1
001735r 2  49 FF                eor     #$FF
001737r 2  2A                   rol     a
001738r 2               
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001738r 2               ; (X) = EXPONENT
001738r 2               ; C=0 TO MAKE VALUE NEGATIVE
001738r 2               ; C=1 TO MAKE VALUE POSITIVE
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               FLOAT2:
001738r 2  A9 00                lda     #$00
00173Ar 2               .ifndef CONFIG_SMALL
00173Ar 2  85 A4                sta     FAC+4
00173Cr 2               .endif
00173Cr 2  85 A3                sta     FAC+3
00173Er 2               LDB21:
00173Er 2  86 A0                stx     FAC
001740r 2  85 AF                sta     FACEXTENSION
001742r 2  85 A5                sta     FACSIGN
001744r 2  4C rr rr             jmp     NORMALIZE_FAC1
001747r 2               
001747r 2               ; ----------------------------------------------------------------------------
001747r 2               ; "ABS" FUNCTION
001747r 2               ; ----------------------------------------------------------------------------
001747r 2               ABS:
001747r 2  46 A5                lsr     FACSIGN
001749r 2  60                   rts
00174Ar 2               
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
00174Ar 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               FCOMP:
00174Ar 2  85 63                sta     DEST
00174Cr 2               
00174Cr 2               ; ----------------------------------------------------------------------------
00174Cr 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00174Cr 2               ; "DEST" ALREADY SET UP
00174Cr 2               ; ----------------------------------------------------------------------------
00174Cr 2               FCOMP2:
00174Cr 2  84 64                sty     DEST+1
00174Er 2  A0 00                ldy     #$00
001750r 2  B1 63                lda     (DEST),y
001752r 2  C8                   iny
001753r 2  AA                   tax
001754r 2  F0 C4                beq     SIGN
001756r 2  B1 63                lda     (DEST),y
001758r 2  45 A5                eor     FACSIGN
00175Ar 2  30 C2                bmi     L3AA7
00175Cr 2  E4 A0                cpx     FAC
00175Er 2  D0 21                bne     L3B0A
001760r 2  B1 63                lda     (DEST),y
001762r 2  09 80                ora     #$80
001764r 2  C5 A1                cmp     FAC+1
001766r 2  D0 19                bne     L3B0A
001768r 2  C8                   iny
001769r 2  B1 63                lda     (DEST),y
00176Br 2  C5 A2                cmp     FAC+2
00176Dr 2  D0 12                bne     L3B0A
00176Fr 2  C8                   iny
001770r 2               .ifndef CONFIG_SMALL
001770r 2  B1 63                lda     (DEST),y
001772r 2  C5 A3                cmp     FAC+3
001774r 2  D0 0B                bne     L3B0A
001776r 2  C8                   iny
001777r 2               .endif
001777r 2  A9 7F                lda     #$7F
001779r 2  C5 AF                cmp     FACEXTENSION
00177Br 2  B1 63                lda     (DEST),y
00177Dr 2  E5 A4                sbc     FAC_LAST
00177Fr 2  F0 28                beq     L3B32
001781r 2               L3B0A:
001781r 2  A5 A5                lda     FACSIGN
001783r 2  90 02                bcc     L3B10
001785r 2  49 FF                eor     #$FF
001787r 2               L3B10:
001787r 2  4C rr rr             jmp     SIGN2
00178Ar 2               
00178Ar 2               ; ----------------------------------------------------------------------------
00178Ar 2               ; QUICK INTEGER FUNCTION
00178Ar 2               ;
00178Ar 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00178Ar 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00178Ar 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00178Ar 2               ;
00178Ar 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00178Ar 2               ; ----------------------------------------------------------------------------
00178Ar 2               QINT:
00178Ar 2  A5 A0                lda     FAC
00178Cr 2  F0 4A                beq     QINT3
00178Er 2  38                   sec
00178Fr 2  E9 A0                sbc     #120+8*BYTES_FP
001791r 2  24 A5                bit     FACSIGN
001793r 2  10 09                bpl     L3B27
001795r 2  AA                   tax
001796r 2  A9 FF                lda     #$FF
001798r 2  85 A7                sta     SHIFTSIGNEXT
00179Ar 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
00179Dr 2  8A                   txa
00179Er 2               L3B27:
00179Er 2  A2 A0                ldx     #FAC
0017A0r 2  C9 F9                cmp     #$F9
0017A2r 2  10 06                bpl     QINT2
0017A4r 2  20 rr rr             jsr     SHIFT_RIGHT
0017A7r 2  84 A7                sty     SHIFTSIGNEXT
0017A9r 2               L3B32:
0017A9r 2  60                   rts
0017AAr 2               QINT2:
0017AAr 2  A8                   tay
0017ABr 2  A5 A5                lda     FACSIGN
0017ADr 2  29 80                and     #$80
0017AFr 2  46 A1                lsr     FAC+1
0017B1r 2  05 A1                ora     FAC+1
0017B3r 2  85 A1                sta     FAC+1
0017B5r 2  20 rr rr             jsr     SHIFT_RIGHT4
0017B8r 2  84 A7                sty     SHIFTSIGNEXT
0017BAr 2  60                   rts
0017BBr 2               
0017BBr 2               ; ----------------------------------------------------------------------------
0017BBr 2               ; "INT" FUNCTION
0017BBr 2               ;
0017BBr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0017BBr 2               ; AND THEN REFLOATS THE INTEGER.
0017BBr 2               ; ----------------------------------------------------------------------------
0017BBr 2               INT:
0017BBr 2  A5 A0                lda     FAC
0017BDr 2  C9 A0                cmp     #120+8*BYTES_FP
0017BFr 2  B0 20                bcs     RTS17
0017C1r 2  20 rr rr             jsr     QINT
0017C4r 2  84 AF                sty     FACEXTENSION
0017C6r 2  A5 A5                lda     FACSIGN
0017C8r 2  84 A5                sty     FACSIGN
0017CAr 2  49 80                eor     #$80
0017CCr 2  2A                   rol     a
0017CDr 2  A9 A0                lda     #120+8*BYTES_FP
0017CFr 2  85 A0                sta     FAC
0017D1r 2  A5 A4                lda     FAC_LAST
0017D3r 2  85 0D                sta     CHARAC
0017D5r 2  4C rr rr             jmp     NORMALIZE_FAC1
0017D8r 2               QINT3:
0017D8r 2  85 A1                sta     FAC+1
0017DAr 2  85 A2                sta     FAC+2
0017DCr 2  85 A3                sta     FAC+3
0017DEr 2               .ifndef CONFIG_SMALL
0017DEr 2  85 A4                sta     FAC+4
0017E0r 2               .endif
0017E0r 2  A8                   tay
0017E1r 2               RTS17:
0017E1r 2  60                   rts
0017E2r 2               
0017E2r 2               ; ----------------------------------------------------------------------------
0017E2r 2               ; CONVERT STRING TO FP VALUE IN FAC
0017E2r 2               ;
0017E2r 2               ; STRING POINTED TO BY TXTPTR
0017E2r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0017E2r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0017E2r 2               ; ----------------------------------------------------------------------------
0017E2r 2               FIN:
0017E2r 2  A0 00                ldy     #$00
0017E4r 2  A2 0A                ldx     #SERLEN-TMPEXP
0017E6r 2               L3B6F:
0017E6r 2  94 9C                sty     TMPEXP,x
0017E8r 2  CA                   dex
0017E9r 2  10 FB                bpl     L3B6F
0017EBr 2  90 0F                bcc     FIN2
0017EDr 2  C9 2D                cmp     #$2D
0017EFr 2  D0 04                bne     L3B7E
0017F1r 2  86 A6                stx     SERLEN
0017F3r 2  F0 04                beq     FIN1
0017F5r 2               L3B7E:
0017F5r 2  C9 2B                cmp     #$2B
0017F7r 2  D0 05                bne     FIN3
0017F9r 2               FIN1:
0017F9r 2  20 B2 00             jsr     CHRGET
0017FCr 2               FIN2:
0017FCr 2  90 5B                bcc     FIN9
0017FEr 2               FIN3:
0017FEr 2  C9 2E                cmp     #$2E
001800r 2  F0 2E                beq     FIN10
001802r 2  C9 45                cmp     #$45
001804r 2  D0 30                bne     FIN7
001806r 2  20 B2 00             jsr     CHRGET
001809r 2  90 17                bcc     FIN5
00180Br 2  C9 A2                cmp     #TOKEN_MINUS
00180Dr 2  F0 0E                beq     L3BA6
00180Fr 2  C9 2D                cmp     #$2D
001811r 2  F0 0A                beq     L3BA6
001813r 2  C9 A1                cmp     #TOKEN_PLUS
001815r 2  F0 08                beq     FIN4
001817r 2  C9 2B                cmp     #$2B
001819r 2  F0 04                beq     FIN4
00181Br 2  D0 07                bne     FIN6
00181Dr 2               L3BA6:
00181Dr 2               .ifndef CONFIG_ROR_WORKAROUND
00181Dr 2  66 9F                ror     EXPSGN
00181Fr 2               .else
00181Fr 2                       lda     #$00
00181Fr 2                       bcc     L3BAC
00181Fr 2                       lda     #$80
00181Fr 2               L3BAC:
00181Fr 2                       lsr     EXPSGN
00181Fr 2                       ora     EXPSGN
00181Fr 2                       sta     EXPSGN
00181Fr 2               .endif
00181Fr 2               FIN4:
00181Fr 2  20 B2 00             jsr     CHRGET
001822r 2               FIN5:
001822r 2  90 5C                bcc     GETEXP
001824r 2               FIN6:
001824r 2  24 9F                bit     EXPSGN
001826r 2  10 0E                bpl     FIN7
001828r 2  A9 00                lda     #$00
00182Ar 2  38                   sec
00182Br 2  E5 9D                sbc     EXPON
00182Dr 2  4C rr rr             jmp     FIN8
001830r 2               
001830r 2               ; ----------------------------------------------------------------------------
001830r 2               ; FOUND A DECIMAL POINT
001830r 2               ; ----------------------------------------------------------------------------
001830r 2               FIN10:
001830r 2               .ifndef CONFIG_ROR_WORKAROUND
001830r 2  66 9E                ror     LOWTR
001832r 2               .else
001832r 2                       lda     #$00
001832r 2                       bcc     L3BC9
001832r 2                       lda     #$80
001832r 2               L3BC9:
001832r 2                       lsr     LOWTR
001832r 2                       ora     LOWTR
001832r 2                       sta     LOWTR
001832r 2               .endif
001832r 2  24 9E                bit     LOWTR
001834r 2  50 C3                bvc     FIN1
001836r 2               
001836r 2               ; ----------------------------------------------------------------------------
001836r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001836r 2               ; ----------------------------------------------------------------------------
001836r 2               FIN7:
001836r 2  A5 9D                lda     EXPON
001838r 2               FIN8:
001838r 2  38                   sec
001839r 2  E5 9C                sbc     INDX
00183Br 2  85 9D                sta     EXPON
00183Dr 2  F0 12                beq     L3BEE
00183Fr 2  10 09                bpl     L3BE7
001841r 2               L3BDE:
001841r 2  20 rr rr             jsr     DIV10
001844r 2  E6 9D                inc     EXPON
001846r 2  D0 F9                bne     L3BDE
001848r 2  F0 07                beq     L3BEE
00184Ar 2               L3BE7:
00184Ar 2  20 rr rr             jsr     MUL10
00184Dr 2  C6 9D                dec     EXPON
00184Fr 2  D0 F9                bne     L3BE7
001851r 2               L3BEE:
001851r 2  A5 A6                lda     SERLEN
001853r 2  30 01                bmi     L3BF3
001855r 2  60                   rts
001856r 2               L3BF3:
001856r 2  4C rr rr             jmp     NEGOP
001859r 2               
001859r 2               ; ----------------------------------------------------------------------------
001859r 2               ; ACCUMULATE A DIGIT INTO FAC
001859r 2               ; ----------------------------------------------------------------------------
001859r 2               FIN9:
001859r 2  48                   pha
00185Ar 2  24 9E                bit     LOWTR
00185Cr 2  10 02                bpl     L3BFD
00185Er 2  E6 9C                inc     INDX
001860r 2               L3BFD:
001860r 2  20 rr rr             jsr     MUL10
001863r 2  68                   pla
001864r 2  38                   sec
001865r 2  E9 30                sbc     #$30
001867r 2  20 rr rr             jsr     ADDACC
00186Ar 2  4C rr rr             jmp     FIN1
00186Dr 2               
00186Dr 2               ; ----------------------------------------------------------------------------
00186Dr 2               ; ADD (A) TO FAC
00186Dr 2               ; ----------------------------------------------------------------------------
00186Dr 2               ADDACC:
00186Dr 2  48                   pha
00186Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001871r 2  68                   pla
001872r 2  20 rr rr             jsr     FLOAT
001875r 2  A5 AD                lda     ARGSIGN
001877r 2  45 A5                eor     FACSIGN
001879r 2  85 AE                sta     SGNCPR
00187Br 2  A6 A0                ldx     FAC
00187Dr 2  4C rr rr             jmp     FADDT
001880r 2               
001880r 2               ; ----------------------------------------------------------------------------
001880r 2               ; ACCUMULATE DIGIT OF EXPONENT
001880r 2               ; ----------------------------------------------------------------------------
001880r 2               GETEXP:
001880r 2  A5 9D                lda     EXPON
001882r 2  C9 0A                cmp     #MAX_EXPON
001884r 2  90 09                bcc     L3C2C
001886r 2               .ifdef CONFIG_10A
001886r 2  A9 64                lda     #$64
001888r 2               .endif
001888r 2  24 9F                bit     EXPSGN
00188Ar 2               .ifdef CONFIG_10A
00188Ar 2  30 11                bmi     L3C3A
00188Cr 2               .else
00188Cr 2                       bmi     LDC70
00188Cr 2               .endif
00188Cr 2  4C rr rr             jmp     OVERFLOW
00188Fr 2               LDC70:
00188Fr 2               .ifndef CONFIG_10A
00188Fr 2                       lda     #$0B
00188Fr 2               .endif
00188Fr 2               L3C2C:
00188Fr 2  0A                   asl     a
001890r 2  0A                   asl     a
001891r 2  18                   clc
001892r 2  65 9D                adc     EXPON
001894r 2  0A                   asl     a
001895r 2  18                   clc
001896r 2  A0 00                ldy     #$00
001898r 2  71 B9                adc     (TXTPTR),y
00189Ar 2  38                   sec
00189Br 2  E9 30                sbc     #$30
00189Dr 2               L3C3A:
00189Dr 2  85 9D                sta     EXPON
00189Fr 2  4C rr rr             jmp     FIN4
0018A2r 2               
0018A2r 2               ; ----------------------------------------------------------------------------
0018A2r 2               .ifdef CONFIG_SMALL
0018A2r 2               ; these values are /1000 of what the labels say
0018A2r 2               CON_99999999_9:
0018A2r 2                       .byte   $91,$43,$4F,$F8
0018A2r 2               CON_999999999:
0018A2r 2               		.byte   $94,$74,$23,$F7
0018A2r 2               CON_BILLION:
0018A2r 2                       .byte   $94,$74,$24,$00
0018A2r 2               .else
0018A2r 2               CON_99999999_9:
0018A2r 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
0018A6r 2  FD           
0018A7r 2               CON_999999999:
0018A7r 2               .ifndef CONFIG_10A
0018A7r 2                       .byte   $9E,$6E,$6B,$27,$FE
0018A7r 2               .else
0018A7r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
0018ABr 2  FD           
0018ACr 2               .endif
0018ACr 2               CON_BILLION:
0018ACr 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
0018B0r 2  00           
0018B1r 2               .endif
0018B1r 2               
0018B1r 2               ; ----------------------------------------------------------------------------
0018B1r 2               ; PRINT "IN <LINE #>"
0018B1r 2               ; ----------------------------------------------------------------------------
0018B1r 2               INPRT:
0018B1r 2               .ifdef KBD
0018B1r 2                       jsr     LFE0B
0018B1r 2                       .byte	" in"
0018B1r 2                       .byte	0
0018B1r 2               .else
0018B1r 2  A9 rr                lda     #<QT_IN
0018B3r 2  A0 rr                ldy     #>QT_IN
0018B5r 2  20 rr rr             jsr     GOSTROUT2
0018B8r 2               .endif
0018B8r 2  A5 79                lda     CURLIN+1
0018BAr 2  A6 78                ldx     CURLIN
0018BCr 2               
0018BCr 2               ; ----------------------------------------------------------------------------
0018BCr 2               ; PRINT A,X AS DECIMAL INTEGER
0018BCr 2               ; ----------------------------------------------------------------------------
0018BCr 2               LINPRT:
0018BCr 2  85 A1                sta     FAC+1
0018BEr 2  86 A2                stx     FAC+2
0018C0r 2  A2 90                ldx     #$90
0018C2r 2  38                   sec
0018C3r 2  20 rr rr             jsr     FLOAT2
0018C6r 2  20 rr rr             jsr     FOUT
0018C9r 2               GOSTROUT2:
0018C9r 2  4C rr rr             jmp     STROUT
0018CCr 2               
0018CCr 2               ; ----------------------------------------------------------------------------
0018CCr 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0018CCr 2               ; RETURN WITH (Y,A) POINTING AT STRING
0018CCr 2               ; ----------------------------------------------------------------------------
0018CCr 2               FOUT:
0018CCr 2  A0 01                ldy     #$01
0018CEr 2               
0018CEr 2               ; ----------------------------------------------------------------------------
0018CEr 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0018CEr 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0018CEr 2               ; (THIS IS USED AS A FLAG)
0018CEr 2               ; ----------------------------------------------------------------------------
0018CEr 2               FOUT1:
0018CEr 2  A9 2D                lda     #$2D
0018D0r 2  88           				dey
0018D1r 2  24 A5                bit     FACSIGN
0018D3r 2  10 04                bpl     L3C73
0018D5r 2  C8                   iny
0018D6r 2  99 FF 00             sta     $FF,y
0018D9r 2               L3C73:
0018D9r 2  85 A5                sta     FACSIGN
0018DBr 2  84 B0                sty     STRNG2
0018DDr 2  C8                   iny
0018DEr 2  A9 30                lda     #$30
0018E0r 2  A6 A0                ldx     FAC
0018E2r 2  D0 03                bne     L3C84
0018E4r 2  4C rr rr             jmp     FOUT4
0018E7r 2               L3C84:
0018E7r 2  A9 00                lda     #$00
0018E9r 2  E0 80                cpx     #$80
0018EBr 2  F0 02                beq     L3C8C
0018EDr 2  B0 09                bcs     L3C95
0018EFr 2               L3C8C:
0018EFr 2  A9 rr                lda     #<CON_BILLION
0018F1r 2  A0 rr                ldy     #>CON_BILLION
0018F3r 2  20 rr rr             jsr     FMULT
0018F6r 2               .ifdef CONFIG_SMALL
0018F6r 2                       lda     #<-6 ; exponent adjustment
0018F6r 2               .else
0018F6r 2  A9 F7                lda     #<-9
0018F8r 2               .endif
0018F8r 2               L3C95:
0018F8r 2  85 9C                sta     INDX
0018FAr 2               ; ----------------------------------------------------------------------------
0018FAr 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0018FAr 2               ; ----------------------------------------------------------------------------
0018FAr 2               L3C97:
0018FAr 2  A9 rr                lda     #<CON_999999999
0018FCr 2  A0 rr                ldy     #>CON_999999999
0018FEr 2  20 rr rr             jsr     FCOMP
001901r 2  F0 1E                beq     L3CBE
001903r 2  10 12                bpl     L3CB4
001905r 2               L3CA2:
001905r 2  A9 rr                lda     #<CON_99999999_9
001907r 2  A0 rr                ldy     #>CON_99999999_9
001909r 2  20 rr rr             jsr     FCOMP
00190Cr 2  F0 02                beq     L3CAD
00190Er 2  10 0E                bpl     L3CBB
001910r 2               L3CAD:
001910r 2  20 rr rr             jsr     MUL10
001913r 2  C6 9C                dec     INDX
001915r 2  D0 EE                bne     L3CA2
001917r 2               L3CB4:
001917r 2  20 rr rr             jsr     DIV10
00191Ar 2  E6 9C                inc     INDX
00191Cr 2  D0 DC                bne     L3C97
00191Er 2               L3CBB:
00191Er 2  20 rr rr             jsr     FADDH
001921r 2               L3CBE:
001921r 2  20 rr rr             jsr     QINT
001924r 2               ; ----------------------------------------------------------------------------
001924r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001924r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001924r 2               ;
001924r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001924r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001924r 2               ; ----------------------------------------------------------------------------
001924r 2  A2 01                ldx     #$01
001926r 2  A5 9C                lda     INDX
001928r 2  18                   clc
001929r 2  69 0A                adc     #3*BYTES_FP-5
00192Br 2  30 09                bmi     L3CD3
00192Dr 2  C9 0B                cmp     #3*BYTES_FP-4
00192Fr 2  B0 06                bcs     L3CD4
001931r 2  69 FF                adc     #$FF
001933r 2  AA                   tax
001934r 2  A9 02                lda     #$02
001936r 2               L3CD3:
001936r 2  38                   sec
001937r 2               L3CD4:
001937r 2  E9 02                sbc     #$02
001939r 2  85 9D                sta     EXPON
00193Br 2  86 9C                stx     INDX
00193Dr 2  8A                   txa
00193Er 2  F0 02                beq     L3CDF
001940r 2  10 13                bpl     L3CF2
001942r 2               L3CDF:
001942r 2  A4 B0                ldy     STRNG2
001944r 2  A9 2E                lda     #$2E
001946r 2  C8                   iny
001947r 2  99 FF 00             sta     $FF,y
00194Ar 2  8A                   txa
00194Br 2  F0 06                beq     L3CF0
00194Dr 2  A9 30                lda     #$30
00194Fr 2  C8                   iny
001950r 2  99 FF 00             sta     $FF,y
001953r 2               L3CF0:
001953r 2  84 B0                sty     STRNG2
001955r 2               ; ----------------------------------------------------------------------------
001955r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001955r 2               ; ----------------------------------------------------------------------------
001955r 2               L3CF2:
001955r 2  A0 00                ldy     #$00
001957r 2               LDD3A:
001957r 2  A2 80                ldx     #$80
001959r 2               L3CF6:
001959r 2  A5 A4                lda     FAC_LAST
00195Br 2  18                   clc
00195Cr 2               .ifndef CONFIG_SMALL
00195Cr 2  79 rr rr             adc     DECTBL+3,y
00195Fr 2  85 A4                sta     FAC+4
001961r 2  A5 A3                lda     FAC+3
001963r 2               .endif
001963r 2  79 rr rr             adc     DECTBL+2,y
001966r 2  85 A3                sta     FAC+3
001968r 2  A5 A2                lda     FAC+2
00196Ar 2  79 rr rr             adc     DECTBL+1,y
00196Dr 2  85 A2                sta     FAC+2
00196Fr 2  A5 A1                lda     FAC+1
001971r 2  79 rr rr             adc     DECTBL,y
001974r 2  85 A1                sta     FAC+1
001976r 2  E8                   inx
001977r 2  B0 04                bcs     L3D1A
001979r 2  10 DE                bpl     L3CF6
00197Br 2  30 02                bmi     L3D1C
00197Dr 2               L3D1A:
00197Dr 2  30 DA                bmi     L3CF6
00197Fr 2               L3D1C:
00197Fr 2  8A                   txa
001980r 2  90 04                bcc     L3D23
001982r 2  49 FF                eor     #$FF
001984r 2  69 0A                adc     #$0A
001986r 2               L3D23:
001986r 2  69 2F                adc     #$2F
001988r 2  C8                   iny
001989r 2  C8                   iny
00198Ar 2  C8                   iny
00198Br 2               .ifndef CONFIG_SMALL
00198Br 2  C8                   iny
00198Cr 2               .endif
00198Cr 2  84 86                sty     VARPNT
00198Er 2  A4 B0                ldy     STRNG2
001990r 2  C8                   iny
001991r 2  AA                   tax
001992r 2  29 7F                and     #$7F
001994r 2  99 FF 00             sta     $FF,y
001997r 2  C6 9C                dec     INDX
001999r 2  D0 06                bne     L3D3E
00199Br 2  A9 2E                lda     #$2E
00199Dr 2  C8                   iny
00199Er 2  99 FF 00             sta     $FF,y
0019A1r 2               L3D3E:
0019A1r 2  84 B0                sty     STRNG2
0019A3r 2  A4 86                ldy     VARPNT
0019A5r 2  8A                   txa
0019A6r 2  49 FF                eor     #$FF
0019A8r 2  29 80                and     #$80
0019AAr 2  AA                   tax
0019ABr 2  C0 24                cpy     #DECTBL_END-DECTBL
0019ADr 2               .ifdef CONFIG_CBM_ALL
0019ADr 2                       beq     LDD96
0019ADr 2                       cpy     #$3C ; XXX
0019ADr 2               .endif
0019ADr 2  D0 AA                bne     L3CF6
0019AFr 2               ; ----------------------------------------------------------------------------
0019AFr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0019AFr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0019AFr 2               ; DECIMAL POINT.
0019AFr 2               ; ----------------------------------------------------------------------------
0019AFr 2               LDD96:
0019AFr 2  A4 B0                ldy     STRNG2
0019B1r 2               L3D4E:
0019B1r 2  B9 FF 00             lda     $FF,y
0019B4r 2  88                   dey
0019B5r 2  C9 30                cmp     #$30
0019B7r 2  F0 F8                beq     L3D4E
0019B9r 2  C9 2E                cmp     #$2E
0019BBr 2  F0 01                beq     L3D5B
0019BDr 2  C8                   iny
0019BEr 2               L3D5B:
0019BEr 2  A9 2B                lda     #$2B
0019C0r 2  A6 9D                ldx     EXPON
0019C2r 2  F0 2E                beq     L3D8F
0019C4r 2  10 08                bpl     L3D6B
0019C6r 2  A9 00                lda     #$00
0019C8r 2  38                   sec
0019C9r 2  E5 9D                sbc     EXPON
0019CBr 2  AA                   tax
0019CCr 2  A9 2D                lda     #$2D
0019CEr 2               L3D6B:
0019CEr 2  99 01 01             sta     STACK+1,y
0019D1r 2  A9 45                lda     #$45
0019D3r 2  99 00 01             sta     STACK,y
0019D6r 2  8A                   txa
0019D7r 2  A2 2F                ldx     #$2F
0019D9r 2  38                   sec
0019DAr 2               L3D77:
0019DAr 2  E8                   inx
0019DBr 2  E9 0A                sbc     #$0A
0019DDr 2  B0 FB                bcs     L3D77
0019DFr 2  69 3A                adc     #$3A
0019E1r 2  99 03 01             sta     STACK+3,y
0019E4r 2  8A                   txa
0019E5r 2  99 02 01             sta     STACK+2,y
0019E8r 2  A9 00                lda     #$00
0019EAr 2  99 04 01             sta     STACK+4,y
0019EDr 2  F0 08                beq     L3D94
0019EFr 2               FOUT4:
0019EFr 2  99 FF 00             sta     $FF,y
0019F2r 2               L3D8F:
0019F2r 2  A9 00                lda     #$00
0019F4r 2  99 00 01             sta     STACK,y
0019F7r 2               L3D94:
0019F7r 2  A9 00                lda     #$00
0019F9r 2  A0 01                ldy     #$01
0019FBr 2  60                   rts
0019FCr 2               
0019FCr 2               ; ----------------------------------------------------------------------------
0019FCr 2               CON_HALF:
0019FCr 2               .ifdef CONFIG_SMALL
0019FCr 2                       .byte   $80,$00,$00,$00
0019FCr 2               .else
0019FCr 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001A00r 2  00           
001A01r 2               .endif
001A01r 2               
001A01r 2               ; ----------------------------------------------------------------------------
001A01r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001A01r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001A01r 2               ; ----------------------------------------------------------------------------
001A01r 2               DECTBL:
001A01r 2               .ifdef CONFIG_SMALL
001A01r 2                       .byte   $FE,$79,$60 ; -100000
001A01r 2               		.byte	$00,$27,$10 ; 10000
001A01r 2               		.byte	$FF,$FC,$18 ; -1000
001A01r 2               		.byte	$00,$00,$64 ; 100
001A01r 2               		.byte	$FF,$FF,$F6 ; -10
001A01r 2               		.byte	$00,$00,$01 ; 1
001A01r 2               .else
001A01r 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001A05r 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001A09r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001A0Dr 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001A11r 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001A15r 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001A19r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001A1Dr 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001A21r 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001A25r 2               .endif
001A25r 2               DECTBL_END:
001A25r 2               .ifdef CONFIG_CBM_ALL
001A25r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001A25r 2               		.byte	$00,$03,$4B,$C0
001A25r 2               		.byte	$FF,$FF,$73,$60
001A25r 2               		.byte	$00,$00,$0E,$10
001A25r 2               		.byte	$FF,$FF,$FD,$A8
001A25r 2               		.byte	$00,$00,$00,$3C
001A25r 2               .endif
001A25r 2               .ifdef CONFIG_2
001A25r 2               C_ZERO = CON_HALF + 2
001A25r 2               .endif
001A25r 2               
001A25r 2               ; ----------------------------------------------------------------------------
001A25r 2               ; "SQR" FUNCTION
001A25r 2               ; ----------------------------------------------------------------------------
001A25r 2               SQR:
001A25r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A28r 2  A9 rr                lda     #<CON_HALF
001A2Ar 2  A0 rr                ldy     #>CON_HALF
001A2Cr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A2Fr 2               
001A2Fr 2               ; ----------------------------------------------------------------------------
001A2Fr 2               ; EXPONENTIATION OPERATION
001A2Fr 2               ;
001A2Fr 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001A2Fr 2               ; ----------------------------------------------------------------------------
001A2Fr 2               FPWRT:
001A2Fr 2  F0 70                beq     EXP
001A31r 2  A5 A8                lda     ARG
001A33r 2  D0 03                bne     L3DD5
001A35r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001A38r 2               L3DD5:
001A38r 2  A2 8D                ldx     #TEMP3
001A3Ar 2  A0 00                ldy     #$00
001A3Cr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001A3Fr 2  A5 AD                lda     ARGSIGN
001A41r 2  10 0F                bpl     L3DEF
001A43r 2  20 rr rr             jsr     INT
001A46r 2  A9 8D                lda     #TEMP3
001A48r 2  A0 00                ldy     #$00
001A4Ar 2  20 rr rr             jsr     FCOMP
001A4Dr 2  D0 03                bne     L3DEF
001A4Fr 2  98                   tya
001A50r 2  A4 0D                ldy     CHARAC
001A52r 2               L3DEF:
001A52r 2  20 rr rr             jsr     MFA
001A55r 2  98                   tya
001A56r 2  48                   pha
001A57r 2  20 rr rr             jsr     LOG
001A5Ar 2  A9 8D                lda     #TEMP3
001A5Cr 2  A0 00                ldy     #$00
001A5Er 2  20 rr rr             jsr     FMULT
001A61r 2  20 rr rr             jsr     EXP
001A64r 2  68                   pla
001A65r 2  4A                   lsr     a
001A66r 2  90 0A                bcc     L3E0F
001A68r 2               
001A68r 2               ; ----------------------------------------------------------------------------
001A68r 2               ; NEGATE VALUE IN FAC
001A68r 2               ; ----------------------------------------------------------------------------
001A68r 2               NEGOP:
001A68r 2  A5 A0                lda     FAC
001A6Ar 2  F0 06                beq     L3E0F
001A6Cr 2  A5 A5                lda     FACSIGN
001A6Er 2  49 FF                eor     #$FF
001A70r 2  85 A5                sta     FACSIGN
001A72r 2               L3E0F:
001A72r 2  60                   rts
001A73r 2               
001A73r 2               ; ----------------------------------------------------------------------------
001A73r 2               .ifdef CONFIG_SMALL
001A73r 2               CON_LOG_E:
001A73r 2                       .byte   $81,$38,$AA,$3B
001A73r 2               POLY_EXP:
001A73r 2               		.byte	$06
001A73r 2               		.byte	$74,$63,$90,$8C
001A73r 2               		.byte	$77,$23,$0C,$AB
001A73r 2               		.byte	$7A,$1E,$94,$00
001A73r 2               		.byte	$7C,$63,$42,$80
001A73r 2               		.byte	$7E,$75,$FE,$D0
001A73r 2               		.byte	$80,$31,$72,$15
001A73r 2               		.byte	$81,$00,$00,$00
001A73r 2               .else
001A73r 2               CON_LOG_E:
001A73r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001A77r 2  29           
001A78r 2               POLY_EXP:
001A78r 2  07                   .byte   $07
001A79r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001A7Dr 2  56           
001A7Er 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001A82r 2  1B           
001A83r 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001A87r 2  85           
001A88r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001A8Cr 2  2A           
001A8Dr 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001A91r 2  0A           
001A92r 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001A96r 2  C6           
001A97r 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001A9Br 2  10           
001A9Cr 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001AA0r 2  00           
001AA1r 2               .endif
001AA1r 2               
001AA1r 2               ; ----------------------------------------------------------------------------
001AA1r 2               ; "EXP" FUNCTION
001AA1r 2               ;
001AA1r 2               ; FAC = E ^ FAC
001AA1r 2               ; ----------------------------------------------------------------------------
001AA1r 2               EXP:
001AA1r 2  A9 rr                lda     #<CON_LOG_E
001AA3r 2  A0 rr                ldy     #>CON_LOG_E
001AA5r 2  20 rr rr             jsr     FMULT
001AA8r 2  A5 AF                lda     FACEXTENSION
001AAAr 2  69 50                adc     #$50
001AACr 2  90 03                bcc     L3E4E
001AAEr 2  20 rr rr             jsr     INCREMENT_MANTISSA
001AB1r 2               L3E4E:
001AB1r 2  85 95                sta     ARGEXTENSION
001AB3r 2  20 rr rr             jsr     MAF
001AB6r 2  A5 A0                lda     FAC
001AB8r 2  C9 88                cmp     #$88
001ABAr 2  90 03                bcc     L3E5C
001ABCr 2               L3E59:
001ABCr 2  20 rr rr             jsr     OUTOFRNG
001ABFr 2               L3E5C:
001ABFr 2  20 rr rr             jsr     INT
001AC2r 2  A5 0D                lda     CHARAC
001AC4r 2  18                   clc
001AC5r 2  69 81                adc     #$81
001AC7r 2  F0 F3                beq     L3E59
001AC9r 2  38                   sec
001ACAr 2  E9 01                sbc     #$01
001ACCr 2  48                   pha
001ACDr 2  A2 05                ldx     #BYTES_FP
001ACFr 2               L3E6C:
001ACFr 2  B5 A8                lda     ARG,x
001AD1r 2  B4 A0                ldy     FAC,x
001AD3r 2  95 A0                sta     FAC,x
001AD5r 2  94 A8                sty     ARG,x
001AD7r 2  CA                   dex
001AD8r 2  10 F5                bpl     L3E6C
001ADAr 2  A5 95                lda     ARGEXTENSION
001ADCr 2  85 AF                sta     FACEXTENSION
001ADEr 2  20 rr rr             jsr     FSUBT
001AE1r 2  20 rr rr             jsr     NEGOP
001AE4r 2  A9 rr                lda     #<POLY_EXP
001AE6r 2  A0 rr                ldy     #>POLY_EXP
001AE8r 2  20 rr rr             jsr     POLYNOMIAL
001AEBr 2  A9 00                lda     #$00
001AEDr 2  85 AE                sta     SGNCPR
001AEFr 2  68                   pla
001AF0r 2  20 rr rr             jsr     ADD_EXPONENTS1
001AF3r 2  60                   rts
001AF4r 2               
001AF4r 2               ; ----------------------------------------------------------------------------
001AF4r 2               ; ODD POLYNOMIAL SUBROUTINE
001AF4r 2               ;
001AF4r 2               ; F(X) = X * P(X^2)
001AF4r 2               ;
001AF4r 2               ; WHERE:  X IS VALUE IN FAC
001AF4r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001AF4r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001AF4r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001AF4r 2               ;
001AF4r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001AF4r 2               ; ----------------------------------------------------------------------------
001AF4r 2               POLYNOMIAL_ODD:
001AF4r 2  85 B0                sta     STRNG2
001AF6r 2  84 B1                sty     STRNG2+1
001AF8r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001AFBr 2  A9 96                lda     #TEMP1X
001AFDr 2  20 rr rr             jsr     FMULT
001B00r 2  20 rr rr             jsr     SERMAIN
001B03r 2  A9 96                lda     #TEMP1X
001B05r 2  A0 00                ldy     #$00
001B07r 2  4C rr rr             jmp     FMULT
001B0Ar 2               
001B0Ar 2               ; ----------------------------------------------------------------------------
001B0Ar 2               ; NORMAL POLYNOMIAL SUBROUTINE
001B0Ar 2               ;
001B0Ar 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001B0Ar 2               ;
001B0Ar 2               ; WHERE:  X IS VALUE IN FAC
001B0Ar 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001B0Ar 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001B0Ar 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B0Ar 2               ; ----------------------------------------------------------------------------
001B0Ar 2               POLYNOMIAL:
001B0Ar 2  85 B0                sta     STRNG2
001B0Cr 2  84 B1                sty     STRNG2+1
001B0Er 2               SERMAIN:
001B0Er 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001B11r 2  B1 B0                lda     (STRNG2),y
001B13r 2  85 A6                sta     SERLEN
001B15r 2  A4 B0                ldy     STRNG2
001B17r 2  C8                   iny
001B18r 2  98                   tya
001B19r 2  D0 02                bne     L3EBA
001B1Br 2  E6 B1                inc     STRNG2+1
001B1Dr 2               L3EBA:
001B1Dr 2  85 B0                sta     STRNG2
001B1Fr 2  A4 B1                ldy     STRNG2+1
001B21r 2               L3EBE:
001B21r 2  20 rr rr             jsr     FMULT
001B24r 2  A5 B0                lda     STRNG2
001B26r 2  A4 B1                ldy     STRNG2+1
001B28r 2  18                   clc
001B29r 2  69 05                adc     #BYTES_FP
001B2Br 2  90 01                bcc     L3ECB
001B2Dr 2  C8                   iny
001B2Er 2               L3ECB:
001B2Er 2  85 B0                sta     STRNG2
001B30r 2  84 B1                sty     STRNG2+1
001B32r 2  20 rr rr             jsr     FADD
001B35r 2  A9 9B                lda     #TEMP2
001B37r 2  A0 00                ldy     #$00
001B39r 2  C6 A6                dec     SERLEN
001B3Br 2  D0 E4                bne     L3EBE
001B3Dr 2               RTS19:
001B3Dr 2  60                   rts
001B3Er 2               
001B3Er 1               .include "chrget.s"
001B3Er 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 B9                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 BA                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001B3Er 2               
001B3Er 2               ; ----------------------------------------------------------------------------
001B3Er 2               ; "RND" FUNCTION
001B3Er 2               ; ----------------------------------------------------------------------------
001B3Er 2               
001B3Er 2               .ifdef KBD
001B3Er 2               RND:
001B3Er 2                       ldx     #$10
001B3Er 2                       jsr     SIGN
001B3Er 2                       beq     LFC26
001B3Er 2                       bmi     LFC10
001B3Er 2                       lda     RNDSEED
001B3Er 2                       ldy     RNDSEED+1
001B3Er 2               LFBFA:
001B3Er 2                       sta     FAC+2
001B3Er 2                       sty     FAC+1
001B3Er 2               LFBFE:
001B3Er 2                       asl     a
001B3Er 2                       asl     a
001B3Er 2                       eor     FAC+2
001B3Er 2                       asl     a
001B3Er 2                       eor     FAC+1
001B3Er 2                       asl     a
001B3Er 2                       asl     a
001B3Er 2                       asl     a
001B3Er 2                       asl     a
001B3Er 2                       eor     FAC+1
001B3Er 2                       asl     a
001B3Er 2                       rol     FAC+2
001B3Er 2                       rol     FAC+1
001B3Er 2               LFC10:
001B3Er 2                       lda     FAC+2
001B3Er 2                       dex
001B3Er 2                       bne     LFBFE
001B3Er 2                       sta     RNDSEED
001B3Er 2                       sta     FAC+3
001B3Er 2                       lda     FAC+1
001B3Er 2                       sta     RNDSEED+1
001B3Er 2                       lda     #$80
001B3Er 2                       sta     FAC
001B3Er 2                       stx     FACSIGN
001B3Er 2                       jmp     NORMALIZE_FAC2
001B3Er 2               LFC26:
001B3Er 2                       ldy     $03CA
001B3Er 2                       lda     $03C7
001B3Er 2                       ora     #$01
001B3Er 2               GOMOVMF:
001B3Er 2                       bne     LFBFA
001B3Er 2                       .byte   $F0
001B3Er 2               .else
001B3Er 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001B3Er 2               ; (non CONFIG_SMALL)
001B3Er 2               CONRND1:
001B3Er 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001B42r 2               CONRND2:
001B42r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001B46r 2               RND:
001B46r 2  20 rr rr             jsr     SIGN
001B49r 2               .ifdef CONFIG_CBM_ALL
001B49r 2                       bmi     L3F01
001B49r 2                       bne     LDF63
001B49r 2                       lda     ENTROPY
001B49r 2                       sta     FAC+1
001B49r 2                       lda     ENTROPY+4
001B49r 2                       sta     FAC+2
001B49r 2                       lda     ENTROPY+1
001B49r 2                       sta     FAC+3
001B49r 2                       lda     ENTROPY+5
001B49r 2                       sta     FAC+4
001B49r 2                       jmp     LDF88
001B49r 2               LDF63:
001B49r 2               .else
001B49r 2  AA                   tax
001B4Ar 2  30 18                bmi     L3F01
001B4Cr 2               .endif
001B4Cr 2  A9 CA                lda     #<RNDSEED
001B4Er 2  A0 00                ldy     #>RNDSEED
001B50r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B53r 2               .ifndef CONFIG_CBM_ALL
001B53r 2  8A                   txa
001B54r 2  F0 E7                beq     RTS19
001B56r 2               .endif
001B56r 2  A9 rr                lda     #<CONRND1
001B58r 2  A0 rr                ldy     #>CONRND1
001B5Ar 2  20 rr rr             jsr     FMULT
001B5Dr 2  A9 rr                lda     #<CONRND2
001B5Fr 2  A0 rr                ldy     #>CONRND2
001B61r 2  20 rr rr             jsr     FADD
001B64r 2               L3F01:
001B64r 2  A6 A4                ldx     FAC_LAST
001B66r 2  A5 A1                lda     FAC+1
001B68r 2  85 A4                sta     FAC_LAST
001B6Ar 2  86 A1                stx     FAC+1
001B6Cr 2               .ifdef CONFIG_CBM_ALL
001B6Cr 2                       ldx     FAC+2
001B6Cr 2                       lda     FAC+3
001B6Cr 2                       sta     FAC+2
001B6Cr 2                       stx     FAC+3
001B6Cr 2               LDF88:
001B6Cr 2               .endif
001B6Cr 2  A9 00                lda     #$00
001B6Er 2  85 A5                sta     FACSIGN
001B70r 2  A5 A0                lda     FAC
001B72r 2  85 AF                sta     FACEXTENSION
001B74r 2  A9 80                lda     #$80
001B76r 2  85 A0                sta     FAC
001B78r 2  20 rr rr             jsr     NORMALIZE_FAC2
001B7Br 2  A2 CA                ldx     #<RNDSEED
001B7Dr 2  A0 00                ldy     #>RNDSEED
001B7Fr 2               GOMOVMF:
001B7Fr 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001B82r 2               .endif
001B82r 2               
001B82r 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001B82r 2               
001B82r 2               SIN_COS_TAN_ATN:
001B82r 2               ; ----------------------------------------------------------------------------
001B82r 2               ; "COS" FUNCTION
001B82r 2               ; ----------------------------------------------------------------------------
001B82r 2               COS:
001B82r 2  A9 rr                lda     #<CON_PI_HALF
001B84r 2  A0 rr                ldy     #>CON_PI_HALF
001B86r 2  20 rr rr             jsr     FADD
001B89r 2               
001B89r 2               ; ----------------------------------------------------------------------------
001B89r 2               ; "SIN" FUNCTION
001B89r 2               ; ----------------------------------------------------------------------------
001B89r 2               SIN:
001B89r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B8Cr 2  A9 rr                lda     #<CON_PI_DOUB
001B8Er 2  A0 rr                ldy     #>CON_PI_DOUB
001B90r 2  A6 AD                ldx     ARGSIGN
001B92r 2  20 rr rr             jsr     DIV
001B95r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B98r 2  20 rr rr             jsr     INT
001B9Br 2  A9 00                lda     #$00
001B9Dr 2  85 AE                sta     STRNG1
001B9Fr 2  20 rr rr             jsr     FSUBT
001BA2r 2               ; ----------------------------------------------------------------------------
001BA2r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001BA2r 2               ;
001BA2r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001BA2r 2               ;
001BA2r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001BA2r 2               ; ----------------------------------------------------------------------------
001BA2r 2  A9 rr                lda     #<QUARTER
001BA4r 2  A0 rr                ldy     #>QUARTER
001BA6r 2  20 rr rr             jsr     FSUB
001BA9r 2  A5 A5                lda     FACSIGN
001BABr 2  48                   pha
001BACr 2  10 0D                bpl     SIN1
001BAEr 2  20 rr rr             jsr     FADDH
001BB1r 2  A5 A5                lda     FACSIGN
001BB3r 2  30 09                bmi     L3F5B
001BB5r 2  A5 16                lda     CPRMASK
001BB7r 2  49 FF                eor     #$FF
001BB9r 2  85 16                sta     CPRMASK
001BBBr 2               ; ----------------------------------------------------------------------------
001BBBr 2               ; IF FALL THRU, RANGE IS 0...1/2
001BBBr 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001BBBr 2               ; ----------------------------------------------------------------------------
001BBBr 2               SIN1:
001BBBr 2  20 rr rr             jsr     NEGOP
001BBEr 2               ; ----------------------------------------------------------------------------
001BBEr 2               ; IF FALL THRU, RANGE IS -1/2...0
001BBEr 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001BBEr 2               ; ----------------------------------------------------------------------------
001BBEr 2               L3F5B:
001BBEr 2  A9 rr                lda     #<QUARTER
001BC0r 2  A0 rr                ldy     #>QUARTER
001BC2r 2  20 rr rr             jsr     FADD
001BC5r 2  68                   pla
001BC6r 2  10 03                bpl     L3F68
001BC8r 2  20 rr rr             jsr     NEGOP
001BCBr 2               L3F68:
001BCBr 2  A9 rr                lda     #<POLY_SIN
001BCDr 2  A0 rr                ldy     #>POLY_SIN
001BCFr 2  4C rr rr             jmp     POLYNOMIAL_ODD
001BD2r 2               
001BD2r 2               ; ----------------------------------------------------------------------------
001BD2r 2               ; "TAN" FUNCTION
001BD2r 2               ;
001BD2r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001BD2r 2               ; ----------------------------------------------------------------------------
001BD2r 2               TAN:
001BD2r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001BD5r 2  A9 00                lda     #$00
001BD7r 2  85 16                sta     CPRMASK
001BD9r 2  20 rr rr             jsr     SIN
001BDCr 2  A2 8D                ldx     #TEMP3
001BDEr 2  A0 00                ldy     #$00
001BE0r 2  20 rr rr             jsr     GOMOVMF
001BE3r 2  A9 96                lda     #TEMP1+(5-BYTES_FP)
001BE5r 2  A0 00                ldy     #$00
001BE7r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BEAr 2  A9 00                lda     #$00
001BECr 2  85 A5                sta     FACSIGN
001BEEr 2  A5 16                lda     CPRMASK
001BF0r 2  20 rr rr             jsr     TAN1
001BF3r 2  A9 8D                lda     #TEMP3
001BF5r 2  A0 00                ldy     #$00
001BF7r 2  4C rr rr             jmp     FDIV
001BFAr 2               TAN1:
001BFAr 2  48                   pha
001BFBr 2  4C rr rr             jmp     SIN1
001BFEr 2               
001BFEr 2               ; ----------------------------------------------------------------------------
001BFEr 2               .ifdef CONFIG_SMALL
001BFEr 2               CON_PI_HALF:
001BFEr 2                       .byte   $81,$49,$0F,$DB
001BFEr 2               CON_PI_DOUB:
001BFEr 2                       .byte   $83,$49,$0F,$DB
001BFEr 2               QUARTER:
001BFEr 2                       .byte   $7F,$00,$00,$00
001BFEr 2               POLY_SIN:
001BFEr 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001BFEr 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001BFEr 2                       .byte   $E1,$83,$49,$0F,$DB
001BFEr 2               .else
001BFEr 2               CON_PI_HALF:
001BFEr 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001C02r 2  A2           
001C03r 2               CON_PI_DOUB:
001C03r 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001C07r 2  A2           
001C08r 2               QUARTER:
001C08r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001C0Cr 2  00           
001C0Dr 2               POLY_SIN:
001C0Dr 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001C11r 2  2D 1B 86 28  
001C15r 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001C19r 2  99 68 89 01  
001C1Dr 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001C21r 2  E1 86 A5 5D  
001C25r 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001C29r 2  0F DA A2     
001C2Cr 2               
001C2Cr 2               .ifdef INCLUDE_EASTER_EGG_TEXT
001C2Cr 2                 .ifndef CONFIG_11
001C2Cr 2               ; no easter egg text before BASIC 1.1
001C2Cr 2                 .elseif !.def(CONFIG_2A)
001C2Cr 2               ; ASCII encoded easter egg
001C2Cr 2               MICROSOFT:
001C2Cr 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001C2Cr 2                       .byte   $CE,$CA
001C2Cr 2                 .else
001C2Cr 2               ; PET encoded easter egg text since CBM2
001C2Cr 2               MICROSOFT:
001C2Cr 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001C2Cr 2                       .byte   $89,$CD
001C2Cr 2                 .endif
001C2Cr 2               .endif
001C2Cr 2               .endif
001C2Cr 2               ; ----------------------------------------------------------------------------
001C2Cr 2               ; "ATN" FUNCTION
001C2Cr 2               ; ----------------------------------------------------------------------------
001C2Cr 2               ATN:
001C2Cr 2  A5 A5                lda     FACSIGN
001C2Er 2  48                   pha
001C2Fr 2  10 03                bpl     L3FDB
001C31r 2  20 rr rr             jsr     NEGOP
001C34r 2               L3FDB:
001C34r 2  A5 A0                lda     FAC
001C36r 2  48                   pha
001C37r 2  C9 81                cmp     #$81
001C39r 2  90 07                bcc     L3FE9
001C3Br 2  A9 rr                lda     #<CON_ONE
001C3Dr 2  A0 rr                ldy     #>CON_ONE
001C3Fr 2  20 rr rr             jsr     FDIV
001C42r 2               ; ----------------------------------------------------------------------------
001C42r 2               ; 0 <= X <= 1
001C42r 2               ; 0 <= ATN(X) <= PI/8
001C42r 2               ; ----------------------------------------------------------------------------
001C42r 2               L3FE9:
001C42r 2  A9 rr                lda     #<POLY_ATN
001C44r 2  A0 rr                ldy     #>POLY_ATN
001C46r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001C49r 2  68                   pla
001C4Ar 2  C9 81                cmp     #$81
001C4Cr 2  90 07                bcc     L3FFC
001C4Er 2  A9 rr                lda     #<CON_PI_HALF
001C50r 2  A0 rr                ldy     #>CON_PI_HALF
001C52r 2  20 rr rr             jsr     FSUB
001C55r 2               L3FFC:
001C55r 2  68                   pla
001C56r 2  10 03                bpl     L4002
001C58r 2  4C rr rr             jmp     NEGOP
001C5Br 2               L4002:
001C5Br 2  60                   rts
001C5Cr 2               
001C5Cr 2               ; ----------------------------------------------------------------------------
001C5Cr 2               POLY_ATN:
001C5Cr 2               .ifdef CONFIG_SMALL
001C5Cr 2                       .byte   $08
001C5Cr 2               		.byte	$78,$3A,$C5,$37
001C5Cr 2               		.byte	$7B,$83,$A2,$5C
001C5Cr 2               		.byte	$7C,$2E,$DD,$4D
001C5Cr 2               		.byte	$7D,$99,$B0,$1E
001C5Cr 2               		.byte	$7D,$59,$ED,$24
001C5Cr 2               		.byte	$7E,$91,$72,$00
001C5Cr 2               		.byte	$7E,$4C,$B9,$73
001C5Cr 2               		.byte	$7F,$AA,$AA,$53
001C5Cr 2               		.byte	$81,$00,$00,$00
001C5Cr 2               .else
001C5Cr 2  0B                   .byte   $0B
001C5Dr 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001C61r 2  D3           
001C62r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001C66r 2  F5           
001C67r 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001C6Br 2  10           
001C6Cr 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001C70r 2  CA           
001C71r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001C75r 2  C1           
001C76r 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001C7Ar 2  4C           
001C7Br 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001C7Fr 2  7A           
001C80r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001C84r 2  7E           
001C85r 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001C89r 2  3A           
001C8Ar 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001C8Er 2  C7           
001C8Fr 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001C93r 2  13           
001C94r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001C98r 2  00           
001C99r 2               .endif
001C99r 2               
001C99r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001C99r 2               		.byte	$00 ; XXX
001C99r 2               .endif
001C99r 2               
001C99r 1               .include "init.s"
001C99r 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               ;PR_WRITTEN_BY:
000000r 2               ;.ifndef KBD
000000r 2                 ;.ifndef CONFIG_CBM_ALL
000000r 2                       ;lda     #<QT_WRITTEN_BY
000000r 2                       ;ldy     #>QT_WRITTEN_BY
000000r 2                       ;jsr     STROUT
000000r 2                 ;.endif
000000r 2               ;.endif
000000r 2               COLD_START:
000000r 2               .ifdef KBD
000000r 2                       lda     #<LFD81
000000r 2                       sta     $03A0
000000r 2                       lda     #>LFD81
000000r 2                       sta     $03A1
000000r 2                       lda     #$20
000000r 2                       sta     $0480
000000r 2                       lda     $0352
000000r 2                       sta     $04
000000r 2                       lda     $0353
000000r 2                       sta     $05
000000r 2               .else
000000r 2                 .ifndef CBM2
000000r 2  A2 FF                ldx     #$FF     ; set direct mode flag
000002r 2  86 79                stx     CURLIN+1
000004r 2                 .endif
000004r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
000004r 2  A2 FB                ldx     #$FB
000006r 2                 .endif
000006r 2  9A                   txs
000007r 2                 .ifndef CONFIG_CBM_ALL
000007r 2  A9 rr                lda     #<COLD_START
000009r 2  A0 rr                ldy     #>COLD_START
00000Br 2  85 01                sta     GORESTART+1
00000Dr 2  84 02                sty     GORESTART+2
00000Fr 2  85 04                sta     GOSTROUT+1
000011r 2  84 05                sty     GOSTROUT+2
000013r 2  A9 rr                lda     #<AYINT
000015r 2  A0 rr                ldy     #>AYINT
000017r 2  85 06                sta     GOAYINT
000019r 2  84 07                sty     GOAYINT+1
00001Br 2  A9 rr                lda     #<GIVAYF
00001Dr 2  A0 rr                ldy     #>GIVAYF
00001Fr 2  85 08                sta     GOGIVEAYF
000021r 2  84 09                sty     GOGIVEAYF+1
000023r 2                 .endif
000023r 2  A9 4C                lda     #$4C
000025r 2                 .ifdef CONFIG_CBM_ALL
000025r 2                       sta     JMPADRS
000025r 2                 .endif
000025r 2  85 00                sta     GORESTART
000027r 2                 .ifndef CONFIG_CBM_ALL
000027r 2  85 03                sta     GOSTROUT
000029r 2  85 93                sta     JMPADRS
00002Br 2                 .endif
00002Br 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
00002Br 2  85 0A                sta     USR
00002Dr 2                 .endif
00002Dr 2               
00002Dr 2                 .ifndef CONFIG_RAM
00002Dr 2                   .ifdef APPLE
00002Dr 2  A9 rr                  lda     #<USR_FUNC
00002Fr 2  A0 rr                  ldy     #>USR_FUNC
000031r 2                   .else
000031r 2                         lda     #<IQERR
000031r 2                         ldy     #>IQERR
000031r 2                   .endif
000031r 2  85 0B                  sta     USR+1
000033r 2  84 0C                  sty     USR+2
000035r 2                 .endif
000035r 2                 .ifndef CBM1
000035r 2  A9 00                lda     #WIDTH
000037r 2  85 51                sta     Z17
000039r 2  A9 00                lda     #WIDTH2
00003Br 2  85 52                sta     Z18
00003Dr 2                 .endif
00003Dr 2               .endif ;/* KBD */
00003Dr 2               
00003Dr 2               ; All non-CONFIG_SMALL versions of BASIC have
00003Dr 2               ; the same bug here: While the number of bytes
00003Dr 2               ; to be copied is correct for CONFIG_SMALL,
00003Dr 2               ; it is one byte short on non-CONFIG_SMALL:
00003Dr 2               ; It seems the "ldx" value below has been
00003Dr 2               ; hardcoded. So on these configurations,
00003Dr 2               ; the last byte of GENERIC_RNDSEED, which
00003Dr 2               ; is 5 bytes instead of 4, does not get copied -
00003Dr 2               ; which is nothing major, because it is just
00003Dr 2               ; the least significant 8 bits of the mantissa
00003Dr 2               ; of the random number seed.
00003Dr 2               ; KBD added three bytes to CHRGET and removed
00003Dr 2               ; the random number seed, but only adjusted
00003Dr 2               ; the number of bytes by adding 3 - this
00003Dr 2               ; copies four bytes too many, which is no
00003Dr 2               ; problem.
00003Dr 2               .ifdef CONFIG_SMALL
00003Dr 2                 .ifdef KBD
00003Dr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
00003Dr 2                 .else
00003Dr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00003Dr 2                 .endif
00003Dr 2               .else
00003Dr 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
00003Fr 2               .endif
00003Fr 2               L4098:
00003Fr 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000042r 2  95 B1                sta     CHRGET-1,x
000044r 2  CA                   dex
000045r 2  D0 F8                bne     L4098
000047r 2               .ifdef CONFIG_2
000047r 2  A9 03                lda     #$03
000049r 2  85 92                sta     DSCLEN
00004Br 2               .endif
00004Br 2               
00004Br 2               .ifndef KBD
00004Br 2  8A                   txa
00004Cr 2  85 A7                sta     SHIFTSIGNEXT
00004Er 2                 .ifdef CONFIG_CBM_ALL
00004Er 2                       sta     CURDVC
00004Er 2                 .endif
00004Er 2  85 57                sta     LASTPT+1
000050r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000050r 2                       sta     Z15
000050r 2                 .endif
000050r 2                 .ifndef CONFIG_11
000050r 2                       sta     POSX
000050r 2                 .endif
000050r 2  48                   pha
000051r 2  85 17                sta     Z14
000053r 2                 .ifndef CBM2
000053r 2                   .ifndef MICROTAN
000053r 2  A9 03                lda     #$03
000055r 2  85 92                sta     DSCLEN
000057r 2                   .endif
000057r 2                   .ifndef CONFIG_11
000057r 2                       lda     #$2C
000057r 2                       sta     LINNUM+1
000057r 2                   .endif
000057r 2  20 rr rr             jsr     CRDO
00005Ar 2                 .endif
00005Ar 2                 .ifdef CBM2
00005Ar 2                       inx
00005Ar 2                       stx     INPUTBUFFER-3
00005Ar 2                       stx     INPUTBUFFER-4
00005Ar 2                 .endif
00005Ar 2                 .ifdef APPLE
00005Ar 2  A9 01                lda     #$01
00005Cr 2  8D FD 01             sta     INPUTBUFFER-3
00005Fr 2  8D FC 01             sta     INPUTBUFFER-4
000062r 2                 .endif
000062r 2               
000062r 2  A2 58                ldx     #TEMPST
000064r 2  86 55                stx     TEMPPT
000066r 2               
000066r 2               .ifndef CONFIG_2
000066r 2               
000066r 2               ; ask for ram size
000066r 2               .ifndef CONFIG_CBM_ALL
000066r 2                       lda     #<QT_MEMORY_SIZE
000066r 2                       ldy     #>QT_MEMORY_SIZE
000066r 2                       jsr     STROUT
000066r 2                 .ifdef APPLE
000066r 2                       jsr     OUTQUES
000066r 2                       jsr     OUTSP
000066r 2                       ldx     #$80
000066r 2                       jmp     INLIN1
000066r 2                 .else
000066r 2                       jsr     NXIN
000066r 2                 .endif
000066r 2                       stx     TXTPTR
000066r 2                       sty     TXTPTR+1
000066r 2                       jsr     CHRGET
000066r 2                       ;cmp     #$41
000066r 2                       ;beq     PR_WRITTEN_BY
000066r 2                       tay
000066r 2                       bne     L40EE
000066r 2               .endif
000066r 2               
000066r 2               .else
000066r 2               
000066r 2               
000066r 2  A9 00                lda     #<RAMSTART2
000068r 2               
000068r 2  A0 26                ldy     #>RAMSTART2
00006Ar 2               
00006Ar 2               .ifdef CONFIG_2
00006Ar 2  85 6A                sta     TXTTAB
00006Cr 2  84 6B                sty     TXTTAB+1
00006Er 2               .endif
00006Er 2               
00006Er 2               .endif
00006Er 2               
00006Er 2  85 53                sta     LINNUM
000070r 2  84 54                sty     LINNUM+1
000072r 2               
000072r 2               .ifdef CBM2
000072r 2               		tay
000072r 2               .else
000072r 2  A0 00                ldy     #$00
000074r 2               .endif
000074r 2               
000074r 2               ; look for top of ram
000074r 2               L40D7:
000074r 2  E6 53                inc     LINNUM
000076r 2  D0 02                bne     L40DD
000078r 2  E6 54                inc     LINNUM+1
00007Ar 2               
00007Ar 2               .ifdef CONFIG_APPLE
00007Ar 2               ; run up to $B0.  assume prodos & friends are in town
00007Ar 2               .ifndef APPLE1
00007Ar 2                       lda LINNUM+1
00007Ar 2               		cmp #$B0
00007Ar 2               		beq L40FA
00007Ar 2               .endif
00007Ar 2               .endif
00007Ar 2               
00007Ar 2               .ifdef CBM1
00007Ar 2               ; CBM: hard RAM top limit is $8000
00007Ar 2                       lda     LINNUM+1
00007Ar 2                       cmp     #$80
00007Ar 2                       beq     L40FA
00007Ar 2               .endif
00007Ar 2               
00007Ar 2               
00007Ar 2               .ifdef CBM2
00007Ar 2               ; optimized version of the CBM1 code
00007Ar 2                       bmi     L40FA
00007Ar 2               .endif
00007Ar 2               
00007Ar 2               
00007Ar 2               L40DD:
00007Ar 2               .ifdef CONFIG_2
00007Ar 2  A9 55                lda     #$55 ; 01010101 / 10101010
00007Cr 2               .else
00007Cr 2                       lda     #$92 ; 10010010 / 00100100
00007Cr 2               .endif
00007Cr 2  91 53                sta     (LINNUM),y
00007Er 2  D1 53                cmp     (LINNUM),y
000080r 2  D0 15                bne     L40FA
000082r 2  0A                   asl     a
000083r 2  91 53                sta     (LINNUM),y
000085r 2  D1 53                cmp     (LINNUM),y
000087r 2               
000087r 2               .ifdef CONFIG_CBM_ALL
000087r 2                       beq     L40D7
000087r 2               .else
000087r 2                 .ifndef CONFIG_11
000087r 2                       beq     L40D7; old: faster
000087r 2                       bne     L40FA
000087r 2                 .else
000087r 2  D0 0E                bne     L40FA; new: slower
000089r 2  F0 E9                beq     L40D7
00008Br 2                 .endif
00008Br 2               L40EE:
00008Br 2  20 B8 00             jsr     CHRGOT
00008Er 2  20 rr rr             jsr     LINGET
000091r 2  A8                   tay
000092r 2  F0 03                beq     L40FA
000094r 2  4C rr rr             jmp     SYNERR
000097r 2               .endif
000097r 2               L40FA:
000097r 2  A5 53                lda     LINNUM
000099r 2  A4 54                ldy     LINNUM+1
00009Br 2               
00009Br 2               
00009Br 2               
00009Br 2               
00009Br 2  85 76                sta     MEMSIZ
00009Dr 2  84 77                sty     MEMSIZ+1
00009Fr 2               .ifndef MICROTAN
00009Fr 2  85 72                sta     FRETOP
0000A1r 2  84 73                sty     FRETOP+1
0000A3r 2               .endif
0000A3r 2               L4106:
0000A3r 2               .ifndef CONFIG_CBM_ALL
0000A3r 2               .ifndef CONFIG_2
0000A3r 2                 .ifdef APPLE_2
0000A3r 2                       lda     #$FF
0000A3r 2                       ;jmp     L2829
0000A3r 2                       ;.word	STROUT ; PATCH! -- looks like a patch
0000A3r 2                       ;jsr     NXIN
0000A3r 2                 .else
0000A3r 2                 ; ask for screen width
0000A3r 2                       lda     #<QT_TERMINAL_WIDTH
0000A3r 2                       ldy     #>QT_TERMINAL_WIDTH
0000A3r 2                       jsr     STROUT
0000A3r 2                       jsr     NXIN
0000A3r 2                       stx     TXTPTR
0000A3r 2                       sty     TXTPTR+1
0000A3r 2                       jsr     CHRGET
0000A3r 2                       tay
0000A3r 2                       beq     L4136
0000A3r 2                       jsr     LINGET
0000A3r 2                       lda     LINNUM+1
0000A3r 2                       bne     L4106
0000A3r 2                       lda     LINNUM
0000A3r 2                       cmp     #$10
0000A3r 2                       bcc     L4106
0000A3r 2                 .endif
0000A3r 2               .else
0000A3r 2  A9 00                lda #WIDTH
0000A5r 2               
0000A5r 2               .endif
0000A5r 2               
0000A5r 2               L2829:
0000A5r 2  85 51                sta     Z17
0000A7r 2               
0000A7r 2               L4129:
0000A7r 2  E9 0E                sbc     #$0E
0000A9r 2  B0 FC                bcs     L4129
0000ABr 2  49 FF                eor     #$FF
0000ADr 2  E9 0C                sbc     #$0C
0000AFr 2  18                   clc
0000B0r 2  65 51                adc     Z17
0000B2r 2  85 52                sta     Z18
0000B4r 2               .endif
0000B4r 2               L4136:
0000B4r 2               .ifdef CONFIG_RAM
0000B4r 2                       lda     #<QT_WANT
0000B4r 2                       ldy     #>QT_WANT
0000B4r 2                       jsr     STROUT
0000B4r 2                       jsr     NXIN
0000B4r 2                       stx     TXTPTR
0000B4r 2                       sty     TXTPTR+1
0000B4r 2                       jsr     CHRGET
0000B4r 2                       ldx     #<RAMSTART1
0000B4r 2                       ldy     #>RAMSTART1
0000B4r 2                       cmp     #'Y'
0000B4r 2                       beq     L4183
0000B4r 2                       cmp     #'A'
0000B4r 2                       beq     L4157
0000B4r 2                       cmp     #'N'
0000B4r 2                       bne     L4136
0000B4r 2               L4157:
0000B4r 2                       ldx     #<IQERR
0000B4r 2                       ldy     #>IQERR
0000B4r 2                       stx     UNFNC_ATN
0000B4r 2                       sty     UNFNC_ATN+1
0000B4r 2                       ldx     #<ATN	; overwrite starting
0000B4r 2                       ldy     #>ATN	; with ATN
0000B4r 2                       cmp     #'A'
0000B4r 2                       beq     L4183
0000B4r 2                       ldx     #<IQERR
0000B4r 2                       ldy     #>IQERR
0000B4r 2                       stx     UNFNC_COS
0000B4r 2                       sty     UNFNC_COS+1
0000B4r 2                       stx     UNFNC_TAN
0000B4r 2                       sty     UNFNC_TAN+1
0000B4r 2                       stx     UNFNC_SIN
0000B4r 2                       sty     UNFNC_SIN+1
0000B4r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000B4r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000B4r 2               L4183:
0000B4r 2               .else
0000B4r 2  A2 00                ldx     #<RAMSTART2
0000B6r 2  A0 26                ldy     #>RAMSTART2
0000B8r 2               .endif
0000B8r 2  86 6A                stx     TXTTAB
0000BAr 2  84 6B                sty     TXTTAB+1
0000BCr 2  A0 00                ldy     #$00
0000BEr 2  98                   tya
0000BFr 2  91 6A                sta     (TXTTAB),y
0000C1r 2  E6 6A                inc     TXTTAB
0000C3r 2               .ifndef CBM2
0000C3r 2  D0 02                bne     L4192
0000C5r 2  E6 6B                inc     TXTTAB+1
0000C7r 2               L4192:
0000C7r 2               .endif
0000C7r 2               .if CONFIG_SCRTCH_ORDER = 1
0000C7r 2                       jsr     SCRTCH
0000C7r 2               .endif
0000C7r 2  A5 6A                lda     TXTTAB
0000C9r 2  A4 6B                ldy     TXTTAB+1
0000CBr 2  20 rr rr             jsr     REASON
0000CEr 2               .ifdef CBM2
0000CEr 2                       lda     #<QT_BASIC
0000CEr 2                       ldy     #>QT_BASIC
0000CEr 2                       jsr     STROUT
0000CEr 2               .else
0000CEr 2  20 rr rr             jsr     CRDO
0000D1r 2               .endif
0000D1r 2  A5 76                lda     MEMSIZ
0000D3r 2  38                   sec
0000D4r 2  E5 6A                sbc     TXTTAB
0000D6r 2  AA                   tax
0000D7r 2  A5 77                lda     MEMSIZ+1
0000D9r 2  E5 6B                sbc     TXTTAB+1
0000DBr 2  20 rr rr             jsr     LINPRT
0000DEr 2  A9 rr                lda     #<QT_BYTES_FREE
0000E0r 2  A0 rr                ldy     #>QT_BYTES_FREE
0000E2r 2  20 rr rr             jsr     STROUT
0000E5r 2               .if CONFIG_SCRTCH_ORDER = 2
0000E5r 2                       jsr     SCRTCH
0000E5r 2               .endif
0000E5r 2               .ifdef CONFIG_CBM_ALL
0000E5r 2                       jmp     RESTART
0000E5r 2               .else
0000E5r 2  A9 rr                lda     #<STROUT
0000E7r 2  A0 rr                ldy     #>STROUT
0000E9r 2  85 04                sta     GOSTROUT+1
0000EBr 2  84 05                sty     GOSTROUT+2
0000EDr 2                 .if CONFIG_SCRTCH_ORDER = 3
0000EDr 2  20 rr rr              jsr     SCRTCH
0000F0r 2                 .endif
0000F0r 2  A9 rr                lda     #<RESTART
0000F2r 2  A0 rr                ldy     #>RESTART
0000F4r 2  85 01                sta     GORESTART+1
0000F6r 2  84 02                sty     GORESTART+2
0000F8r 2  6C 01 00             jmp     (GORESTART+1)
0000FBr 2               .endif
0000FBr 2               
0000FBr 2                 .if .def(CONFIG_RAM) || .def(OSI)
0000FBr 2               ; OSI is compiled for ROM, but includes
0000FBr 2               ; this unused string
0000FBr 2               QT_WANT:
0000FBr 2                       .byte   "WANT SIN-COS-TAN-ATN"
0000FBr 2                       .byte   0
0000FBr 2                 .endif
0000FBr 2               
0000FBr 2               QT_WRITTEN_BY:
0000FBr 2                 .ifndef CONFIG_CBM_ALL
0000FBr 2                   .ifdef APPLE
0000FBr 2  C3 CF D0 D9  		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
0000FFr 2  D2 C9 C7 C8  
000103r 2  D4 A0 B1 B9  
000119r 2  0D 00        		.byte	CR,0
00011Br 2                   .else
00011Br 2                       .byte   CR,LF,$0C ; FORM FEED
00011Br 2                     .ifndef CONFIG_11
00011Br 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00011Br 2                     .else
00011Br 2                       .byte   "WRITTEN BY WEILAND & GATES"
00011Br 2                     .endif
00011Br 2                       .byte   CR,LF,0
00011Br 2                   .endif
00011Br 2               
00011Br 2               .ifdef APPLE_2
00011Br 2               QT_MEMORY_SIZE:
00011Br 2                       .byte   "MEMORY SIZE"
00011Br 2                       .byte   0
00011Br 2               QT_TERMINAL_WIDTH:
00011Br 2                       .byte   "TERMINAL WIDTH"
00011Br 2                       .byte   0
00011Br 2                 .endif
00011Br 2               QT_BYTES_FREE:
00011Br 2  20 42 59 54          .byte   " BYTES FREE"
00011Fr 2  45 53 20 46  
000123r 2  52 45 45     
000126r 2                 .ifdef CBM1
000126r 2                 .elseif .def(CBM2)
000126r 2                       .byte   CR,0
000126r 2                 .elseif .def(APPLE)
000126r 2  00                   .byte   0
000127r 2                 .else
000127r 2                       .byte   CR,LF,CR,LF
000127r 2                 .endif
000127r 2               QT_BASIC:
000127r 2                 .ifdef OSI
000127r 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000127r 2                 .endif
000127r 2                 .ifdef KIM
000127r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000127r 2                 .endif
000127r 2                 .ifdef MICROTAN
000127r 2                       .byte   "MICROTAN BASIC"
000127r 2                 .endif
000127r 2                 .ifdef CBM1
000127r 2                       .byte   $13 ; HOME
000127r 2                       .byte   "*** COMMODORE BASIC ***"
000127r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000127r 2                 .endif
000127r 2                 .ifdef CBM2
000127r 2                       .byte   "### COMMODORE BASIC ###"
000127r 2                       .byte   CR,CR,0
000127r 2                 .endif
000127r 2                 .ifdef APPLE
000127r 2  0A 0D 0A             .byte   LF,CR,LF
00012Ar 2  41 50 50 4C  		.byte	"APPLE BASIC V1.1"
00012Er 2  45 20 42 41  
000132r 2  53 49 43 20  
00013Ar 2                 .endif
00013Ar 2                 .ifndef CONFIG_CBM_ALL
00013Ar 2  0D 0A                .byte   CR,LF
00013Cr 2                   .ifdef MICROTAN
00013Cr 2                       .byte   "(C) 1980 MICROSOFT"
00013Cr 2                   .else
00013Cr 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
000140r 2  52 49 47 48  
000144r 2  54 20 31 39  
00015Br 2                   .endif
00015Br 2  0D 0A 00             .byte   CR,LF,0
00015Er 2                 .endif
00015Er 2               .endif
00015Er 2               
00015Er 2               .endif ;/* KBD */
00015Er 2               
00015Er 1               .include "extra.s"
00015Er 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 3               .segment "EXTRA"
000000r 3               
000000r 3               .ifdef APPLE1
000000r 3               
000000r 3               
000000r 3               ; GETchar from wozmon, mostly
000000r 3               MONRDKEY:
000000r 3  AD 11 D0             lda     KBcr
000003r 3  10 FB                bpl     MONRDKEY
000005r 3  AD 10 D0             lda     KBin    ; get key
000008r 3  60                   rts
000009r 3               
000009r 3               MONRDLINE:
000009r 3  86 33                stx     $33
00000Br 3  A2 00                ldx     #0
00000Dr 3  4C rr rr             jmp     APPLENEXTCHAR
000010r 3               NOTCR:
000010r 3  C9 DF                cmp     #$DF
000012r 3  F0 0F                beq     APPLEBACKSPACE
000014r 3  E8                   inx
000015r 3  D0 0F                bne     APPLENEXTCHAR
000017r 3                       ; reset input if we hit 255 chars
000017r 3  A9 DC                lda     #$DC
000019r 3  20 EF FF             jsr     MONCOUT
00001Cr 3               APPLEGETLINE:
00001Cr 3  A9 8D                lda     #$8D
00001Er 3  20 EF FF             jsr     MONCOUT
000021r 3               
000021r 3  A2 01                ldx     #$01
000023r 3               APPLEBACKSPACE:
000023r 3  CA                   dex
000024r 3  30 F6                bmi     APPLEGETLINE
000026r 3               APPLENEXTCHAR:
000026r 3  20 rr rr             jsr     MONRDKEY
000029r 3  9D 00 02             sta     INPUTBUFFER,x
00002Cr 3  20 EF FF             jsr     MONCOUT
00002Fr 3  C9 8D                cmp     #$8D
000031r 3  D0 DD                bne     NOTCR
000033r 3               ; replace CR with a 0, strip high bit
000033r 3  A2 00                ldx     #$00
000035r 3               L2907:
000035r 3  BD 00 02             lda     INPUTBUFFER,x
000038r 3  29 7F                and     #$7F
00003Ar 3  C9 0D                cmp     #$0D
00003Cr 3  D0 02                bne     L2912
00003Er 3  A9 00                lda     #$00
000040r 3               L2912:
000040r 3  9D 00 02             sta     INPUTBUFFER,x
000043r 3  E8                   inx
000044r 3  D0 EF                bne     L2907
000046r 3  A6 33                ldx     $33
000048r 3  60                   rts
000049r 3               
000049r 3               INLINX:
000049r 3  20 rr rr             jsr     OUTQUES
00004Cr 3  20 rr rr             jsr     OUTSP
00004Fr 3  A2 80                ldx     #$80
000051r 3  4C rr rr             jmp     INLIN1
000054r 3               
000054r 3               USR_FUNC:
000054r 3  20 rr rr             jsr     L29DA
000057r 3  A5 A3                lda     FAC+3
000059r 3  85 A5                sta     FAC+5
00005Br 3  6C A4 00             jmp     (FAC+4)
00005Er 3               L29DA:
00005Er 3  6C 06 00             jmp     (GOAYINT)
000061r 3               
000061r 3               .endif
000061r 3               
000061r 3               
000061r 3               
000061r 3               
000061r 3               .ifdef APPLE_2
000061r 3               MONRDLINE:
000061r 3                       jsr     LFD6A
000061r 3                       stx     $33
000061r 3                       ldx     #$00
000061r 3               L2907:
000061r 3                       lda     $0200,x
000061r 3                       and     #$7F
000061r 3                       cmp     #$0D
000061r 3                       bne     L2912
000061r 3                       lda     #$00
000061r 3               L2912:
000061r 3                       sta     $0200,x
000061r 3                       inx
000061r 3                       bne     L2907
000061r 3                       ldx     $33
000061r 3                       rts
000061r 3               
000061r 3               
000061r 3               
000061r 3                       .byte   0,0,0
000061r 3               
000061r 3               PLT:
000061r 3                       jmp     L29F0
000061r 3               L291E:
000061r 3                       cmp     #$47
000061r 3                       bne     L2925
000061r 3                       jmp     L29E0
000061r 3               L2925:
000061r 3                       cmp     #$43
000061r 3                       bne     L292B
000061r 3                       beq     L2988
000061r 3               L292B:
000061r 3                       cmp     #$50
000061r 3                       beq     L2930
000061r 3                       inx
000061r 3               L2930:
000061r 3                       stx     $33
000061r 3               L2932:
000061r 3                       jsr     FRMEVL
000061r 3                       jsr     ROUND_FAC
000061r 3                       jsr     AYINT
000061r 3                       lda     FAC+4
000061r 3                       ldx     $33
000061r 3                       sta     $0300,x
000061r 3                       dec     $33
000061r 3                       bmi     L294Dx
000061r 3                       lda     #$2C
000061r 3               		jsr     SYNCHR
000061r 3                       bpl     L2932
000061r 3               L294Dx:
000061r 3                       tay
000061r 3                       pla
000061r 3                       cmp     #$43
000061r 3                       bne     L2957
000061r 3                       tya
000061r 3                       jmp     LF864
000061r 3               L2957:
000061r 3                       cmp     #$50
000061r 3                       bne     L2962
000061r 3                       tya
000061r 3                       ldy     $0301
000061r 3                       jmp     LF800
000061r 3               L2962:
000061r 3                       pha
000061r 3                       lda     $0301
000061r 3                       sta     $2C
000061r 3                       sta     $2D
000061r 3                       pla
000061r 3                       cmp     #$48
000061r 3                       bne     L2978
000061r 3                       lda     $0300
000061r 3                       ldy     $0302
000061r 3                       jmp     LF819
000061r 3               L2978:
000061r 3                       cmp     #$56
000061r 3                       beq     L297F
000061r 3                       jmp     SYNERR
000061r 3               L297F:
000061r 3                       ldy     $0300
000061r 3                       lda     $0302
000061r 3                       jmp     LF828
000061r 3               L2988:
000061r 3                       dex
000061r 3                       beq     L2930
000061r 3               
000061r 3               INLINX:
000061r 3                       jsr     OUTQUES
000061r 3                       jsr     OUTSP
000061r 3                       ldx     #$80
000061r 3                       jmp     INLIN1
000061r 3                       .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061r 3                       .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061r 3                       .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061r 3                       .byte   0,0,0,0,0,0,0,0,0,0
000061r 3               
000061r 3               
000061r 3               USR_FUNC:
000061r 3                       jsr     L29DA
000061r 3                       lda     FAC+3
000061r 3                       sta     FAC+5
000061r 3                       jmp     (FAC+4)
000061r 3               L29DA:
000061r 3                       jmp     (GOAYINT)
000061r 3               
000061r 3                       brk
000061r 3                       brk
000061r 3                       brk
000061r 3               L29E0:
000061r 3                       pla
000061r 3                       jmp     LFB40
000061r 3               
000061r 3                       .byte   0,0,0,0,0,0,0,0,0,0,0,0
000061r 3               L29F0:
000061r 3                       pha
000061r 3                       ldx     #$01
000061r 3                       inc     $B9
000061r 3                       bne     L29F9
000061r 3                       inc     $BA
000061r 3               L29F9:
000061r 3                       jmp     L291E
000061r 3                       .byte   $00,$00,$00,$00,$41,$53,$21,$D2
000061r 3               		.byte   $02,$FA,$00
000061r 3                       lda     $12
000061r 3                       beq     L2A0E
000061r 3                       jmp     (GOGIVEAYF)
000061r 3               L2A0E:
000061r 3                       jsr     LF689
000061r 3                       .byte   $15,$BC,$08,$10,$52,$45,$75,$10
000061r 3                       .byte   $CD,$00,$55,$15,$9E,$08,$10,$4C
000061r 3                       .byte   $45,$75,$10,$D4,$00,$55,$15,$0E
000061r 3                       .byte   $08,$10,$89,$10,$75,$15,$1C,$08
000061r 3                       .byte   $10,$1F,$10,$75,$00
000061r 3                       jmp     (GOGIVEAYF)
000061r 3               ; ----------------------------------------------------------------------------
000061r 3                       .byte   0,0,0,0,0,0
000061r 3               
000061r 3               
000061r 3               .endif
000061r 3               
000061r 3               
000061r 2               .endif
000061r 2               
000061r 2               .ifdef MICROTAN
000061r 2               .include "microtan_extra.s"
000061r 2               .endif
000061r 2               
000061r 1               
